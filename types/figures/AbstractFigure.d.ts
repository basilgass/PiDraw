import { G, Shape, Svg } from '@svgdotjs/svg.js';
import { IFigureAnimation, IFigureAppearanceConfig, IGraphConfig, XY } from '../pidraw.common';
import { Label } from '../labels/Label';
export declare abstract class AbstractFigure {
    #private;
    constructor(rootSVG: Svg, name: string);
    get element(): G;
    get name(): string;
    get rootSVG(): Svg;
    get shape(): Shape;
    set shape(value: Shape);
    get appearance(): IFigureAppearanceConfig;
    set appearance(value: IFigureAppearanceConfig);
    get graphConfig(): IGraphConfig;
    get static(): boolean;
    set static(value: boolean);
    get isDraggable(): boolean;
    set isDraggable(value: boolean);
    get label(): Label | null;
    get animate(): IFigureAnimation | null;
    set animate(value: IFigureAnimation | null);
    abstract computed(): this;
    hide(): this;
    show(): this;
    strokeable(): Shape[];
    fillable(): Shape[];
    fill(color?: string): this;
    stroke(): this;
    stroke(color: string): this;
    stroke(strokeWidth: number): this;
    stroke(color: string, strokeWidth: number): this;
    dash(dasharray?: string): this;
    dot(): this;
    clear(all?: boolean): this;
    update(forceUpdate?: boolean): this;
    addLabel(text?: string, asHtml?: boolean, texConverter?: (value: string) => string): Label;
    abstract moveLabel(): this;
    updateLabel(): this;
    computeLabel(): string;
    move(pos: number): this;
    move(pos: XY): this;
    scale(value: XY | number): this;
    mark(value?: string | boolean, options?: (string | number)[]): this;
    follow(x: number, y: number): XY;
}
