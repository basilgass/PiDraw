{"version":3,"file":"pidraw.js","sources":["../node_modules/@svgdotjs/svg.js/src/utils/methods.js","../node_modules/@svgdotjs/svg.js/src/utils/utils.js","../node_modules/@svgdotjs/svg.js/src/modules/core/namespaces.js","../node_modules/@svgdotjs/svg.js/src/utils/window.js","../node_modules/@svgdotjs/svg.js/src/types/Base.js","../node_modules/@svgdotjs/svg.js/src/utils/adopter.js","../node_modules/@svgdotjs/svg.js/src/modules/optional/arrange.js","../node_modules/@svgdotjs/svg.js/src/modules/core/regex.js","../node_modules/@svgdotjs/svg.js/src/modules/optional/class.js","../node_modules/@svgdotjs/svg.js/src/modules/optional/css.js","../node_modules/@svgdotjs/svg.js/src/modules/optional/data.js","../node_modules/@svgdotjs/svg.js/src/modules/optional/memory.js","../node_modules/@svgdotjs/svg.js/src/types/Color.js","../node_modules/@svgdotjs/svg.js/src/types/Point.js","../node_modules/@svgdotjs/svg.js/src/types/Matrix.js","../node_modules/@svgdotjs/svg.js/src/modules/core/parser.js","../node_modules/@svgdotjs/svg.js/src/types/Box.js","../node_modules/@svgdotjs/svg.js/src/types/List.js","../node_modules/@svgdotjs/svg.js/src/modules/core/selector.js","../node_modules/@svgdotjs/svg.js/src/modules/core/event.js","../node_modules/@svgdotjs/svg.js/src/types/EventTarget.js","../node_modules/@svgdotjs/svg.js/src/modules/core/defaults.js","../node_modules/@svgdotjs/svg.js/src/types/SVGArray.js","../node_modules/@svgdotjs/svg.js/src/types/SVGNumber.js","../node_modules/@svgdotjs/svg.js/src/modules/core/attr.js","../node_modules/@svgdotjs/svg.js/src/elements/Dom.js","../node_modules/@svgdotjs/svg.js/src/elements/Element.js","../node_modules/@svgdotjs/svg.js/src/modules/optional/sugar.js","../node_modules/@svgdotjs/svg.js/src/modules/optional/transform.js","../node_modules/@svgdotjs/svg.js/src/elements/Container.js","../node_modules/@svgdotjs/svg.js/src/elements/Defs.js","../node_modules/@svgdotjs/svg.js/src/elements/Shape.js","../node_modules/@svgdotjs/svg.js/src/modules/core/circled.js","../node_modules/@svgdotjs/svg.js/src/elements/Ellipse.js","../node_modules/@svgdotjs/svg.js/src/elements/Fragment.js","../node_modules/@svgdotjs/svg.js/src/modules/core/gradiented.js","../node_modules/@svgdotjs/svg.js/src/elements/Gradient.js","../node_modules/@svgdotjs/svg.js/src/elements/Pattern.js","../node_modules/@svgdotjs/svg.js/src/elements/Image.js","../node_modules/@svgdotjs/svg.js/src/types/PointArray.js","../node_modules/@svgdotjs/svg.js/src/modules/core/pointed.js","../node_modules/@svgdotjs/svg.js/src/elements/Line.js","../node_modules/@svgdotjs/svg.js/src/elements/Marker.js","../node_modules/@svgdotjs/svg.js/src/animation/Controller.js","../node_modules/@svgdotjs/svg.js/src/utils/pathParser.js","../node_modules/@svgdotjs/svg.js/src/types/PathArray.js","../node_modules/@svgdotjs/svg.js/src/animation/Morphable.js","../node_modules/@svgdotjs/svg.js/src/elements/Path.js","../node_modules/@svgdotjs/svg.js/src/modules/core/poly.js","../node_modules/@svgdotjs/svg.js/src/elements/Polygon.js","../node_modules/@svgdotjs/svg.js/src/elements/Polyline.js","../node_modules/@svgdotjs/svg.js/src/elements/Rect.js","../node_modules/@svgdotjs/svg.js/src/animation/Queue.js","../node_modules/@svgdotjs/svg.js/src/animation/Animator.js","../node_modules/@svgdotjs/svg.js/src/animation/Timeline.js","../node_modules/@svgdotjs/svg.js/src/animation/Runner.js","../node_modules/@svgdotjs/svg.js/src/elements/Svg.js","../node_modules/@svgdotjs/svg.js/src/elements/Symbol.js","../node_modules/@svgdotjs/svg.js/src/modules/core/textable.js","../node_modules/@svgdotjs/svg.js/src/elements/Text.js","../node_modules/@svgdotjs/svg.js/src/elements/Tspan.js","../node_modules/@svgdotjs/svg.js/src/elements/Circle.js","../node_modules/@svgdotjs/svg.js/src/elements/ClipPath.js","../node_modules/@svgdotjs/svg.js/src/elements/ForeignObject.js","../node_modules/@svgdotjs/svg.js/src/modules/core/containerGeometry.js","../node_modules/@svgdotjs/svg.js/src/elements/G.js","../node_modules/@svgdotjs/svg.js/src/elements/A.js","../node_modules/@svgdotjs/svg.js/src/elements/Mask.js","../node_modules/@svgdotjs/svg.js/src/elements/Stop.js","../node_modules/@svgdotjs/svg.js/src/elements/Style.js","../node_modules/@svgdotjs/svg.js/src/elements/TextPath.js","../node_modules/@svgdotjs/svg.js/src/elements/Use.js","../node_modules/@svgdotjs/svg.js/src/main.js","../node_modules/@svgdotjs/svg.draggable.js/src/svg.draggable.js","../src/pidraw.common.ts","../src/labels/Label.ts","../src/Calculus.ts","../src/figures/AbstractFigure.ts","../src/figures/Line.ts","../src/figures/Point.ts","../src/figures/Plot.ts","../src/figures/Circle.ts","../src/figures/Polygon.ts","../src/figures/Grid.ts","../src/figures/Arc.ts","../src/figures/CoordinateSystem.ts","../src/figures/Parametric.ts","../src/figures/Follow.ts","../src/figures/FillBetween.ts","../src/figures/Riemann.ts","../src/figures/Path.ts","../src/Graph.ts","../src/parser/parser.common.ts","../src/parser/buildCircle.ts","../src/parser/buildLine.ts","../src/parser/buildPlot.ts","../src/parser/buildPoint.ts","../src/parser/buildPolygon.ts","../src/parser/parser.config.ts","../node_modules/piparser/lib/convertValue.ts","../node_modules/piparser/lib/splitValues.ts","../node_modules/piparser/lib/splitKeyValuePair.ts","../node_modules/piparser/lib/PiParse.ts","../src/Draw.ts"],"sourcesContent":["const methods = {}\nconst names = []\n\nexport function registerMethods(name, m) {\n  if (Array.isArray(name)) {\n    for (const _name of name) {\n      registerMethods(_name, m)\n    }\n    return\n  }\n\n  if (typeof name === 'object') {\n    for (const _name in name) {\n      registerMethods(_name, name[_name])\n    }\n    return\n  }\n\n  addMethodNames(Object.getOwnPropertyNames(m))\n  methods[name] = Object.assign(methods[name] || {}, m)\n}\n\nexport function getMethodsFor(name) {\n  return methods[name] || {}\n}\n\nexport function getMethodNames() {\n  return [...new Set(names)]\n}\n\nexport function addMethodNames(_names) {\n  names.push(..._names)\n}\n","// Map function\nexport function map(array, block) {\n  let i\n  const il = array.length\n  const result = []\n\n  for (i = 0; i < il; i++) {\n    result.push(block(array[i]))\n  }\n\n  return result\n}\n\n// Filter function\nexport function filter(array, block) {\n  let i\n  const il = array.length\n  const result = []\n\n  for (i = 0; i < il; i++) {\n    if (block(array[i])) {\n      result.push(array[i])\n    }\n  }\n\n  return result\n}\n\n// Degrees to radians\nexport function radians(d) {\n  return ((d % 360) * Math.PI) / 180\n}\n\n// Radians to degrees\nexport function degrees(r) {\n  return ((r * 180) / Math.PI) % 360\n}\n\n// Convert camel cased string to dash separated\nexport function unCamelCase(s) {\n  return s.replace(/([A-Z])/g, function (m, g) {\n    return '-' + g.toLowerCase()\n  })\n}\n\n// Capitalize first letter of a string\nexport function capitalize(s) {\n  return s.charAt(0).toUpperCase() + s.slice(1)\n}\n\n// Calculate proportional width and height values when necessary\nexport function proportionalSize(element, width, height, box) {\n  if (width == null || height == null) {\n    box = box || element.bbox()\n\n    if (width == null) {\n      width = (box.width / box.height) * height\n    } else if (height == null) {\n      height = (box.height / box.width) * width\n    }\n  }\n\n  return {\n    width: width,\n    height: height\n  }\n}\n\n/**\n * This function adds support for string origins.\n * It searches for an origin in o.origin o.ox and o.originX.\n * This way, origin: {x: 'center', y: 50} can be passed as well as ox: 'center', oy: 50\n **/\nexport function getOrigin(o, element) {\n  const origin = o.origin\n  // First check if origin is in ox or originX\n  let ox = o.ox != null ? o.ox : o.originX != null ? o.originX : 'center'\n  let oy = o.oy != null ? o.oy : o.originY != null ? o.originY : 'center'\n\n  // Then check if origin was used and overwrite in that case\n  if (origin != null) {\n    ;[ox, oy] = Array.isArray(origin)\n      ? origin\n      : typeof origin === 'object'\n        ? [origin.x, origin.y]\n        : [origin, origin]\n  }\n\n  // Make sure to only call bbox when actually needed\n  const condX = typeof ox === 'string'\n  const condY = typeof oy === 'string'\n  if (condX || condY) {\n    const { height, width, x, y } = element.bbox()\n\n    // And only overwrite if string was passed for this specific axis\n    if (condX) {\n      ox = ox.includes('left')\n        ? x\n        : ox.includes('right')\n          ? x + width\n          : x + width / 2\n    }\n\n    if (condY) {\n      oy = oy.includes('top')\n        ? y\n        : oy.includes('bottom')\n          ? y + height\n          : y + height / 2\n    }\n  }\n\n  // Return the origin as it is if it wasn't a string\n  return [ox, oy]\n}\n\nconst descriptiveElements = new Set(['desc', 'metadata', 'title'])\nexport const isDescriptive = (element) =>\n  descriptiveElements.has(element.nodeName)\n\nexport const writeDataToDom = (element, data, defaults = {}) => {\n  const cloned = { ...data }\n\n  for (const key in cloned) {\n    if (cloned[key].valueOf() === defaults[key]) {\n      delete cloned[key]\n    }\n  }\n\n  if (Object.keys(cloned).length) {\n    element.node.setAttribute('data-svgjs', JSON.stringify(cloned)) // see #428\n  } else {\n    element.node.removeAttribute('data-svgjs')\n    element.node.removeAttribute('svgjs:data')\n  }\n}\n","// Default namespaces\nexport const svg = 'http://www.w3.org/2000/svg'\nexport const html = 'http://www.w3.org/1999/xhtml'\nexport const xmlns = 'http://www.w3.org/2000/xmlns/'\nexport const xlink = 'http://www.w3.org/1999/xlink'\n","export const globals = {\n  window: typeof window === 'undefined' ? null : window,\n  document: typeof document === 'undefined' ? null : document\n}\n\nexport function registerWindow(win = null, doc = null) {\n  globals.window = win\n  globals.document = doc\n}\n\nconst save = {}\n\nexport function saveWindow() {\n  save.window = globals.window\n  save.document = globals.document\n}\n\nexport function restoreWindow() {\n  globals.window = save.window\n  globals.document = save.document\n}\n\nexport function withWindow(win, fn) {\n  saveWindow()\n  registerWindow(win, win.document)\n  fn(win, win.document)\n  restoreWindow()\n}\n\nexport function getWindow() {\n  return globals.window\n}\n","export default class Base {\n  // constructor (node/*, {extensions = []} */) {\n  //   // this.tags = []\n  //   //\n  //   // for (let extension of extensions) {\n  //   //   extension.setup.call(this, node)\n  //   //   this.tags.push(extension.name)\n  //   // }\n  // }\n}\n","import { addMethodNames } from './methods.js'\nimport { capitalize } from './utils.js'\nimport { svg } from '../modules/core/namespaces.js'\nimport { globals } from '../utils/window.js'\nimport Base from '../types/Base.js'\n\nconst elements = {}\nexport const root = '___SYMBOL___ROOT___'\n\n// Method for element creation\nexport function create(name, ns = svg) {\n  // create element\n  return globals.document.createElementNS(ns, name)\n}\n\nexport function makeInstance(element, isHTML = false) {\n  if (element instanceof Base) return element\n\n  if (typeof element === 'object') {\n    return adopter(element)\n  }\n\n  if (element == null) {\n    return new elements[root]()\n  }\n\n  if (typeof element === 'string' && element.charAt(0) !== '<') {\n    return adopter(globals.document.querySelector(element))\n  }\n\n  // Make sure, that HTML elements are created with the correct namespace\n  const wrapper = isHTML ? globals.document.createElement('div') : create('svg')\n  wrapper.innerHTML = element\n\n  // We can use firstChild here because we know,\n  // that the first char is < and thus an element\n  element = adopter(wrapper.firstChild)\n\n  // make sure, that element doesn't have its wrapper attached\n  wrapper.removeChild(wrapper.firstChild)\n  return element\n}\n\nexport function nodeOrNew(name, node) {\n  return node &&\n    (node instanceof globals.window.Node ||\n      (node.ownerDocument &&\n        node instanceof node.ownerDocument.defaultView.Node))\n    ? node\n    : create(name)\n}\n\n// Adopt existing svg elements\nexport function adopt(node) {\n  // check for presence of node\n  if (!node) return null\n\n  // make sure a node isn't already adopted\n  if (node.instance instanceof Base) return node.instance\n\n  if (node.nodeName === '#document-fragment') {\n    return new elements.Fragment(node)\n  }\n\n  // initialize variables\n  let className = capitalize(node.nodeName || 'Dom')\n\n  // Make sure that gradients are adopted correctly\n  if (className === 'LinearGradient' || className === 'RadialGradient') {\n    className = 'Gradient'\n\n    // Fallback to Dom if element is not known\n  } else if (!elements[className]) {\n    className = 'Dom'\n  }\n\n  return new elements[className](node)\n}\n\nlet adopter = adopt\n\nexport function mockAdopt(mock = adopt) {\n  adopter = mock\n}\n\nexport function register(element, name = element.name, asRoot = false) {\n  elements[name] = element\n  if (asRoot) elements[root] = element\n\n  addMethodNames(Object.getOwnPropertyNames(element.prototype))\n\n  return element\n}\n\nexport function getClass(name) {\n  return elements[name]\n}\n\n// Element id sequence\nlet did = 1000\n\n// Get next named element id\nexport function eid(name) {\n  return 'Svgjs' + capitalize(name) + did++\n}\n\n// Deep new id assignment\nexport function assignNewId(node) {\n  // do the same for SVG child nodes as well\n  for (let i = node.children.length - 1; i >= 0; i--) {\n    assignNewId(node.children[i])\n  }\n\n  if (node.id) {\n    node.id = eid(node.nodeName)\n    return node\n  }\n\n  return node\n}\n\n// Method for extending objects\nexport function extend(modules, methods) {\n  let key, i\n\n  modules = Array.isArray(modules) ? modules : [modules]\n\n  for (i = modules.length - 1; i >= 0; i--) {\n    for (key in methods) {\n      modules[i].prototype[key] = methods[key]\n    }\n  }\n}\n\nexport function wrapWithAttrCheck(fn) {\n  return function (...args) {\n    const o = args[args.length - 1]\n\n    if (o && o.constructor === Object && !(o instanceof Array)) {\n      return fn.apply(this, args.slice(0, -1)).attr(o)\n    } else {\n      return fn.apply(this, args)\n    }\n  }\n}\n","import { makeInstance } from '../../utils/adopter.js'\nimport { registerMethods } from '../../utils/methods.js'\n\n// Get all siblings, including myself\nexport function siblings() {\n  return this.parent().children()\n}\n\n// Get the current position siblings\nexport function position() {\n  return this.parent().index(this)\n}\n\n// Get the next element (will return null if there is none)\nexport function next() {\n  return this.siblings()[this.position() + 1]\n}\n\n// Get the next element (will return null if there is none)\nexport function prev() {\n  return this.siblings()[this.position() - 1]\n}\n\n// Send given element one step forward\nexport function forward() {\n  const i = this.position()\n  const p = this.parent()\n\n  // move node one step forward\n  p.add(this.remove(), i + 1)\n\n  return this\n}\n\n// Send given element one step backward\nexport function backward() {\n  const i = this.position()\n  const p = this.parent()\n\n  p.add(this.remove(), i ? i - 1 : 0)\n\n  return this\n}\n\n// Send given element all the way to the front\nexport function front() {\n  const p = this.parent()\n\n  // Move node forward\n  p.add(this.remove())\n\n  return this\n}\n\n// Send given element all the way to the back\nexport function back() {\n  const p = this.parent()\n\n  // Move node back\n  p.add(this.remove(), 0)\n\n  return this\n}\n\n// Inserts a given element before the targeted element\nexport function before(element) {\n  element = makeInstance(element)\n  element.remove()\n\n  const i = this.position()\n\n  this.parent().add(element, i)\n\n  return this\n}\n\n// Inserts a given element after the targeted element\nexport function after(element) {\n  element = makeInstance(element)\n  element.remove()\n\n  const i = this.position()\n\n  this.parent().add(element, i + 1)\n\n  return this\n}\n\nexport function insertBefore(element) {\n  element = makeInstance(element)\n  element.before(this)\n  return this\n}\n\nexport function insertAfter(element) {\n  element = makeInstance(element)\n  element.after(this)\n  return this\n}\n\nregisterMethods('Dom', {\n  siblings,\n  position,\n  next,\n  prev,\n  forward,\n  backward,\n  front,\n  back,\n  before,\n  after,\n  insertBefore,\n  insertAfter\n})\n","// Parse unit value\nexport const numberAndUnit =\n  /^([+-]?(\\d+(\\.\\d*)?|\\.\\d+)(e[+-]?\\d+)?)([a-z%]*)$/i\n\n// Parse hex value\nexport const hex = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i\n\n// Parse rgb value\nexport const rgb = /rgb\\((\\d+),(\\d+),(\\d+)\\)/\n\n// Parse reference id\nexport const reference = /(#[a-z_][a-z0-9\\-_]*)/i\n\n// splits a transformation chain\nexport const transforms = /\\)\\s*,?\\s*/\n\n// Whitespace\nexport const whitespace = /\\s/g\n\n// Test hex value\nexport const isHex = /^#[a-f0-9]{3}$|^#[a-f0-9]{6}$/i\n\n// Test rgb value\nexport const isRgb = /^rgb\\(/\n\n// Test for blank string\nexport const isBlank = /^(\\s+)?$/\n\n// Test for numeric string\nexport const isNumber = /^[+-]?(\\d+(\\.\\d*)?|\\.\\d+)(e[+-]?\\d+)?$/i\n\n// Test for image url\nexport const isImage = /\\.(jpg|jpeg|png|gif|svg)(\\?[^=]+.*)?/i\n\n// split at whitespace and comma\nexport const delimiter = /[\\s,]+/\n\n// Test for path letter\nexport const isPathLetter = /[MLHVCSQTAZ]/i\n","import { delimiter } from '../core/regex.js'\nimport { registerMethods } from '../../utils/methods.js'\n\n// Return array of classes on the node\nexport function classes() {\n  const attr = this.attr('class')\n  return attr == null ? [] : attr.trim().split(delimiter)\n}\n\n// Return true if class exists on the node, false otherwise\nexport function hasClass(name) {\n  return this.classes().indexOf(name) !== -1\n}\n\n// Add class to the node\nexport function addClass(name) {\n  if (!this.hasClass(name)) {\n    const array = this.classes()\n    array.push(name)\n    this.attr('class', array.join(' '))\n  }\n\n  return this\n}\n\n// Remove class from the node\nexport function removeClass(name) {\n  if (this.hasClass(name)) {\n    this.attr(\n      'class',\n      this.classes()\n        .filter(function (c) {\n          return c !== name\n        })\n        .join(' ')\n    )\n  }\n\n  return this\n}\n\n// Toggle the presence of a class on the node\nexport function toggleClass(name) {\n  return this.hasClass(name) ? this.removeClass(name) : this.addClass(name)\n}\n\nregisterMethods('Dom', {\n  classes,\n  hasClass,\n  addClass,\n  removeClass,\n  toggleClass\n})\n","import { isBlank } from '../core/regex.js'\nimport { registerMethods } from '../../utils/methods.js'\n\n// Dynamic style generator\nexport function css(style, val) {\n  const ret = {}\n  if (arguments.length === 0) {\n    // get full style as object\n    this.node.style.cssText\n      .split(/\\s*;\\s*/)\n      .filter(function (el) {\n        return !!el.length\n      })\n      .forEach(function (el) {\n        const t = el.split(/\\s*:\\s*/)\n        ret[t[0]] = t[1]\n      })\n    return ret\n  }\n\n  if (arguments.length < 2) {\n    // get style properties as array\n    if (Array.isArray(style)) {\n      for (const name of style) {\n        const cased = name\n        ret[name] = this.node.style.getPropertyValue(cased)\n      }\n      return ret\n    }\n\n    // get style for property\n    if (typeof style === 'string') {\n      return this.node.style.getPropertyValue(style)\n    }\n\n    // set styles in object\n    if (typeof style === 'object') {\n      for (const name in style) {\n        // set empty string if null/undefined/'' was given\n        this.node.style.setProperty(\n          name,\n          style[name] == null || isBlank.test(style[name]) ? '' : style[name]\n        )\n      }\n    }\n  }\n\n  // set style for property\n  if (arguments.length === 2) {\n    this.node.style.setProperty(\n      style,\n      val == null || isBlank.test(val) ? '' : val\n    )\n  }\n\n  return this\n}\n\n// Show element\nexport function show() {\n  return this.css('display', '')\n}\n\n// Hide element\nexport function hide() {\n  return this.css('display', 'none')\n}\n\n// Is element visible?\nexport function visible() {\n  return this.css('display') !== 'none'\n}\n\nregisterMethods('Dom', {\n  css,\n  show,\n  hide,\n  visible\n})\n","import { registerMethods } from '../../utils/methods.js'\nimport { filter, map } from '../../utils/utils.js'\n\n// Store data values on svg nodes\nexport function data(a, v, r) {\n  if (a == null) {\n    // get an object of attributes\n    return this.data(\n      map(\n        filter(\n          this.node.attributes,\n          (el) => el.nodeName.indexOf('data-') === 0\n        ),\n        (el) => el.nodeName.slice(5)\n      )\n    )\n  } else if (a instanceof Array) {\n    const data = {}\n    for (const key of a) {\n      data[key] = this.data(key)\n    }\n    return data\n  } else if (typeof a === 'object') {\n    for (v in a) {\n      this.data(v, a[v])\n    }\n  } else if (arguments.length < 2) {\n    try {\n      return JSON.parse(this.attr('data-' + a))\n    } catch (e) {\n      return this.attr('data-' + a)\n    }\n  } else {\n    this.attr(\n      'data-' + a,\n      v === null\n        ? null\n        : r === true || typeof v === 'string' || typeof v === 'number'\n          ? v\n          : JSON.stringify(v)\n    )\n  }\n\n  return this\n}\n\nregisterMethods('Dom', { data })\n","import { registerMethods } from '../../utils/methods.js'\n\n// Remember arbitrary data\nexport function remember(k, v) {\n  // remember every item in an object individually\n  if (typeof arguments[0] === 'object') {\n    for (const key in k) {\n      this.remember(key, k[key])\n    }\n  } else if (arguments.length === 1) {\n    // retrieve memory\n    return this.memory()[k]\n  } else {\n    // store memory\n    this.memory()[k] = v\n  }\n\n  return this\n}\n\n// Erase a given memory\nexport function forget() {\n  if (arguments.length === 0) {\n    this._memory = {}\n  } else {\n    for (let i = arguments.length - 1; i >= 0; i--) {\n      delete this.memory()[arguments[i]]\n    }\n  }\n  return this\n}\n\n// This triggers creation of a new hidden class which is not performant\n// However, this function is not rarely used so it will not happen frequently\n// Return local memory object\nexport function memory() {\n  return (this._memory = this._memory || {})\n}\n\nregisterMethods('Dom', { remember, forget, memory })\n","import { hex, isHex, isRgb, rgb, whitespace } from '../modules/core/regex.js'\n\nfunction sixDigitHex(hex) {\n  return hex.length === 4\n    ? [\n        '#',\n        hex.substring(1, 2),\n        hex.substring(1, 2),\n        hex.substring(2, 3),\n        hex.substring(2, 3),\n        hex.substring(3, 4),\n        hex.substring(3, 4)\n      ].join('')\n    : hex\n}\n\nfunction componentHex(component) {\n  const integer = Math.round(component)\n  const bounded = Math.max(0, Math.min(255, integer))\n  const hex = bounded.toString(16)\n  return hex.length === 1 ? '0' + hex : hex\n}\n\nfunction is(object, space) {\n  for (let i = space.length; i--; ) {\n    if (object[space[i]] == null) {\n      return false\n    }\n  }\n  return true\n}\n\nfunction getParameters(a, b) {\n  const params = is(a, 'rgb')\n    ? { _a: a.r, _b: a.g, _c: a.b, _d: 0, space: 'rgb' }\n    : is(a, 'xyz')\n      ? { _a: a.x, _b: a.y, _c: a.z, _d: 0, space: 'xyz' }\n      : is(a, 'hsl')\n        ? { _a: a.h, _b: a.s, _c: a.l, _d: 0, space: 'hsl' }\n        : is(a, 'lab')\n          ? { _a: a.l, _b: a.a, _c: a.b, _d: 0, space: 'lab' }\n          : is(a, 'lch')\n            ? { _a: a.l, _b: a.c, _c: a.h, _d: 0, space: 'lch' }\n            : is(a, 'cmyk')\n              ? { _a: a.c, _b: a.m, _c: a.y, _d: a.k, space: 'cmyk' }\n              : { _a: 0, _b: 0, _c: 0, space: 'rgb' }\n\n  params.space = b || params.space\n  return params\n}\n\nfunction cieSpace(space) {\n  if (space === 'lab' || space === 'xyz' || space === 'lch') {\n    return true\n  } else {\n    return false\n  }\n}\n\nfunction hueToRgb(p, q, t) {\n  if (t < 0) t += 1\n  if (t > 1) t -= 1\n  if (t < 1 / 6) return p + (q - p) * 6 * t\n  if (t < 1 / 2) return q\n  if (t < 2 / 3) return p + (q - p) * (2 / 3 - t) * 6\n  return p\n}\n\nexport default class Color {\n  constructor(...inputs) {\n    this.init(...inputs)\n  }\n\n  // Test if given value is a color\n  static isColor(color) {\n    return (\n      color && (color instanceof Color || this.isRgb(color) || this.test(color))\n    )\n  }\n\n  // Test if given value is an rgb object\n  static isRgb(color) {\n    return (\n      color &&\n      typeof color.r === 'number' &&\n      typeof color.g === 'number' &&\n      typeof color.b === 'number'\n    )\n  }\n\n  /*\n  Generating random colors\n  */\n  static random(mode = 'vibrant', t) {\n    // Get the math modules\n    const { random, round, sin, PI: pi } = Math\n\n    // Run the correct generator\n    if (mode === 'vibrant') {\n      const l = (81 - 57) * random() + 57\n      const c = (83 - 45) * random() + 45\n      const h = 360 * random()\n      const color = new Color(l, c, h, 'lch')\n      return color\n    } else if (mode === 'sine') {\n      t = t == null ? random() : t\n      const r = round(80 * sin((2 * pi * t) / 0.5 + 0.01) + 150)\n      const g = round(50 * sin((2 * pi * t) / 0.5 + 4.6) + 200)\n      const b = round(100 * sin((2 * pi * t) / 0.5 + 2.3) + 150)\n      const color = new Color(r, g, b)\n      return color\n    } else if (mode === 'pastel') {\n      const l = (94 - 86) * random() + 86\n      const c = (26 - 9) * random() + 9\n      const h = 360 * random()\n      const color = new Color(l, c, h, 'lch')\n      return color\n    } else if (mode === 'dark') {\n      const l = 10 + 10 * random()\n      const c = (125 - 75) * random() + 86\n      const h = 360 * random()\n      const color = new Color(l, c, h, 'lch')\n      return color\n    } else if (mode === 'rgb') {\n      const r = 255 * random()\n      const g = 255 * random()\n      const b = 255 * random()\n      const color = new Color(r, g, b)\n      return color\n    } else if (mode === 'lab') {\n      const l = 100 * random()\n      const a = 256 * random() - 128\n      const b = 256 * random() - 128\n      const color = new Color(l, a, b, 'lab')\n      return color\n    } else if (mode === 'grey') {\n      const grey = 255 * random()\n      const color = new Color(grey, grey, grey)\n      return color\n    } else {\n      throw new Error('Unsupported random color mode')\n    }\n  }\n\n  // Test if given value is a color string\n  static test(color) {\n    return typeof color === 'string' && (isHex.test(color) || isRgb.test(color))\n  }\n\n  cmyk() {\n    // Get the rgb values for the current color\n    const { _a, _b, _c } = this.rgb()\n    const [r, g, b] = [_a, _b, _c].map((v) => v / 255)\n\n    // Get the cmyk values in an unbounded format\n    const k = Math.min(1 - r, 1 - g, 1 - b)\n\n    if (k === 1) {\n      // Catch the black case\n      return new Color(0, 0, 0, 1, 'cmyk')\n    }\n\n    const c = (1 - r - k) / (1 - k)\n    const m = (1 - g - k) / (1 - k)\n    const y = (1 - b - k) / (1 - k)\n\n    // Construct the new color\n    const color = new Color(c, m, y, k, 'cmyk')\n    return color\n  }\n\n  hsl() {\n    // Get the rgb values\n    const { _a, _b, _c } = this.rgb()\n    const [r, g, b] = [_a, _b, _c].map((v) => v / 255)\n\n    // Find the maximum and minimum values to get the lightness\n    const max = Math.max(r, g, b)\n    const min = Math.min(r, g, b)\n    const l = (max + min) / 2\n\n    // If the r, g, v values are identical then we are grey\n    const isGrey = max === min\n\n    // Calculate the hue and saturation\n    const delta = max - min\n    const s = isGrey\n      ? 0\n      : l > 0.5\n        ? delta / (2 - max - min)\n        : delta / (max + min)\n    const h = isGrey\n      ? 0\n      : max === r\n        ? ((g - b) / delta + (g < b ? 6 : 0)) / 6\n        : max === g\n          ? ((b - r) / delta + 2) / 6\n          : max === b\n            ? ((r - g) / delta + 4) / 6\n            : 0\n\n    // Construct and return the new color\n    const color = new Color(360 * h, 100 * s, 100 * l, 'hsl')\n    return color\n  }\n\n  init(a = 0, b = 0, c = 0, d = 0, space = 'rgb') {\n    // This catches the case when a falsy value is passed like ''\n    a = !a ? 0 : a\n\n    // Reset all values in case the init function is rerun with new color space\n    if (this.space) {\n      for (const component in this.space) {\n        delete this[this.space[component]]\n      }\n    }\n\n    if (typeof a === 'number') {\n      // Allow for the case that we don't need d...\n      space = typeof d === 'string' ? d : space\n      d = typeof d === 'string' ? 0 : d\n\n      // Assign the values straight to the color\n      Object.assign(this, { _a: a, _b: b, _c: c, _d: d, space })\n      // If the user gave us an array, make the color from it\n    } else if (a instanceof Array) {\n      this.space = b || (typeof a[3] === 'string' ? a[3] : a[4]) || 'rgb'\n      Object.assign(this, { _a: a[0], _b: a[1], _c: a[2], _d: a[3] || 0 })\n    } else if (a instanceof Object) {\n      // Set the object up and assign its values directly\n      const values = getParameters(a, b)\n      Object.assign(this, values)\n    } else if (typeof a === 'string') {\n      if (isRgb.test(a)) {\n        const noWhitespace = a.replace(whitespace, '')\n        const [_a, _b, _c] = rgb\n          .exec(noWhitespace)\n          .slice(1, 4)\n          .map((v) => parseInt(v))\n        Object.assign(this, { _a, _b, _c, _d: 0, space: 'rgb' })\n      } else if (isHex.test(a)) {\n        const hexParse = (v) => parseInt(v, 16)\n        const [, _a, _b, _c] = hex.exec(sixDigitHex(a)).map(hexParse)\n        Object.assign(this, { _a, _b, _c, _d: 0, space: 'rgb' })\n      } else throw Error(\"Unsupported string format, can't construct Color\")\n    }\n\n    // Now add the components as a convenience\n    const { _a, _b, _c, _d } = this\n    const components =\n      this.space === 'rgb'\n        ? { r: _a, g: _b, b: _c }\n        : this.space === 'xyz'\n          ? { x: _a, y: _b, z: _c }\n          : this.space === 'hsl'\n            ? { h: _a, s: _b, l: _c }\n            : this.space === 'lab'\n              ? { l: _a, a: _b, b: _c }\n              : this.space === 'lch'\n                ? { l: _a, c: _b, h: _c }\n                : this.space === 'cmyk'\n                  ? { c: _a, m: _b, y: _c, k: _d }\n                  : {}\n    Object.assign(this, components)\n  }\n\n  lab() {\n    // Get the xyz color\n    const { x, y, z } = this.xyz()\n\n    // Get the lab components\n    const l = 116 * y - 16\n    const a = 500 * (x - y)\n    const b = 200 * (y - z)\n\n    // Construct and return a new color\n    const color = new Color(l, a, b, 'lab')\n    return color\n  }\n\n  lch() {\n    // Get the lab color directly\n    const { l, a, b } = this.lab()\n\n    // Get the chromaticity and the hue using polar coordinates\n    const c = Math.sqrt(a ** 2 + b ** 2)\n    let h = (180 * Math.atan2(b, a)) / Math.PI\n    if (h < 0) {\n      h *= -1\n      h = 360 - h\n    }\n\n    // Make a new color and return it\n    const color = new Color(l, c, h, 'lch')\n    return color\n  }\n  /*\n  Conversion Methods\n  */\n\n  rgb() {\n    if (this.space === 'rgb') {\n      return this\n    } else if (cieSpace(this.space)) {\n      // Convert to the xyz color space\n      let { x, y, z } = this\n      if (this.space === 'lab' || this.space === 'lch') {\n        // Get the values in the lab space\n        let { l, a, b } = this\n        if (this.space === 'lch') {\n          const { c, h } = this\n          const dToR = Math.PI / 180\n          a = c * Math.cos(dToR * h)\n          b = c * Math.sin(dToR * h)\n        }\n\n        // Undo the nonlinear function\n        const yL = (l + 16) / 116\n        const xL = a / 500 + yL\n        const zL = yL - b / 200\n\n        // Get the xyz values\n        const ct = 16 / 116\n        const mx = 0.008856\n        const nm = 7.787\n        x = 0.95047 * (xL ** 3 > mx ? xL ** 3 : (xL - ct) / nm)\n        y = 1.0 * (yL ** 3 > mx ? yL ** 3 : (yL - ct) / nm)\n        z = 1.08883 * (zL ** 3 > mx ? zL ** 3 : (zL - ct) / nm)\n      }\n\n      // Convert xyz to unbounded rgb values\n      const rU = x * 3.2406 + y * -1.5372 + z * -0.4986\n      const gU = x * -0.9689 + y * 1.8758 + z * 0.0415\n      const bU = x * 0.0557 + y * -0.204 + z * 1.057\n\n      // Convert the values to true rgb values\n      const pow = Math.pow\n      const bd = 0.0031308\n      const r = rU > bd ? 1.055 * pow(rU, 1 / 2.4) - 0.055 : 12.92 * rU\n      const g = gU > bd ? 1.055 * pow(gU, 1 / 2.4) - 0.055 : 12.92 * gU\n      const b = bU > bd ? 1.055 * pow(bU, 1 / 2.4) - 0.055 : 12.92 * bU\n\n      // Make and return the color\n      const color = new Color(255 * r, 255 * g, 255 * b)\n      return color\n    } else if (this.space === 'hsl') {\n      // https://bgrins.github.io/TinyColor/docs/tinycolor.html\n      // Get the current hsl values\n      let { h, s, l } = this\n      h /= 360\n      s /= 100\n      l /= 100\n\n      // If we are grey, then just make the color directly\n      if (s === 0) {\n        l *= 255\n        const color = new Color(l, l, l)\n        return color\n      }\n\n      // TODO I have no idea what this does :D If you figure it out, tell me!\n      const q = l < 0.5 ? l * (1 + s) : l + s - l * s\n      const p = 2 * l - q\n\n      // Get the rgb values\n      const r = 255 * hueToRgb(p, q, h + 1 / 3)\n      const g = 255 * hueToRgb(p, q, h)\n      const b = 255 * hueToRgb(p, q, h - 1 / 3)\n\n      // Make a new color\n      const color = new Color(r, g, b)\n      return color\n    } else if (this.space === 'cmyk') {\n      // https://gist.github.com/felipesabino/5066336\n      // Get the normalised cmyk values\n      const { c, m, y, k } = this\n\n      // Get the rgb values\n      const r = 255 * (1 - Math.min(1, c * (1 - k) + k))\n      const g = 255 * (1 - Math.min(1, m * (1 - k) + k))\n      const b = 255 * (1 - Math.min(1, y * (1 - k) + k))\n\n      // Form the color and return it\n      const color = new Color(r, g, b)\n      return color\n    } else {\n      return this\n    }\n  }\n\n  toArray() {\n    const { _a, _b, _c, _d, space } = this\n    return [_a, _b, _c, _d, space]\n  }\n\n  toHex() {\n    const [r, g, b] = this._clamped().map(componentHex)\n    return `#${r}${g}${b}`\n  }\n\n  toRgb() {\n    const [rV, gV, bV] = this._clamped()\n    const string = `rgb(${rV},${gV},${bV})`\n    return string\n  }\n\n  toString() {\n    return this.toHex()\n  }\n\n  xyz() {\n    // Normalise the red, green and blue values\n    const { _a: r255, _b: g255, _c: b255 } = this.rgb()\n    const [r, g, b] = [r255, g255, b255].map((v) => v / 255)\n\n    // Convert to the lab rgb space\n    const rL = r > 0.04045 ? Math.pow((r + 0.055) / 1.055, 2.4) : r / 12.92\n    const gL = g > 0.04045 ? Math.pow((g + 0.055) / 1.055, 2.4) : g / 12.92\n    const bL = b > 0.04045 ? Math.pow((b + 0.055) / 1.055, 2.4) : b / 12.92\n\n    // Convert to the xyz color space without bounding the values\n    const xU = (rL * 0.4124 + gL * 0.3576 + bL * 0.1805) / 0.95047\n    const yU = (rL * 0.2126 + gL * 0.7152 + bL * 0.0722) / 1.0\n    const zU = (rL * 0.0193 + gL * 0.1192 + bL * 0.9505) / 1.08883\n\n    // Get the proper xyz values by applying the bounding\n    const x = xU > 0.008856 ? Math.pow(xU, 1 / 3) : 7.787 * xU + 16 / 116\n    const y = yU > 0.008856 ? Math.pow(yU, 1 / 3) : 7.787 * yU + 16 / 116\n    const z = zU > 0.008856 ? Math.pow(zU, 1 / 3) : 7.787 * zU + 16 / 116\n\n    // Make and return the color\n    const color = new Color(x, y, z, 'xyz')\n    return color\n  }\n\n  /*\n  Input and Output methods\n  */\n\n  _clamped() {\n    const { _a, _b, _c } = this.rgb()\n    const { max, min, round } = Math\n    const format = (v) => max(0, min(round(v), 255))\n    return [_a, _b, _c].map(format)\n  }\n\n  /*\n  Constructing colors\n  */\n}\n","import Matrix from './Matrix.js'\n\nexport default class Point {\n  // Initialize\n  constructor(...args) {\n    this.init(...args)\n  }\n\n  // Clone point\n  clone() {\n    return new Point(this)\n  }\n\n  init(x, y) {\n    const base = { x: 0, y: 0 }\n\n    // ensure source as object\n    const source = Array.isArray(x)\n      ? { x: x[0], y: x[1] }\n      : typeof x === 'object'\n        ? { x: x.x, y: x.y }\n        : { x: x, y: y }\n\n    // merge source\n    this.x = source.x == null ? base.x : source.x\n    this.y = source.y == null ? base.y : source.y\n\n    return this\n  }\n\n  toArray() {\n    return [this.x, this.y]\n  }\n\n  transform(m) {\n    return this.clone().transformO(m)\n  }\n\n  // Transform point with matrix\n  transformO(m) {\n    if (!Matrix.isMatrixLike(m)) {\n      m = new Matrix(m)\n    }\n\n    const { x, y } = this\n\n    // Perform the matrix multiplication\n    this.x = m.a * x + m.c * y + m.e\n    this.y = m.b * x + m.d * y + m.f\n\n    return this\n  }\n}\n\nexport function point(x, y) {\n  return new Point(x, y).transformO(this.screenCTM().inverseO())\n}\n","import { delimiter } from '../modules/core/regex.js'\nimport { radians } from '../utils/utils.js'\nimport { register } from '../utils/adopter.js'\nimport Element from '../elements/Element.js'\nimport Point from './Point.js'\n\nfunction closeEnough(a, b, threshold) {\n  return Math.abs(b - a) < (threshold || 1e-6)\n}\n\nexport default class Matrix {\n  constructor(...args) {\n    this.init(...args)\n  }\n\n  static formatTransforms(o) {\n    // Get all of the parameters required to form the matrix\n    const flipBoth = o.flip === 'both' || o.flip === true\n    const flipX = o.flip && (flipBoth || o.flip === 'x') ? -1 : 1\n    const flipY = o.flip && (flipBoth || o.flip === 'y') ? -1 : 1\n    const skewX =\n      o.skew && o.skew.length\n        ? o.skew[0]\n        : isFinite(o.skew)\n          ? o.skew\n          : isFinite(o.skewX)\n            ? o.skewX\n            : 0\n    const skewY =\n      o.skew && o.skew.length\n        ? o.skew[1]\n        : isFinite(o.skew)\n          ? o.skew\n          : isFinite(o.skewY)\n            ? o.skewY\n            : 0\n    const scaleX =\n      o.scale && o.scale.length\n        ? o.scale[0] * flipX\n        : isFinite(o.scale)\n          ? o.scale * flipX\n          : isFinite(o.scaleX)\n            ? o.scaleX * flipX\n            : flipX\n    const scaleY =\n      o.scale && o.scale.length\n        ? o.scale[1] * flipY\n        : isFinite(o.scale)\n          ? o.scale * flipY\n          : isFinite(o.scaleY)\n            ? o.scaleY * flipY\n            : flipY\n    const shear = o.shear || 0\n    const theta = o.rotate || o.theta || 0\n    const origin = new Point(\n      o.origin || o.around || o.ox || o.originX,\n      o.oy || o.originY\n    )\n    const ox = origin.x\n    const oy = origin.y\n    // We need Point to be invalid if nothing was passed because we cannot default to 0 here. That is why NaN\n    const position = new Point(\n      o.position || o.px || o.positionX || NaN,\n      o.py || o.positionY || NaN\n    )\n    const px = position.x\n    const py = position.y\n    const translate = new Point(\n      o.translate || o.tx || o.translateX,\n      o.ty || o.translateY\n    )\n    const tx = translate.x\n    const ty = translate.y\n    const relative = new Point(\n      o.relative || o.rx || o.relativeX,\n      o.ry || o.relativeY\n    )\n    const rx = relative.x\n    const ry = relative.y\n\n    // Populate all of the values\n    return {\n      scaleX,\n      scaleY,\n      skewX,\n      skewY,\n      shear,\n      theta,\n      rx,\n      ry,\n      tx,\n      ty,\n      ox,\n      oy,\n      px,\n      py\n    }\n  }\n\n  static fromArray(a) {\n    return { a: a[0], b: a[1], c: a[2], d: a[3], e: a[4], f: a[5] }\n  }\n\n  static isMatrixLike(o) {\n    return (\n      o.a != null ||\n      o.b != null ||\n      o.c != null ||\n      o.d != null ||\n      o.e != null ||\n      o.f != null\n    )\n  }\n\n  // left matrix, right matrix, target matrix which is overwritten\n  static matrixMultiply(l, r, o) {\n    // Work out the product directly\n    const a = l.a * r.a + l.c * r.b\n    const b = l.b * r.a + l.d * r.b\n    const c = l.a * r.c + l.c * r.d\n    const d = l.b * r.c + l.d * r.d\n    const e = l.e + l.a * r.e + l.c * r.f\n    const f = l.f + l.b * r.e + l.d * r.f\n\n    // make sure to use local variables because l/r and o could be the same\n    o.a = a\n    o.b = b\n    o.c = c\n    o.d = d\n    o.e = e\n    o.f = f\n\n    return o\n  }\n\n  around(cx, cy, matrix) {\n    return this.clone().aroundO(cx, cy, matrix)\n  }\n\n  // Transform around a center point\n  aroundO(cx, cy, matrix) {\n    const dx = cx || 0\n    const dy = cy || 0\n    return this.translateO(-dx, -dy).lmultiplyO(matrix).translateO(dx, dy)\n  }\n\n  // Clones this matrix\n  clone() {\n    return new Matrix(this)\n  }\n\n  // Decomposes this matrix into its affine parameters\n  decompose(cx = 0, cy = 0) {\n    // Get the parameters from the matrix\n    const a = this.a\n    const b = this.b\n    const c = this.c\n    const d = this.d\n    const e = this.e\n    const f = this.f\n\n    // Figure out if the winding direction is clockwise or counterclockwise\n    const determinant = a * d - b * c\n    const ccw = determinant > 0 ? 1 : -1\n\n    // Since we only shear in x, we can use the x basis to get the x scale\n    // and the rotation of the resulting matrix\n    const sx = ccw * Math.sqrt(a * a + b * b)\n    const thetaRad = Math.atan2(ccw * b, ccw * a)\n    const theta = (180 / Math.PI) * thetaRad\n    const ct = Math.cos(thetaRad)\n    const st = Math.sin(thetaRad)\n\n    // We can then solve the y basis vector simultaneously to get the other\n    // two affine parameters directly from these parameters\n    const lam = (a * c + b * d) / determinant\n    const sy = (c * sx) / (lam * a - b) || (d * sx) / (lam * b + a)\n\n    // Use the translations\n    const tx = e - cx + cx * ct * sx + cy * (lam * ct * sx - st * sy)\n    const ty = f - cy + cx * st * sx + cy * (lam * st * sx + ct * sy)\n\n    // Construct the decomposition and return it\n    return {\n      // Return the affine parameters\n      scaleX: sx,\n      scaleY: sy,\n      shear: lam,\n      rotate: theta,\n      translateX: tx,\n      translateY: ty,\n      originX: cx,\n      originY: cy,\n\n      // Return the matrix parameters\n      a: this.a,\n      b: this.b,\n      c: this.c,\n      d: this.d,\n      e: this.e,\n      f: this.f\n    }\n  }\n\n  // Check if two matrices are equal\n  equals(other) {\n    if (other === this) return true\n    const comp = new Matrix(other)\n    return (\n      closeEnough(this.a, comp.a) &&\n      closeEnough(this.b, comp.b) &&\n      closeEnough(this.c, comp.c) &&\n      closeEnough(this.d, comp.d) &&\n      closeEnough(this.e, comp.e) &&\n      closeEnough(this.f, comp.f)\n    )\n  }\n\n  // Flip matrix on x or y, at a given offset\n  flip(axis, around) {\n    return this.clone().flipO(axis, around)\n  }\n\n  flipO(axis, around) {\n    return axis === 'x'\n      ? this.scaleO(-1, 1, around, 0)\n      : axis === 'y'\n        ? this.scaleO(1, -1, 0, around)\n        : this.scaleO(-1, -1, axis, around || axis) // Define an x, y flip point\n  }\n\n  // Initialize\n  init(source) {\n    const base = Matrix.fromArray([1, 0, 0, 1, 0, 0])\n\n    // ensure source as object\n    source =\n      source instanceof Element\n        ? source.matrixify()\n        : typeof source === 'string'\n          ? Matrix.fromArray(source.split(delimiter).map(parseFloat))\n          : Array.isArray(source)\n            ? Matrix.fromArray(source)\n            : typeof source === 'object' && Matrix.isMatrixLike(source)\n              ? source\n              : typeof source === 'object'\n                ? new Matrix().transform(source)\n                : arguments.length === 6\n                  ? Matrix.fromArray([].slice.call(arguments))\n                  : base\n\n    // Merge the source matrix with the base matrix\n    this.a = source.a != null ? source.a : base.a\n    this.b = source.b != null ? source.b : base.b\n    this.c = source.c != null ? source.c : base.c\n    this.d = source.d != null ? source.d : base.d\n    this.e = source.e != null ? source.e : base.e\n    this.f = source.f != null ? source.f : base.f\n\n    return this\n  }\n\n  inverse() {\n    return this.clone().inverseO()\n  }\n\n  // Inverses matrix\n  inverseO() {\n    // Get the current parameters out of the matrix\n    const a = this.a\n    const b = this.b\n    const c = this.c\n    const d = this.d\n    const e = this.e\n    const f = this.f\n\n    // Invert the 2x2 matrix in the top left\n    const det = a * d - b * c\n    if (!det) throw new Error('Cannot invert ' + this)\n\n    // Calculate the top 2x2 matrix\n    const na = d / det\n    const nb = -b / det\n    const nc = -c / det\n    const nd = a / det\n\n    // Apply the inverted matrix to the top right\n    const ne = -(na * e + nc * f)\n    const nf = -(nb * e + nd * f)\n\n    // Construct the inverted matrix\n    this.a = na\n    this.b = nb\n    this.c = nc\n    this.d = nd\n    this.e = ne\n    this.f = nf\n\n    return this\n  }\n\n  lmultiply(matrix) {\n    return this.clone().lmultiplyO(matrix)\n  }\n\n  lmultiplyO(matrix) {\n    const r = this\n    const l = matrix instanceof Matrix ? matrix : new Matrix(matrix)\n\n    return Matrix.matrixMultiply(l, r, this)\n  }\n\n  // Left multiplies by the given matrix\n  multiply(matrix) {\n    return this.clone().multiplyO(matrix)\n  }\n\n  multiplyO(matrix) {\n    // Get the matrices\n    const l = this\n    const r = matrix instanceof Matrix ? matrix : new Matrix(matrix)\n\n    return Matrix.matrixMultiply(l, r, this)\n  }\n\n  // Rotate matrix\n  rotate(r, cx, cy) {\n    return this.clone().rotateO(r, cx, cy)\n  }\n\n  rotateO(r, cx = 0, cy = 0) {\n    // Convert degrees to radians\n    r = radians(r)\n\n    const cos = Math.cos(r)\n    const sin = Math.sin(r)\n\n    const { a, b, c, d, e, f } = this\n\n    this.a = a * cos - b * sin\n    this.b = b * cos + a * sin\n    this.c = c * cos - d * sin\n    this.d = d * cos + c * sin\n    this.e = e * cos - f * sin + cy * sin - cx * cos + cx\n    this.f = f * cos + e * sin - cx * sin - cy * cos + cy\n\n    return this\n  }\n\n  // Scale matrix\n  scale() {\n    return this.clone().scaleO(...arguments)\n  }\n\n  scaleO(x, y = x, cx = 0, cy = 0) {\n    // Support uniform scaling\n    if (arguments.length === 3) {\n      cy = cx\n      cx = y\n      y = x\n    }\n\n    const { a, b, c, d, e, f } = this\n\n    this.a = a * x\n    this.b = b * y\n    this.c = c * x\n    this.d = d * y\n    this.e = e * x - cx * x + cx\n    this.f = f * y - cy * y + cy\n\n    return this\n  }\n\n  // Shear matrix\n  shear(a, cx, cy) {\n    return this.clone().shearO(a, cx, cy)\n  }\n\n  // eslint-disable-next-line no-unused-vars\n  shearO(lx, cx = 0, cy = 0) {\n    const { a, b, c, d, e, f } = this\n\n    this.a = a + b * lx\n    this.c = c + d * lx\n    this.e = e + f * lx - cy * lx\n\n    return this\n  }\n\n  // Skew Matrix\n  skew() {\n    return this.clone().skewO(...arguments)\n  }\n\n  skewO(x, y = x, cx = 0, cy = 0) {\n    // support uniformal skew\n    if (arguments.length === 3) {\n      cy = cx\n      cx = y\n      y = x\n    }\n\n    // Convert degrees to radians\n    x = radians(x)\n    y = radians(y)\n\n    const lx = Math.tan(x)\n    const ly = Math.tan(y)\n\n    const { a, b, c, d, e, f } = this\n\n    this.a = a + b * lx\n    this.b = b + a * ly\n    this.c = c + d * lx\n    this.d = d + c * ly\n    this.e = e + f * lx - cy * lx\n    this.f = f + e * ly - cx * ly\n\n    return this\n  }\n\n  // SkewX\n  skewX(x, cx, cy) {\n    return this.skew(x, 0, cx, cy)\n  }\n\n  // SkewY\n  skewY(y, cx, cy) {\n    return this.skew(0, y, cx, cy)\n  }\n\n  toArray() {\n    return [this.a, this.b, this.c, this.d, this.e, this.f]\n  }\n\n  // Convert matrix to string\n  toString() {\n    return (\n      'matrix(' +\n      this.a +\n      ',' +\n      this.b +\n      ',' +\n      this.c +\n      ',' +\n      this.d +\n      ',' +\n      this.e +\n      ',' +\n      this.f +\n      ')'\n    )\n  }\n\n  // Transform a matrix into another matrix by manipulating the space\n  transform(o) {\n    // Check if o is a matrix and then left multiply it directly\n    if (Matrix.isMatrixLike(o)) {\n      const matrix = new Matrix(o)\n      return matrix.multiplyO(this)\n    }\n\n    // Get the proposed transformations and the current transformations\n    const t = Matrix.formatTransforms(o)\n    const current = this\n    const { x: ox, y: oy } = new Point(t.ox, t.oy).transform(current)\n\n    // Construct the resulting matrix\n    const transformer = new Matrix()\n      .translateO(t.rx, t.ry)\n      .lmultiplyO(current)\n      .translateO(-ox, -oy)\n      .scaleO(t.scaleX, t.scaleY)\n      .skewO(t.skewX, t.skewY)\n      .shearO(t.shear)\n      .rotateO(t.theta)\n      .translateO(ox, oy)\n\n    // If we want the origin at a particular place, we force it there\n    if (isFinite(t.px) || isFinite(t.py)) {\n      const origin = new Point(ox, oy).transform(transformer)\n      // TODO: Replace t.px with isFinite(t.px)\n      // Doesn't work because t.px is also 0 if it wasn't passed\n      const dx = isFinite(t.px) ? t.px - origin.x : 0\n      const dy = isFinite(t.py) ? t.py - origin.y : 0\n      transformer.translateO(dx, dy)\n    }\n\n    // Translate now after positioning\n    transformer.translateO(t.tx, t.ty)\n    return transformer\n  }\n\n  // Translate matrix\n  translate(x, y) {\n    return this.clone().translateO(x, y)\n  }\n\n  translateO(x, y) {\n    this.e += x || 0\n    this.f += y || 0\n    return this\n  }\n\n  valueOf() {\n    return {\n      a: this.a,\n      b: this.b,\n      c: this.c,\n      d: this.d,\n      e: this.e,\n      f: this.f\n    }\n  }\n}\n\nexport function ctm() {\n  return new Matrix(this.node.getCTM())\n}\n\nexport function screenCTM() {\n  try {\n    /* https://bugzilla.mozilla.org/show_bug.cgi?id=1344537\n       This is needed because FF does not return the transformation matrix\n       for the inner coordinate system when getScreenCTM() is called on nested svgs.\n       However all other Browsers do that */\n    if (typeof this.isRoot === 'function' && !this.isRoot()) {\n      const rect = this.rect(1, 1)\n      const m = rect.node.getScreenCTM()\n      rect.remove()\n      return new Matrix(m)\n    }\n    return new Matrix(this.node.getScreenCTM())\n  } catch (e) {\n    console.warn(\n      `Cannot get CTM from SVG node ${this.node.nodeName}. Is the element rendered?`\n    )\n    return new Matrix()\n  }\n}\n\nregister(Matrix, 'Matrix')\n","import { globals } from '../../utils/window.js'\nimport { makeInstance } from '../../utils/adopter.js'\n\nexport default function parser() {\n  // Reuse cached element if possible\n  if (!parser.nodes) {\n    const svg = makeInstance().size(2, 0)\n    svg.node.style.cssText = [\n      'opacity: 0',\n      'position: absolute',\n      'left: -100%',\n      'top: -100%',\n      'overflow: hidden'\n    ].join(';')\n\n    svg.attr('focusable', 'false')\n    svg.attr('aria-hidden', 'true')\n\n    const path = svg.path().node\n\n    parser.nodes = { svg, path }\n  }\n\n  if (!parser.nodes.svg.node.parentNode) {\n    const b = globals.document.body || globals.document.documentElement\n    parser.nodes.svg.addTo(b)\n  }\n\n  return parser.nodes\n}\n","import { delimiter } from '../modules/core/regex.js'\nimport { globals } from '../utils/window.js'\nimport { register } from '../utils/adopter.js'\nimport { registerMethods } from '../utils/methods.js'\nimport Matrix from './Matrix.js'\nimport Point from './Point.js'\nimport parser from '../modules/core/parser.js'\n\nexport function isNulledBox(box) {\n  return !box.width && !box.height && !box.x && !box.y\n}\n\nexport function domContains(node) {\n  return (\n    node === globals.document ||\n    (\n      globals.document.documentElement.contains ||\n      function (node) {\n        // This is IE - it does not support contains() for top-level SVGs\n        while (node.parentNode) {\n          node = node.parentNode\n        }\n        return node === globals.document\n      }\n    ).call(globals.document.documentElement, node)\n  )\n}\n\nexport default class Box {\n  constructor(...args) {\n    this.init(...args)\n  }\n\n  addOffset() {\n    // offset by window scroll position, because getBoundingClientRect changes when window is scrolled\n    this.x += globals.window.pageXOffset\n    this.y += globals.window.pageYOffset\n    return new Box(this)\n  }\n\n  init(source) {\n    const base = [0, 0, 0, 0]\n    source =\n      typeof source === 'string'\n        ? source.split(delimiter).map(parseFloat)\n        : Array.isArray(source)\n          ? source\n          : typeof source === 'object'\n            ? [\n                source.left != null ? source.left : source.x,\n                source.top != null ? source.top : source.y,\n                source.width,\n                source.height\n              ]\n            : arguments.length === 4\n              ? [].slice.call(arguments)\n              : base\n\n    this.x = source[0] || 0\n    this.y = source[1] || 0\n    this.width = this.w = source[2] || 0\n    this.height = this.h = source[3] || 0\n\n    // Add more bounding box properties\n    this.x2 = this.x + this.w\n    this.y2 = this.y + this.h\n    this.cx = this.x + this.w / 2\n    this.cy = this.y + this.h / 2\n\n    return this\n  }\n\n  isNulled() {\n    return isNulledBox(this)\n  }\n\n  // Merge rect box with another, return a new instance\n  merge(box) {\n    const x = Math.min(this.x, box.x)\n    const y = Math.min(this.y, box.y)\n    const width = Math.max(this.x + this.width, box.x + box.width) - x\n    const height = Math.max(this.y + this.height, box.y + box.height) - y\n\n    return new Box(x, y, width, height)\n  }\n\n  toArray() {\n    return [this.x, this.y, this.width, this.height]\n  }\n\n  toString() {\n    return this.x + ' ' + this.y + ' ' + this.width + ' ' + this.height\n  }\n\n  transform(m) {\n    if (!(m instanceof Matrix)) {\n      m = new Matrix(m)\n    }\n\n    let xMin = Infinity\n    let xMax = -Infinity\n    let yMin = Infinity\n    let yMax = -Infinity\n\n    const pts = [\n      new Point(this.x, this.y),\n      new Point(this.x2, this.y),\n      new Point(this.x, this.y2),\n      new Point(this.x2, this.y2)\n    ]\n\n    pts.forEach(function (p) {\n      p = p.transform(m)\n      xMin = Math.min(xMin, p.x)\n      xMax = Math.max(xMax, p.x)\n      yMin = Math.min(yMin, p.y)\n      yMax = Math.max(yMax, p.y)\n    })\n\n    return new Box(xMin, yMin, xMax - xMin, yMax - yMin)\n  }\n}\n\nfunction getBox(el, getBBoxFn, retry) {\n  let box\n\n  try {\n    // Try to get the box with the provided function\n    box = getBBoxFn(el.node)\n\n    // If the box is worthless and not even in the dom, retry\n    // by throwing an error here...\n    if (isNulledBox(box) && !domContains(el.node)) {\n      throw new Error('Element not in the dom')\n    }\n  } catch (e) {\n    // ... and calling the retry handler here\n    box = retry(el)\n  }\n\n  return box\n}\n\nexport function bbox() {\n  // Function to get bbox is getBBox()\n  const getBBox = (node) => node.getBBox()\n\n  // Take all measures so that a stupid browser renders the element\n  // so we can get the bbox from it when we try again\n  const retry = (el) => {\n    try {\n      const clone = el.clone().addTo(parser().svg).show()\n      const box = clone.node.getBBox()\n      clone.remove()\n      return box\n    } catch (e) {\n      // We give up...\n      throw new Error(\n        `Getting bbox of element \"${\n          el.node.nodeName\n        }\" is not possible: ${e.toString()}`\n      )\n    }\n  }\n\n  const box = getBox(this, getBBox, retry)\n  const bbox = new Box(box)\n\n  return bbox\n}\n\nexport function rbox(el) {\n  const getRBox = (node) => node.getBoundingClientRect()\n  const retry = (el) => {\n    // There is no point in trying tricks here because if we insert the element into the dom ourselves\n    // it obviously will be at the wrong position\n    throw new Error(\n      `Getting rbox of element \"${el.node.nodeName}\" is not possible`\n    )\n  }\n\n  const box = getBox(this, getRBox, retry)\n  const rbox = new Box(box)\n\n  // If an element was passed, we want the bbox in the coordinate system of that element\n  if (el) {\n    return rbox.transform(el.screenCTM().inverseO())\n  }\n\n  // Else we want it in absolute screen coordinates\n  // Therefore we need to add the scrollOffset\n  return rbox.addOffset()\n}\n\n// Checks whether the given point is inside the bounding box\nexport function inside(x, y) {\n  const box = this.bbox()\n\n  return (\n    x > box.x && y > box.y && x < box.x + box.width && y < box.y + box.height\n  )\n}\n\nregisterMethods({\n  viewbox: {\n    viewbox(x, y, width, height) {\n      // act as getter\n      if (x == null) return new Box(this.attr('viewBox'))\n\n      // act as setter\n      return this.attr('viewBox', new Box(x, y, width, height))\n    },\n\n    zoom(level, point) {\n      // Its best to rely on the attributes here and here is why:\n      // clientXYZ: Doesn't work on non-root svgs because they dont have a CSSBox (silly!)\n      // getBoundingClientRect: Doesn't work because Chrome just ignores width and height of nested svgs completely\n      //                        that means, their clientRect is always as big as the content.\n      //                        Furthermore this size is incorrect if the element is further transformed by its parents\n      // computedStyle: Only returns meaningful values if css was used with px. We dont go this route here!\n      // getBBox: returns the bounding box of its content - that doesn't help!\n      let { width, height } = this.attr(['width', 'height'])\n\n      // Width and height is a string when a number with a unit is present which we can't use\n      // So we try clientXYZ\n      if (\n        (!width && !height) ||\n        typeof width === 'string' ||\n        typeof height === 'string'\n      ) {\n        width = this.node.clientWidth\n        height = this.node.clientHeight\n      }\n\n      // Giving up...\n      if (!width || !height) {\n        throw new Error(\n          'Impossible to get absolute width and height. Please provide an absolute width and height attribute on the zooming element'\n        )\n      }\n\n      const v = this.viewbox()\n\n      const zoomX = width / v.width\n      const zoomY = height / v.height\n      const zoom = Math.min(zoomX, zoomY)\n\n      if (level == null) {\n        return zoom\n      }\n\n      let zoomAmount = zoom / level\n\n      // Set the zoomAmount to the highest value which is safe to process and recover from\n      // The * 100 is a bit of wiggle room for the matrix transformation\n      if (zoomAmount === Infinity) zoomAmount = Number.MAX_SAFE_INTEGER / 100\n\n      point =\n        point || new Point(width / 2 / zoomX + v.x, height / 2 / zoomY + v.y)\n\n      const box = new Box(v).transform(\n        new Matrix({ scale: zoomAmount, origin: point })\n      )\n\n      return this.viewbox(box)\n    }\n  }\n})\n\nregister(Box, 'Box')\n","import { extend } from '../utils/adopter.js'\n// import { subClassArray } from './ArrayPolyfill.js'\n\nclass List extends Array {\n  constructor(arr = [], ...args) {\n    super(arr, ...args)\n    if (typeof arr === 'number') return this\n    this.length = 0\n    this.push(...arr)\n  }\n}\n\n/* = subClassArray('List', Array, function (arr = []) {\n  // This catches the case, that native map tries to create an array with new Array(1)\n  if (typeof arr === 'number') return this\n  this.length = 0\n  this.push(...arr)\n}) */\n\nexport default List\n\nextend([List], {\n  each(fnOrMethodName, ...args) {\n    if (typeof fnOrMethodName === 'function') {\n      return this.map((el, i, arr) => {\n        return fnOrMethodName.call(el, el, i, arr)\n      })\n    } else {\n      return this.map((el) => {\n        return el[fnOrMethodName](...args)\n      })\n    }\n  },\n\n  toArray() {\n    return Array.prototype.concat.apply([], this)\n  }\n})\n\nconst reserved = ['toArray', 'constructor', 'each']\n\nList.extend = function (methods) {\n  methods = methods.reduce((obj, name) => {\n    // Don't overwrite own methods\n    if (reserved.includes(name)) return obj\n\n    // Don't add private methods\n    if (name[0] === '_') return obj\n\n    // Allow access to original Array methods through a prefix\n    if (name in Array.prototype) {\n      obj['$' + name] = Array.prototype[name]\n    }\n\n    // Relay every call to each()\n    obj[name] = function (...attrs) {\n      return this.each(name, ...attrs)\n    }\n    return obj\n  }, {})\n\n  extend([List], methods)\n}\n","import { adopt } from '../../utils/adopter.js'\nimport { globals } from '../../utils/window.js'\nimport { map } from '../../utils/utils.js'\nimport List from '../../types/List.js'\n\nexport default function baseFind(query, parent) {\n  return new List(\n    map((parent || globals.document).querySelectorAll(query), function (node) {\n      return adopt(node)\n    })\n  )\n}\n\n// Scoped find method\nexport function find(query) {\n  return baseFind(query, this.node)\n}\n\nexport function findOne(query) {\n  return adopt(this.node.querySelector(query))\n}\n","import { delimiter } from './regex.js'\nimport { makeInstance } from '../../utils/adopter.js'\nimport { globals } from '../../utils/window.js'\n\nlet listenerId = 0\nexport const windowEvents = {}\n\nexport function getEvents(instance) {\n  let n = instance.getEventHolder()\n\n  // We dont want to save events in global space\n  if (n === globals.window) n = windowEvents\n  if (!n.events) n.events = {}\n  return n.events\n}\n\nexport function getEventTarget(instance) {\n  return instance.getEventTarget()\n}\n\nexport function clearEvents(instance) {\n  let n = instance.getEventHolder()\n  if (n === globals.window) n = windowEvents\n  if (n.events) n.events = {}\n}\n\n// Add event binder in the SVG namespace\nexport function on(node, events, listener, binding, options) {\n  const l = listener.bind(binding || node)\n  const instance = makeInstance(node)\n  const bag = getEvents(instance)\n  const n = getEventTarget(instance)\n\n  // events can be an array of events or a string of events\n  events = Array.isArray(events) ? events : events.split(delimiter)\n\n  // add id to listener\n  if (!listener._svgjsListenerId) {\n    listener._svgjsListenerId = ++listenerId\n  }\n\n  events.forEach(function (event) {\n    const ev = event.split('.')[0]\n    const ns = event.split('.')[1] || '*'\n\n    // ensure valid object\n    bag[ev] = bag[ev] || {}\n    bag[ev][ns] = bag[ev][ns] || {}\n\n    // reference listener\n    bag[ev][ns][listener._svgjsListenerId] = l\n\n    // add listener\n    n.addEventListener(ev, l, options || false)\n  })\n}\n\n// Add event unbinder in the SVG namespace\nexport function off(node, events, listener, options) {\n  const instance = makeInstance(node)\n  const bag = getEvents(instance)\n  const n = getEventTarget(instance)\n\n  // listener can be a function or a number\n  if (typeof listener === 'function') {\n    listener = listener._svgjsListenerId\n    if (!listener) return\n  }\n\n  // events can be an array of events or a string or undefined\n  events = Array.isArray(events) ? events : (events || '').split(delimiter)\n\n  events.forEach(function (event) {\n    const ev = event && event.split('.')[0]\n    const ns = event && event.split('.')[1]\n    let namespace, l\n\n    if (listener) {\n      // remove listener reference\n      if (bag[ev] && bag[ev][ns || '*']) {\n        // removeListener\n        n.removeEventListener(\n          ev,\n          bag[ev][ns || '*'][listener],\n          options || false\n        )\n\n        delete bag[ev][ns || '*'][listener]\n      }\n    } else if (ev && ns) {\n      // remove all listeners for a namespaced event\n      if (bag[ev] && bag[ev][ns]) {\n        for (l in bag[ev][ns]) {\n          off(n, [ev, ns].join('.'), l)\n        }\n\n        delete bag[ev][ns]\n      }\n    } else if (ns) {\n      // remove all listeners for a specific namespace\n      for (event in bag) {\n        for (namespace in bag[event]) {\n          if (ns === namespace) {\n            off(n, [event, ns].join('.'))\n          }\n        }\n      }\n    } else if (ev) {\n      // remove all listeners for the event\n      if (bag[ev]) {\n        for (namespace in bag[ev]) {\n          off(n, [ev, namespace].join('.'))\n        }\n\n        delete bag[ev]\n      }\n    } else {\n      // remove all listeners on a given node\n      for (event in bag) {\n        off(n, event)\n      }\n\n      clearEvents(instance)\n    }\n  })\n}\n\nexport function dispatch(node, event, data, options) {\n  const n = getEventTarget(node)\n\n  // Dispatch event\n  if (event instanceof globals.window.Event) {\n    n.dispatchEvent(event)\n  } else {\n    event = new globals.window.CustomEvent(event, {\n      detail: data,\n      cancelable: true,\n      ...options\n    })\n    n.dispatchEvent(event)\n  }\n  return event\n}\n","import { dispatch, off, on } from '../modules/core/event.js'\nimport { register } from '../utils/adopter.js'\nimport Base from './Base.js'\n\nexport default class EventTarget extends Base {\n  addEventListener() {}\n\n  dispatch(event, data, options) {\n    return dispatch(this, event, data, options)\n  }\n\n  dispatchEvent(event) {\n    const bag = this.getEventHolder().events\n    if (!bag) return true\n\n    const events = bag[event.type]\n\n    for (const i in events) {\n      for (const j in events[i]) {\n        events[i][j](event)\n      }\n    }\n\n    return !event.defaultPrevented\n  }\n\n  // Fire given event\n  fire(event, data, options) {\n    this.dispatch(event, data, options)\n    return this\n  }\n\n  getEventHolder() {\n    return this\n  }\n\n  getEventTarget() {\n    return this\n  }\n\n  // Unbind event from listener\n  off(event, listener, options) {\n    off(this, event, listener, options)\n    return this\n  }\n\n  // Bind given event to listener\n  on(event, listener, binding, options) {\n    on(this, event, listener, binding, options)\n    return this\n  }\n\n  removeEventListener() {}\n}\n\nregister(EventTarget, 'EventTarget')\n","export function noop() {}\n\n// Default animation values\nexport const timeline = {\n  duration: 400,\n  ease: '>',\n  delay: 0\n}\n\n// Default attribute values\nexport const attrs = {\n  // fill and stroke\n  'fill-opacity': 1,\n  'stroke-opacity': 1,\n  'stroke-width': 0,\n  'stroke-linejoin': 'miter',\n  'stroke-linecap': 'butt',\n  fill: '#000000',\n  stroke: '#000000',\n  opacity: 1,\n\n  // position\n  x: 0,\n  y: 0,\n  cx: 0,\n  cy: 0,\n\n  // size\n  width: 0,\n  height: 0,\n\n  // radius\n  r: 0,\n  rx: 0,\n  ry: 0,\n\n  // gradient\n  offset: 0,\n  'stop-opacity': 1,\n  'stop-color': '#000000',\n\n  // text\n  'text-anchor': 'start'\n}\n","import { delimiter } from '../modules/core/regex.js'\n\nexport default class SVGArray extends Array {\n  constructor(...args) {\n    super(...args)\n    this.init(...args)\n  }\n\n  clone() {\n    return new this.constructor(this)\n  }\n\n  init(arr) {\n    // This catches the case, that native map tries to create an array with new Array(1)\n    if (typeof arr === 'number') return this\n    this.length = 0\n    this.push(...this.parse(arr))\n    return this\n  }\n\n  // Parse whitespace separated string\n  parse(array = []) {\n    // If already is an array, no need to parse it\n    if (array instanceof Array) return array\n\n    return array.trim().split(delimiter).map(parseFloat)\n  }\n\n  toArray() {\n    return Array.prototype.concat.apply([], this)\n  }\n\n  toSet() {\n    return new Set(this)\n  }\n\n  toString() {\n    return this.join(' ')\n  }\n\n  // Flattens the array if needed\n  valueOf() {\n    const ret = []\n    ret.push(...this)\n    return ret\n  }\n}\n","import { numberAndUnit } from '../modules/core/regex.js'\n\n// Module for unit conversions\nexport default class SVGNumber {\n  // Initialize\n  constructor(...args) {\n    this.init(...args)\n  }\n\n  convert(unit) {\n    return new SVGNumber(this.value, unit)\n  }\n\n  // Divide number\n  divide(number) {\n    number = new SVGNumber(number)\n    return new SVGNumber(this / number, this.unit || number.unit)\n  }\n\n  init(value, unit) {\n    unit = Array.isArray(value) ? value[1] : unit\n    value = Array.isArray(value) ? value[0] : value\n\n    // initialize defaults\n    this.value = 0\n    this.unit = unit || ''\n\n    // parse value\n    if (typeof value === 'number') {\n      // ensure a valid numeric value\n      this.value = isNaN(value)\n        ? 0\n        : !isFinite(value)\n          ? value < 0\n            ? -3.4e38\n            : +3.4e38\n          : value\n    } else if (typeof value === 'string') {\n      unit = value.match(numberAndUnit)\n\n      if (unit) {\n        // make value numeric\n        this.value = parseFloat(unit[1])\n\n        // normalize\n        if (unit[5] === '%') {\n          this.value /= 100\n        } else if (unit[5] === 's') {\n          this.value *= 1000\n        }\n\n        // store unit\n        this.unit = unit[5]\n      }\n    } else {\n      if (value instanceof SVGNumber) {\n        this.value = value.valueOf()\n        this.unit = value.unit\n      }\n    }\n\n    return this\n  }\n\n  // Subtract number\n  minus(number) {\n    number = new SVGNumber(number)\n    return new SVGNumber(this - number, this.unit || number.unit)\n  }\n\n  // Add number\n  plus(number) {\n    number = new SVGNumber(number)\n    return new SVGNumber(this + number, this.unit || number.unit)\n  }\n\n  // Multiply number\n  times(number) {\n    number = new SVGNumber(number)\n    return new SVGNumber(this * number, this.unit || number.unit)\n  }\n\n  toArray() {\n    return [this.value, this.unit]\n  }\n\n  toJSON() {\n    return this.toString()\n  }\n\n  toString() {\n    return (\n      (this.unit === '%'\n        ? ~~(this.value * 1e8) / 1e6\n        : this.unit === 's'\n          ? this.value / 1e3\n          : this.value) + this.unit\n    )\n  }\n\n  valueOf() {\n    return this.value\n  }\n}\n","import { attrs as defaults } from './defaults.js'\nimport { isNumber } from './regex.js'\nimport Color from '../../types/Color.js'\nimport SVGArray from '../../types/SVGArray.js'\nimport SVGNumber from '../../types/SVGNumber.js'\n\nconst colorAttributes = new Set([\n  'fill',\n  'stroke',\n  'color',\n  'bgcolor',\n  'stop-color',\n  'flood-color',\n  'lighting-color'\n])\n\nconst hooks = []\nexport function registerAttrHook(fn) {\n  hooks.push(fn)\n}\n\n// Set svg element attribute\nexport default function attr(attr, val, ns) {\n  // act as full getter\n  if (attr == null) {\n    // get an object of attributes\n    attr = {}\n    val = this.node.attributes\n\n    for (const node of val) {\n      attr[node.nodeName] = isNumber.test(node.nodeValue)\n        ? parseFloat(node.nodeValue)\n        : node.nodeValue\n    }\n\n    return attr\n  } else if (attr instanceof Array) {\n    // loop through array and get all values\n    return attr.reduce((last, curr) => {\n      last[curr] = this.attr(curr)\n      return last\n    }, {})\n  } else if (typeof attr === 'object' && attr.constructor === Object) {\n    // apply every attribute individually if an object is passed\n    for (val in attr) this.attr(val, attr[val])\n  } else if (val === null) {\n    // remove value\n    this.node.removeAttribute(attr)\n  } else if (val == null) {\n    // act as a getter if the first and only argument is not an object\n    val = this.node.getAttribute(attr)\n    return val == null\n      ? defaults[attr]\n      : isNumber.test(val)\n        ? parseFloat(val)\n        : val\n  } else {\n    // Loop through hooks and execute them to convert value\n    val = hooks.reduce((_val, hook) => {\n      return hook(attr, _val, this)\n    }, val)\n\n    // ensure correct numeric values (also accepts NaN and Infinity)\n    if (typeof val === 'number') {\n      val = new SVGNumber(val)\n    } else if (colorAttributes.has(attr) && Color.isColor(val)) {\n      // ensure full hex color\n      val = new Color(val)\n    } else if (val.constructor === Array) {\n      // Check for plain arrays and parse array values\n      val = new SVGArray(val)\n    }\n\n    // if the passed attribute is leading...\n    if (attr === 'leading') {\n      // ... call the leading method instead\n      if (this.leading) {\n        this.leading(val)\n      }\n    } else {\n      // set given attribute on node\n      typeof ns === 'string'\n        ? this.node.setAttributeNS(ns, attr, val.toString())\n        : this.node.setAttribute(attr, val.toString())\n    }\n\n    // rebuild if required\n    if (this.rebuild && (attr === 'font-size' || attr === 'x')) {\n      this.rebuild()\n    }\n  }\n\n  return this\n}\n","import {\n  adopt,\n  assignNewId,\n  eid,\n  extend,\n  makeInstance,\n  create,\n  register\n} from '../utils/adopter.js'\nimport { find, findOne } from '../modules/core/selector.js'\nimport { globals } from '../utils/window.js'\nimport { map } from '../utils/utils.js'\nimport { svg, html } from '../modules/core/namespaces.js'\nimport EventTarget from '../types/EventTarget.js'\nimport List from '../types/List.js'\nimport attr from '../modules/core/attr.js'\n\nexport default class Dom extends EventTarget {\n  constructor(node, attrs) {\n    super()\n    this.node = node\n    this.type = node.nodeName\n\n    if (attrs && node !== attrs) {\n      this.attr(attrs)\n    }\n  }\n\n  // Add given element at a position\n  add(element, i) {\n    element = makeInstance(element)\n\n    // If non-root svg nodes are added we have to remove their namespaces\n    if (\n      element.removeNamespace &&\n      this.node instanceof globals.window.SVGElement\n    ) {\n      element.removeNamespace()\n    }\n\n    if (i == null) {\n      this.node.appendChild(element.node)\n    } else if (element.node !== this.node.childNodes[i]) {\n      this.node.insertBefore(element.node, this.node.childNodes[i])\n    }\n\n    return this\n  }\n\n  // Add element to given container and return self\n  addTo(parent, i) {\n    return makeInstance(parent).put(this, i)\n  }\n\n  // Returns all child elements\n  children() {\n    return new List(\n      map(this.node.children, function (node) {\n        return adopt(node)\n      })\n    )\n  }\n\n  // Remove all elements in this container\n  clear() {\n    // remove children\n    while (this.node.hasChildNodes()) {\n      this.node.removeChild(this.node.lastChild)\n    }\n\n    return this\n  }\n\n  // Clone element\n  clone(deep = true, assignNewIds = true) {\n    // write dom data to the dom so the clone can pickup the data\n    this.writeDataToDom()\n\n    // clone element\n    let nodeClone = this.node.cloneNode(deep)\n    if (assignNewIds) {\n      // assign new id\n      nodeClone = assignNewId(nodeClone)\n    }\n    return new this.constructor(nodeClone)\n  }\n\n  // Iterates over all children and invokes a given block\n  each(block, deep) {\n    const children = this.children()\n    let i, il\n\n    for (i = 0, il = children.length; i < il; i++) {\n      block.apply(children[i], [i, children])\n\n      if (deep) {\n        children[i].each(block, deep)\n      }\n    }\n\n    return this\n  }\n\n  element(nodeName, attrs) {\n    return this.put(new Dom(create(nodeName), attrs))\n  }\n\n  // Get first child\n  first() {\n    return adopt(this.node.firstChild)\n  }\n\n  // Get a element at the given index\n  get(i) {\n    return adopt(this.node.childNodes[i])\n  }\n\n  getEventHolder() {\n    return this.node\n  }\n\n  getEventTarget() {\n    return this.node\n  }\n\n  // Checks if the given element is a child\n  has(element) {\n    return this.index(element) >= 0\n  }\n\n  html(htmlOrFn, outerHTML) {\n    return this.xml(htmlOrFn, outerHTML, html)\n  }\n\n  // Get / set id\n  id(id) {\n    // generate new id if no id set\n    if (typeof id === 'undefined' && !this.node.id) {\n      this.node.id = eid(this.type)\n    }\n\n    // don't set directly with this.node.id to make `null` work correctly\n    return this.attr('id', id)\n  }\n\n  // Gets index of given element\n  index(element) {\n    return [].slice.call(this.node.childNodes).indexOf(element.node)\n  }\n\n  // Get the last child\n  last() {\n    return adopt(this.node.lastChild)\n  }\n\n  // matches the element vs a css selector\n  matches(selector) {\n    const el = this.node\n    const matcher =\n      el.matches ||\n      el.matchesSelector ||\n      el.msMatchesSelector ||\n      el.mozMatchesSelector ||\n      el.webkitMatchesSelector ||\n      el.oMatchesSelector ||\n      null\n    return matcher && matcher.call(el, selector)\n  }\n\n  // Returns the parent element instance\n  parent(type) {\n    let parent = this\n\n    // check for parent\n    if (!parent.node.parentNode) return null\n\n    // get parent element\n    parent = adopt(parent.node.parentNode)\n\n    if (!type) return parent\n\n    // loop through ancestors if type is given\n    do {\n      if (\n        typeof type === 'string' ? parent.matches(type) : parent instanceof type\n      )\n        return parent\n    } while ((parent = adopt(parent.node.parentNode)))\n\n    return parent\n  }\n\n  // Basically does the same as `add()` but returns the added element instead\n  put(element, i) {\n    element = makeInstance(element)\n    this.add(element, i)\n    return element\n  }\n\n  // Add element to given container and return container\n  putIn(parent, i) {\n    return makeInstance(parent).add(this, i)\n  }\n\n  // Remove element\n  remove() {\n    if (this.parent()) {\n      this.parent().removeElement(this)\n    }\n\n    return this\n  }\n\n  // Remove a given child\n  removeElement(element) {\n    this.node.removeChild(element.node)\n\n    return this\n  }\n\n  // Replace this with element\n  replace(element) {\n    element = makeInstance(element)\n\n    if (this.node.parentNode) {\n      this.node.parentNode.replaceChild(element.node, this.node)\n    }\n\n    return element\n  }\n\n  round(precision = 2, map = null) {\n    const factor = 10 ** precision\n    const attrs = this.attr(map)\n\n    for (const i in attrs) {\n      if (typeof attrs[i] === 'number') {\n        attrs[i] = Math.round(attrs[i] * factor) / factor\n      }\n    }\n\n    this.attr(attrs)\n    return this\n  }\n\n  // Import / Export raw svg\n  svg(svgOrFn, outerSVG) {\n    return this.xml(svgOrFn, outerSVG, svg)\n  }\n\n  // Return id on string conversion\n  toString() {\n    return this.id()\n  }\n\n  words(text) {\n    // This is faster than removing all children and adding a new one\n    this.node.textContent = text\n    return this\n  }\n\n  wrap(node) {\n    const parent = this.parent()\n\n    if (!parent) {\n      return this.addTo(node)\n    }\n\n    const position = parent.index(this)\n    return parent.put(node, position).put(this)\n  }\n\n  // write svgjs data to the dom\n  writeDataToDom() {\n    // dump variables recursively\n    this.each(function () {\n      this.writeDataToDom()\n    })\n\n    return this\n  }\n\n  // Import / Export raw svg\n  xml(xmlOrFn, outerXML, ns) {\n    if (typeof xmlOrFn === 'boolean') {\n      ns = outerXML\n      outerXML = xmlOrFn\n      xmlOrFn = null\n    }\n\n    // act as getter if no svg string is given\n    if (xmlOrFn == null || typeof xmlOrFn === 'function') {\n      // The default for exports is, that the outerNode is included\n      outerXML = outerXML == null ? true : outerXML\n\n      // write svgjs data to the dom\n      this.writeDataToDom()\n      let current = this\n\n      // An export modifier was passed\n      if (xmlOrFn != null) {\n        current = adopt(current.node.cloneNode(true))\n\n        // If the user wants outerHTML we need to process this node, too\n        if (outerXML) {\n          const result = xmlOrFn(current)\n          current = result || current\n\n          // The user does not want this node? Well, then he gets nothing\n          if (result === false) return ''\n        }\n\n        // Deep loop through all children and apply modifier\n        current.each(function () {\n          const result = xmlOrFn(this)\n          const _this = result || this\n\n          // If modifier returns false, discard node\n          if (result === false) {\n            this.remove()\n\n            // If modifier returns new node, use it\n          } else if (result && this !== _this) {\n            this.replace(_this)\n          }\n        }, true)\n      }\n\n      // Return outer or inner content\n      return outerXML ? current.node.outerHTML : current.node.innerHTML\n    }\n\n    // Act as setter if we got a string\n\n    // The default for import is, that the current node is not replaced\n    outerXML = outerXML == null ? false : outerXML\n\n    // Create temporary holder\n    const well = create('wrapper', ns)\n    const fragment = globals.document.createDocumentFragment()\n\n    // Dump raw svg\n    well.innerHTML = xmlOrFn\n\n    // Transplant nodes into the fragment\n    for (let len = well.children.length; len--; ) {\n      fragment.appendChild(well.firstElementChild)\n    }\n\n    const parent = this.parent()\n\n    // Add the whole fragment at once\n    return outerXML ? this.replace(fragment) && parent : this.add(fragment)\n  }\n}\n\nextend(Dom, { attr, find, findOne })\nregister(Dom, 'Dom')\n","import { bbox, rbox, inside } from '../types/Box.js'\nimport { ctm, screenCTM } from '../types/Matrix.js'\nimport {\n  extend,\n  getClass,\n  makeInstance,\n  register,\n  root\n} from '../utils/adopter.js'\nimport { globals } from '../utils/window.js'\nimport { point } from '../types/Point.js'\nimport { proportionalSize, writeDataToDom } from '../utils/utils.js'\nimport { reference } from '../modules/core/regex.js'\nimport Dom from './Dom.js'\nimport List from '../types/List.js'\nimport SVGNumber from '../types/SVGNumber.js'\n\nexport default class Element extends Dom {\n  constructor(node, attrs) {\n    super(node, attrs)\n\n    // initialize data object\n    this.dom = {}\n\n    // create circular reference\n    this.node.instance = this\n\n    if (node.hasAttribute('data-svgjs') || node.hasAttribute('svgjs:data')) {\n      // pull svgjs data from the dom (getAttributeNS doesn't work in html5)\n      this.setData(\n        JSON.parse(node.getAttribute('data-svgjs')) ??\n          JSON.parse(node.getAttribute('svgjs:data')) ??\n          {}\n      )\n    }\n  }\n\n  // Move element by its center\n  center(x, y) {\n    return this.cx(x).cy(y)\n  }\n\n  // Move by center over x-axis\n  cx(x) {\n    return x == null\n      ? this.x() + this.width() / 2\n      : this.x(x - this.width() / 2)\n  }\n\n  // Move by center over y-axis\n  cy(y) {\n    return y == null\n      ? this.y() + this.height() / 2\n      : this.y(y - this.height() / 2)\n  }\n\n  // Get defs\n  defs() {\n    const root = this.root()\n    return root && root.defs()\n  }\n\n  // Relative move over x and y axes\n  dmove(x, y) {\n    return this.dx(x).dy(y)\n  }\n\n  // Relative move over x axis\n  dx(x = 0) {\n    return this.x(new SVGNumber(x).plus(this.x()))\n  }\n\n  // Relative move over y axis\n  dy(y = 0) {\n    return this.y(new SVGNumber(y).plus(this.y()))\n  }\n\n  getEventHolder() {\n    return this\n  }\n\n  // Set height of element\n  height(height) {\n    return this.attr('height', height)\n  }\n\n  // Move element to given x and y values\n  move(x, y) {\n    return this.x(x).y(y)\n  }\n\n  // return array of all ancestors of given type up to the root svg\n  parents(until = this.root()) {\n    const isSelector = typeof until === 'string'\n    if (!isSelector) {\n      until = makeInstance(until)\n    }\n    const parents = new List()\n    let parent = this\n\n    while (\n      (parent = parent.parent()) &&\n      parent.node !== globals.document &&\n      parent.nodeName !== '#document-fragment'\n    ) {\n      parents.push(parent)\n\n      if (!isSelector && parent.node === until.node) {\n        break\n      }\n      if (isSelector && parent.matches(until)) {\n        break\n      }\n      if (parent.node === this.root().node) {\n        // We worked our way to the root and didn't match `until`\n        return null\n      }\n    }\n\n    return parents\n  }\n\n  // Get referenced element form attribute value\n  reference(attr) {\n    attr = this.attr(attr)\n    if (!attr) return null\n\n    const m = (attr + '').match(reference)\n    return m ? makeInstance(m[1]) : null\n  }\n\n  // Get parent document\n  root() {\n    const p = this.parent(getClass(root))\n    return p && p.root()\n  }\n\n  // set given data to the elements data property\n  setData(o) {\n    this.dom = o\n    return this\n  }\n\n  // Set element size to given width and height\n  size(width, height) {\n    const p = proportionalSize(this, width, height)\n\n    return this.width(new SVGNumber(p.width)).height(new SVGNumber(p.height))\n  }\n\n  // Set width of element\n  width(width) {\n    return this.attr('width', width)\n  }\n\n  // write svgjs data to the dom\n  writeDataToDom() {\n    writeDataToDom(this, this.dom)\n    return super.writeDataToDom()\n  }\n\n  // Move over x-axis\n  x(x) {\n    return this.attr('x', x)\n  }\n\n  // Move over y-axis\n  y(y) {\n    return this.attr('y', y)\n  }\n}\n\nextend(Element, {\n  bbox,\n  rbox,\n  inside,\n  point,\n  ctm,\n  screenCTM\n})\n\nregister(Element, 'Element')\n","import { registerMethods } from '../../utils/methods.js'\nimport Color from '../../types/Color.js'\nimport Element from '../../elements/Element.js'\nimport Matrix from '../../types/Matrix.js'\nimport Point from '../../types/Point.js'\nimport SVGNumber from '../../types/SVGNumber.js'\n\n// Define list of available attributes for stroke and fill\nconst sugar = {\n  stroke: [\n    'color',\n    'width',\n    'opacity',\n    'linecap',\n    'linejoin',\n    'miterlimit',\n    'dasharray',\n    'dashoffset'\n  ],\n  fill: ['color', 'opacity', 'rule'],\n  prefix: function (t, a) {\n    return a === 'color' ? t : t + '-' + a\n  }\n}\n\n// Add sugar for fill and stroke\n;['fill', 'stroke'].forEach(function (m) {\n  const extension = {}\n  let i\n\n  extension[m] = function (o) {\n    if (typeof o === 'undefined') {\n      return this.attr(m)\n    }\n    if (\n      typeof o === 'string' ||\n      o instanceof Color ||\n      Color.isRgb(o) ||\n      o instanceof Element\n    ) {\n      this.attr(m, o)\n    } else {\n      // set all attributes from sugar.fill and sugar.stroke list\n      for (i = sugar[m].length - 1; i >= 0; i--) {\n        if (o[sugar[m][i]] != null) {\n          this.attr(sugar.prefix(m, sugar[m][i]), o[sugar[m][i]])\n        }\n      }\n    }\n\n    return this\n  }\n\n  registerMethods(['Element', 'Runner'], extension)\n})\n\nregisterMethods(['Element', 'Runner'], {\n  // Let the user set the matrix directly\n  matrix: function (mat, b, c, d, e, f) {\n    // Act as a getter\n    if (mat == null) {\n      return new Matrix(this)\n    }\n\n    // Act as a setter, the user can pass a matrix or a set of numbers\n    return this.attr('transform', new Matrix(mat, b, c, d, e, f))\n  },\n\n  // Map rotation to transform\n  rotate: function (angle, cx, cy) {\n    return this.transform({ rotate: angle, ox: cx, oy: cy }, true)\n  },\n\n  // Map skew to transform\n  skew: function (x, y, cx, cy) {\n    return arguments.length === 1 || arguments.length === 3\n      ? this.transform({ skew: x, ox: y, oy: cx }, true)\n      : this.transform({ skew: [x, y], ox: cx, oy: cy }, true)\n  },\n\n  shear: function (lam, cx, cy) {\n    return this.transform({ shear: lam, ox: cx, oy: cy }, true)\n  },\n\n  // Map scale to transform\n  scale: function (x, y, cx, cy) {\n    return arguments.length === 1 || arguments.length === 3\n      ? this.transform({ scale: x, ox: y, oy: cx }, true)\n      : this.transform({ scale: [x, y], ox: cx, oy: cy }, true)\n  },\n\n  // Map translate to transform\n  translate: function (x, y) {\n    return this.transform({ translate: [x, y] }, true)\n  },\n\n  // Map relative translations to transform\n  relative: function (x, y) {\n    return this.transform({ relative: [x, y] }, true)\n  },\n\n  // Map flip to transform\n  flip: function (direction = 'both', origin = 'center') {\n    if ('xybothtrue'.indexOf(direction) === -1) {\n      origin = direction\n      direction = 'both'\n    }\n\n    return this.transform({ flip: direction, origin: origin }, true)\n  },\n\n  // Opacity\n  opacity: function (value) {\n    return this.attr('opacity', value)\n  }\n})\n\nregisterMethods('radius', {\n  // Add x and y radius\n  radius: function (x, y = x) {\n    const type = (this._element || this).type\n    return type === 'radialGradient'\n      ? this.attr('r', new SVGNumber(x))\n      : this.rx(x).ry(y)\n  }\n})\n\nregisterMethods('Path', {\n  // Get path length\n  length: function () {\n    return this.node.getTotalLength()\n  },\n  // Get point at length\n  pointAt: function (length) {\n    return new Point(this.node.getPointAtLength(length))\n  }\n})\n\nregisterMethods(['Element', 'Runner'], {\n  // Set font\n  font: function (a, v) {\n    if (typeof a === 'object') {\n      for (v in a) this.font(v, a[v])\n      return this\n    }\n\n    return a === 'leading'\n      ? this.leading(v)\n      : a === 'anchor'\n        ? this.attr('text-anchor', v)\n        : a === 'size' ||\n            a === 'family' ||\n            a === 'weight' ||\n            a === 'stretch' ||\n            a === 'variant' ||\n            a === 'style'\n          ? this.attr('font-' + a, v)\n          : this.attr(a, v)\n  }\n})\n\n// Add events to elements\nconst methods = [\n  'click',\n  'dblclick',\n  'mousedown',\n  'mouseup',\n  'mouseover',\n  'mouseout',\n  'mousemove',\n  'mouseenter',\n  'mouseleave',\n  'touchstart',\n  'touchmove',\n  'touchleave',\n  'touchend',\n  'touchcancel',\n  'contextmenu',\n  'wheel',\n  'pointerdown',\n  'pointermove',\n  'pointerup',\n  'pointerleave',\n  'pointercancel'\n].reduce(function (last, event) {\n  // add event to Element\n  const fn = function (f) {\n    if (f === null) {\n      this.off(event)\n    } else {\n      this.on(event, f)\n    }\n    return this\n  }\n\n  last[event] = fn\n  return last\n}, {})\n\nregisterMethods('Element', methods)\n","import { getOrigin, isDescriptive } from '../../utils/utils.js'\nimport { delimiter, transforms } from '../core/regex.js'\nimport { registerMethods } from '../../utils/methods.js'\nimport Matrix from '../../types/Matrix.js'\n\n// Reset all transformations\nexport function untransform() {\n  return this.attr('transform', null)\n}\n\n// merge the whole transformation chain into one matrix and returns it\nexport function matrixify() {\n  const matrix = (this.attr('transform') || '')\n    // split transformations\n    .split(transforms)\n    .slice(0, -1)\n    .map(function (str) {\n      // generate key => value pairs\n      const kv = str.trim().split('(')\n      return [\n        kv[0],\n        kv[1].split(delimiter).map(function (str) {\n          return parseFloat(str)\n        })\n      ]\n    })\n    .reverse()\n    // merge every transformation into one matrix\n    .reduce(function (matrix, transform) {\n      if (transform[0] === 'matrix') {\n        return matrix.lmultiply(Matrix.fromArray(transform[1]))\n      }\n      return matrix[transform[0]].apply(matrix, transform[1])\n    }, new Matrix())\n\n  return matrix\n}\n\n// add an element to another parent without changing the visual representation on the screen\nexport function toParent(parent, i) {\n  if (this === parent) return this\n\n  if (isDescriptive(this.node)) return this.addTo(parent, i)\n\n  const ctm = this.screenCTM()\n  const pCtm = parent.screenCTM().inverse()\n\n  this.addTo(parent, i).untransform().transform(pCtm.multiply(ctm))\n\n  return this\n}\n\n// same as above with parent equals root-svg\nexport function toRoot(i) {\n  return this.toParent(this.root(), i)\n}\n\n// Add transformations\nexport function transform(o, relative) {\n  // Act as a getter if no object was passed\n  if (o == null || typeof o === 'string') {\n    const decomposed = new Matrix(this).decompose()\n    return o == null ? decomposed : decomposed[o]\n  }\n\n  if (!Matrix.isMatrixLike(o)) {\n    // Set the origin according to the defined transform\n    o = { ...o, origin: getOrigin(o, this) }\n  }\n\n  // The user can pass a boolean, an Element or an Matrix or nothing\n  const cleanRelative = relative === true ? this : relative || false\n  const result = new Matrix(cleanRelative).transform(o)\n  return this.attr('transform', result)\n}\n\nregisterMethods('Element', {\n  untransform,\n  matrixify,\n  toParent,\n  toRoot,\n  transform\n})\n","import { register } from '../utils/adopter.js'\nimport Element from './Element.js'\n\nexport default class Container extends Element {\n  flatten() {\n    this.each(function () {\n      if (this instanceof Container) {\n        return this.flatten().ungroup()\n      }\n    })\n\n    return this\n  }\n\n  ungroup(parent = this.parent(), index = parent.index(this)) {\n    // when parent != this, we want append all elements to the end\n    index = index === -1 ? parent.children().length : index\n\n    this.each(function (i, children) {\n      // reverse each\n      return children[children.length - i - 1].toParent(parent, index)\n    })\n\n    return this.remove()\n  }\n}\n\nregister(Container, 'Container')\n","import { nodeOrNew, register } from '../utils/adopter.js'\nimport Container from './Container.js'\n\nexport default class Defs extends Container {\n  constructor(node, attrs = node) {\n    super(nodeOrNew('defs', node), attrs)\n  }\n\n  flatten() {\n    return this\n  }\n\n  ungroup() {\n    return this\n  }\n}\n\nregister(Defs, 'Defs')\n","import { register } from '../utils/adopter.js'\nimport Element from './Element.js'\n\nexport default class Shape extends Element {}\n\nregister(Shape, 'Shape')\n","import SVGNumber from '../../types/SVGNumber.js'\n\n// Radius x value\nexport function rx(rx) {\n  return this.attr('rx', rx)\n}\n\n// Radius y value\nexport function ry(ry) {\n  return this.attr('ry', ry)\n}\n\n// Move over x-axis\nexport function x(x) {\n  return x == null ? this.cx() - this.rx() : this.cx(x + this.rx())\n}\n\n// Move over y-axis\nexport function y(y) {\n  return y == null ? this.cy() - this.ry() : this.cy(y + this.ry())\n}\n\n// Move by center over x-axis\nexport function cx(x) {\n  return this.attr('cx', x)\n}\n\n// Move by center over y-axis\nexport function cy(y) {\n  return this.attr('cy', y)\n}\n\n// Set width of element\nexport function width(width) {\n  return width == null ? this.rx() * 2 : this.rx(new SVGNumber(width).divide(2))\n}\n\n// Set height of element\nexport function height(height) {\n  return height == null\n    ? this.ry() * 2\n    : this.ry(new SVGNumber(height).divide(2))\n}\n","import {\n  extend,\n  nodeOrNew,\n  register,\n  wrapWithAttrCheck\n} from '../utils/adopter.js'\nimport { proportionalSize } from '../utils/utils.js'\nimport { registerMethods } from '../utils/methods.js'\nimport SVGNumber from '../types/SVGNumber.js'\nimport Shape from './Shape.js'\nimport * as circled from '../modules/core/circled.js'\n\nexport default class Ellipse extends Shape {\n  constructor(node, attrs = node) {\n    super(nodeOrNew('ellipse', node), attrs)\n  }\n\n  size(width, height) {\n    const p = proportionalSize(this, width, height)\n\n    return this.rx(new SVGNumber(p.width).divide(2)).ry(\n      new SVGNumber(p.height).divide(2)\n    )\n  }\n}\n\nextend(Ellipse, circled)\n\nregisterMethods('Container', {\n  // Create an ellipse\n  ellipse: wrapWithAttrCheck(function (width = 0, height = width) {\n    return this.put(new Ellipse()).size(width, height).move(0, 0)\n  })\n})\n\nregister(Ellipse, 'Ellipse')\n","import Dom from './Dom.js'\nimport { globals } from '../utils/window.js'\nimport { register, create } from '../utils/adopter.js'\n\nclass Fragment extends Dom {\n  constructor(node = globals.document.createDocumentFragment()) {\n    super(node)\n  }\n\n  // Import / Export raw xml\n  xml(xmlOrFn, outerXML, ns) {\n    if (typeof xmlOrFn === 'boolean') {\n      ns = outerXML\n      outerXML = xmlOrFn\n      xmlOrFn = null\n    }\n\n    // because this is a fragment we have to put all elements into a wrapper first\n    // before we can get the innerXML from it\n    if (xmlOrFn == null || typeof xmlOrFn === 'function') {\n      const wrapper = new Dom(create('wrapper', ns))\n      wrapper.add(this.node.cloneNode(true))\n\n      return wrapper.xml(false, ns)\n    }\n\n    // Act as setter if we got a string\n    return super.xml(xmlOrFn, false, ns)\n  }\n}\n\nregister(Fragment, 'Fragment')\n\nexport default Fragment\n","import SVGNumber from '../../types/SVGNumber.js'\n\nexport function from(x, y) {\n  return (this._element || this).type === 'radialGradient'\n    ? this.attr({ fx: new SVGNumber(x), fy: new SVGNumber(y) })\n    : this.attr({ x1: new SVGNumber(x), y1: new SVGNumber(y) })\n}\n\nexport function to(x, y) {\n  return (this._element || this).type === 'radialGradient'\n    ? this.attr({ cx: new SVGNumber(x), cy: new SVGNumber(y) })\n    : this.attr({ x2: new SVGNumber(x), y2: new SVGNumber(y) })\n}\n","import {\n  extend,\n  nodeOrNew,\n  register,\n  wrapWithAttrCheck\n} from '../utils/adopter.js'\nimport { registerMethods } from '../utils/methods.js'\nimport Box from '../types/Box.js'\nimport Container from './Container.js'\nimport baseFind from '../modules/core/selector.js'\nimport * as gradiented from '../modules/core/gradiented.js'\n\nexport default class Gradient extends Container {\n  constructor(type, attrs) {\n    super(\n      nodeOrNew(type + 'Gradient', typeof type === 'string' ? null : type),\n      attrs\n    )\n  }\n\n  // custom attr to handle transform\n  attr(a, b, c) {\n    if (a === 'transform') a = 'gradientTransform'\n    return super.attr(a, b, c)\n  }\n\n  bbox() {\n    return new Box()\n  }\n\n  targets() {\n    return baseFind('svg [fill*=' + this.id() + ']')\n  }\n\n  // Alias string conversion to fill\n  toString() {\n    return this.url()\n  }\n\n  // Update gradient\n  update(block) {\n    // remove all stops\n    this.clear()\n\n    // invoke passed block\n    if (typeof block === 'function') {\n      block.call(this, this)\n    }\n\n    return this\n  }\n\n  // Return the fill id\n  url() {\n    return 'url(#' + this.id() + ')'\n  }\n}\n\nextend(Gradient, gradiented)\n\nregisterMethods({\n  Container: {\n    // Create gradient element in defs\n    gradient(...args) {\n      return this.defs().gradient(...args)\n    }\n  },\n  // define gradient\n  Defs: {\n    gradient: wrapWithAttrCheck(function (type, block) {\n      return this.put(new Gradient(type)).update(block)\n    })\n  }\n})\n\nregister(Gradient, 'Gradient')\n","import { nodeOrNew, register, wrapWithAttrCheck } from '../utils/adopter.js'\nimport { registerMethods } from '../utils/methods.js'\nimport Box from '../types/Box.js'\nimport Container from './Container.js'\nimport baseFind from '../modules/core/selector.js'\n\nexport default class Pattern extends Container {\n  // Initialize node\n  constructor(node, attrs = node) {\n    super(nodeOrNew('pattern', node), attrs)\n  }\n\n  // custom attr to handle transform\n  attr(a, b, c) {\n    if (a === 'transform') a = 'patternTransform'\n    return super.attr(a, b, c)\n  }\n\n  bbox() {\n    return new Box()\n  }\n\n  targets() {\n    return baseFind('svg [fill*=' + this.id() + ']')\n  }\n\n  // Alias string conversion to fill\n  toString() {\n    return this.url()\n  }\n\n  // Update pattern by rebuilding\n  update(block) {\n    // remove content\n    this.clear()\n\n    // invoke passed block\n    if (typeof block === 'function') {\n      block.call(this, this)\n    }\n\n    return this\n  }\n\n  // Return the fill id\n  url() {\n    return 'url(#' + this.id() + ')'\n  }\n}\n\nregisterMethods({\n  Container: {\n    // Create pattern element in defs\n    pattern(...args) {\n      return this.defs().pattern(...args)\n    }\n  },\n  Defs: {\n    pattern: wrapWithAttrCheck(function (width, height, block) {\n      return this.put(new Pattern()).update(block).attr({\n        x: 0,\n        y: 0,\n        width: width,\n        height: height,\n        patternUnits: 'userSpaceOnUse'\n      })\n    })\n  }\n})\n\nregister(Pattern, 'Pattern')\n","import { isImage } from '../modules/core/regex.js'\nimport { nodeOrNew, register, wrapWithAttrCheck } from '../utils/adopter.js'\nimport { off, on } from '../modules/core/event.js'\nimport { registerAttrHook } from '../modules/core/attr.js'\nimport { registerMethods } from '../utils/methods.js'\nimport { xlink } from '../modules/core/namespaces.js'\nimport Pattern from './Pattern.js'\nimport Shape from './Shape.js'\nimport { globals } from '../utils/window.js'\n\nexport default class Image extends Shape {\n  constructor(node, attrs = node) {\n    super(nodeOrNew('image', node), attrs)\n  }\n\n  // (re)load image\n  load(url, callback) {\n    if (!url) return this\n\n    const img = new globals.window.Image()\n\n    on(\n      img,\n      'load',\n      function (e) {\n        const p = this.parent(Pattern)\n\n        // ensure image size\n        if (this.width() === 0 && this.height() === 0) {\n          this.size(img.width, img.height)\n        }\n\n        if (p instanceof Pattern) {\n          // ensure pattern size if not set\n          if (p.width() === 0 && p.height() === 0) {\n            p.size(this.width(), this.height())\n          }\n        }\n\n        if (typeof callback === 'function') {\n          callback.call(this, e)\n        }\n      },\n      this\n    )\n\n    on(img, 'load error', function () {\n      // dont forget to unbind memory leaking events\n      off(img)\n    })\n\n    return this.attr('href', (img.src = url), xlink)\n  }\n}\n\nregisterAttrHook(function (attr, val, _this) {\n  // convert image fill and stroke to patterns\n  if (attr === 'fill' || attr === 'stroke') {\n    if (isImage.test(val)) {\n      val = _this.root().defs().image(val)\n    }\n  }\n\n  if (val instanceof Image) {\n    val = _this\n      .root()\n      .defs()\n      .pattern(0, 0, (pattern) => {\n        pattern.add(val)\n      })\n  }\n\n  return val\n})\n\nregisterMethods({\n  Container: {\n    // create image element, load image and set its size\n    image: wrapWithAttrCheck(function (source, callback) {\n      return this.put(new Image()).size(0, 0).load(source, callback)\n    })\n  }\n})\n\nregister(Image, 'Image')\n","import { delimiter } from '../modules/core/regex.js'\nimport SVGArray from './SVGArray.js'\nimport Box from './Box.js'\nimport Matrix from './Matrix.js'\n\nexport default class PointArray extends SVGArray {\n  // Get bounding box of points\n  bbox() {\n    let maxX = -Infinity\n    let maxY = -Infinity\n    let minX = Infinity\n    let minY = Infinity\n    this.forEach(function (el) {\n      maxX = Math.max(el[0], maxX)\n      maxY = Math.max(el[1], maxY)\n      minX = Math.min(el[0], minX)\n      minY = Math.min(el[1], minY)\n    })\n    return new Box(minX, minY, maxX - minX, maxY - minY)\n  }\n\n  // Move point string\n  move(x, y) {\n    const box = this.bbox()\n\n    // get relative offset\n    x -= box.x\n    y -= box.y\n\n    // move every point\n    if (!isNaN(x) && !isNaN(y)) {\n      for (let i = this.length - 1; i >= 0; i--) {\n        this[i] = [this[i][0] + x, this[i][1] + y]\n      }\n    }\n\n    return this\n  }\n\n  // Parse point string and flat array\n  parse(array = [0, 0]) {\n    const points = []\n\n    // if it is an array, we flatten it and therefore clone it to 1 depths\n    if (array instanceof Array) {\n      array = Array.prototype.concat.apply([], array)\n    } else {\n      // Else, it is considered as a string\n      // parse points\n      array = array.trim().split(delimiter).map(parseFloat)\n    }\n\n    // validate points - https://svgwg.org/svg2-draft/shapes.html#DataTypePoints\n    // Odd number of coordinates is an error. In such cases, drop the last odd coordinate.\n    if (array.length % 2 !== 0) array.pop()\n\n    // wrap points in two-tuples\n    for (let i = 0, len = array.length; i < len; i = i + 2) {\n      points.push([array[i], array[i + 1]])\n    }\n\n    return points\n  }\n\n  // Resize poly string\n  size(width, height) {\n    let i\n    const box = this.bbox()\n\n    // recalculate position of all points according to new size\n    for (i = this.length - 1; i >= 0; i--) {\n      if (box.width)\n        this[i][0] = ((this[i][0] - box.x) * width) / box.width + box.x\n      if (box.height)\n        this[i][1] = ((this[i][1] - box.y) * height) / box.height + box.y\n    }\n\n    return this\n  }\n\n  // Convert array to line object\n  toLine() {\n    return {\n      x1: this[0][0],\n      y1: this[0][1],\n      x2: this[1][0],\n      y2: this[1][1]\n    }\n  }\n\n  // Convert array to string\n  toString() {\n    const array = []\n    // convert to a poly point string\n    for (let i = 0, il = this.length; i < il; i++) {\n      array.push(this[i].join(','))\n    }\n\n    return array.join(' ')\n  }\n\n  transform(m) {\n    return this.clone().transformO(m)\n  }\n\n  // transform points with matrix (similar to Point.transform)\n  transformO(m) {\n    if (!Matrix.isMatrixLike(m)) {\n      m = new Matrix(m)\n    }\n\n    for (let i = this.length; i--; ) {\n      // Perform the matrix multiplication\n      const [x, y] = this[i]\n      this[i][0] = m.a * x + m.c * y + m.e\n      this[i][1] = m.b * x + m.d * y + m.f\n    }\n\n    return this\n  }\n}\n","import PointArray from '../../types/PointArray.js'\n\nexport const MorphArray = PointArray\n\n// Move by left top corner over x-axis\nexport function x(x) {\n  return x == null ? this.bbox().x : this.move(x, this.bbox().y)\n}\n\n// Move by left top corner over y-axis\nexport function y(y) {\n  return y == null ? this.bbox().y : this.move(this.bbox().x, y)\n}\n\n// Set width of element\nexport function width(width) {\n  const b = this.bbox()\n  return width == null ? b.width : this.size(width, b.height)\n}\n\n// Set height of element\nexport function height(height) {\n  const b = this.bbox()\n  return height == null ? b.height : this.size(b.width, height)\n}\n","import {\n  extend,\n  nodeOrNew,\n  register,\n  wrapWithAttrCheck\n} from '../utils/adopter.js'\nimport { proportionalSize } from '../utils/utils.js'\nimport { registerMethods } from '../utils/methods.js'\nimport PointArray from '../types/PointArray.js'\nimport Shape from './Shape.js'\nimport * as pointed from '../modules/core/pointed.js'\n\nexport default class Line extends Shape {\n  // Initialize node\n  constructor(node, attrs = node) {\n    super(nodeOrNew('line', node), attrs)\n  }\n\n  // Get array\n  array() {\n    return new PointArray([\n      [this.attr('x1'), this.attr('y1')],\n      [this.attr('x2'), this.attr('y2')]\n    ])\n  }\n\n  // Move by left top corner\n  move(x, y) {\n    return this.attr(this.array().move(x, y).toLine())\n  }\n\n  // Overwrite native plot() method\n  plot(x1, y1, x2, y2) {\n    if (x1 == null) {\n      return this.array()\n    } else if (typeof y1 !== 'undefined') {\n      x1 = { x1, y1, x2, y2 }\n    } else {\n      x1 = new PointArray(x1).toLine()\n    }\n\n    return this.attr(x1)\n  }\n\n  // Set element size to given width and height\n  size(width, height) {\n    const p = proportionalSize(this, width, height)\n    return this.attr(this.array().size(p.width, p.height).toLine())\n  }\n}\n\nextend(Line, pointed)\n\nregisterMethods({\n  Container: {\n    // Create a line element\n    line: wrapWithAttrCheck(function (...args) {\n      // make sure plot is called as a setter\n      // x1 is not necessarily a number, it can also be an array, a string and a PointArray\n      return Line.prototype.plot.apply(\n        this.put(new Line()),\n        args[0] != null ? args : [0, 0, 0, 0]\n      )\n    })\n  }\n})\n\nregister(Line, 'Line')\n","import { nodeOrNew, register, wrapWithAttrCheck } from '../utils/adopter.js'\nimport { registerMethods } from '../utils/methods.js'\nimport Container from './Container.js'\n\nexport default class Marker extends Container {\n  // Initialize node\n  constructor(node, attrs = node) {\n    super(nodeOrNew('marker', node), attrs)\n  }\n\n  // Set height of element\n  height(height) {\n    return this.attr('markerHeight', height)\n  }\n\n  orient(orient) {\n    return this.attr('orient', orient)\n  }\n\n  // Set marker refX and refY\n  ref(x, y) {\n    return this.attr('refX', x).attr('refY', y)\n  }\n\n  // Return the fill id\n  toString() {\n    return 'url(#' + this.id() + ')'\n  }\n\n  // Update marker\n  update(block) {\n    // remove all content\n    this.clear()\n\n    // invoke passed block\n    if (typeof block === 'function') {\n      block.call(this, this)\n    }\n\n    return this\n  }\n\n  // Set width of element\n  width(width) {\n    return this.attr('markerWidth', width)\n  }\n}\n\nregisterMethods({\n  Container: {\n    marker(...args) {\n      // Create marker element in defs\n      return this.defs().marker(...args)\n    }\n  },\n  Defs: {\n    // Create marker\n    marker: wrapWithAttrCheck(function (width, height, block) {\n      // Set default viewbox to match the width and height, set ref to cx and cy and set orient to auto\n      return this.put(new Marker())\n        .size(width, height)\n        .ref(width / 2, height / 2)\n        .viewbox(0, 0, width, height)\n        .attr('orient', 'auto')\n        .update(block)\n    })\n  },\n  marker: {\n    // Create and attach markers\n    marker(marker, width, height, block) {\n      let attr = ['marker']\n\n      // Build attribute name\n      if (marker !== 'all') attr.push(marker)\n      attr = attr.join('-')\n\n      // Set marker attribute\n      marker =\n        arguments[1] instanceof Marker\n          ? arguments[1]\n          : this.defs().marker(width, height, block)\n\n      return this.attr(attr, marker)\n    }\n  }\n})\n\nregister(Marker, 'Marker')\n","import { timeline } from '../modules/core/defaults.js'\nimport { extend } from '../utils/adopter.js'\n\n/***\nBase Class\n==========\nThe base stepper class that will be\n***/\n\nfunction makeSetterGetter(k, f) {\n  return function (v) {\n    if (v == null) return this[k]\n    this[k] = v\n    if (f) f.call(this)\n    return this\n  }\n}\n\nexport const easing = {\n  '-': function (pos) {\n    return pos\n  },\n  '<>': function (pos) {\n    return -Math.cos(pos * Math.PI) / 2 + 0.5\n  },\n  '>': function (pos) {\n    return Math.sin((pos * Math.PI) / 2)\n  },\n  '<': function (pos) {\n    return -Math.cos((pos * Math.PI) / 2) + 1\n  },\n  bezier: function (x1, y1, x2, y2) {\n    // see https://www.w3.org/TR/css-easing-1/#cubic-bezier-algo\n    return function (t) {\n      if (t < 0) {\n        if (x1 > 0) {\n          return (y1 / x1) * t\n        } else if (x2 > 0) {\n          return (y2 / x2) * t\n        } else {\n          return 0\n        }\n      } else if (t > 1) {\n        if (x2 < 1) {\n          return ((1 - y2) / (1 - x2)) * t + (y2 - x2) / (1 - x2)\n        } else if (x1 < 1) {\n          return ((1 - y1) / (1 - x1)) * t + (y1 - x1) / (1 - x1)\n        } else {\n          return 1\n        }\n      } else {\n        return 3 * t * (1 - t) ** 2 * y1 + 3 * t ** 2 * (1 - t) * y2 + t ** 3\n      }\n    }\n  },\n  // see https://www.w3.org/TR/css-easing-1/#step-timing-function-algo\n  steps: function (steps, stepPosition = 'end') {\n    // deal with \"jump-\" prefix\n    stepPosition = stepPosition.split('-').reverse()[0]\n\n    let jumps = steps\n    if (stepPosition === 'none') {\n      --jumps\n    } else if (stepPosition === 'both') {\n      ++jumps\n    }\n\n    // The beforeFlag is essentially useless\n    return (t, beforeFlag = false) => {\n      // Step is called currentStep in referenced url\n      let step = Math.floor(t * steps)\n      const jumping = (t * step) % 1 === 0\n\n      if (stepPosition === 'start' || stepPosition === 'both') {\n        ++step\n      }\n\n      if (beforeFlag && jumping) {\n        --step\n      }\n\n      if (t >= 0 && step < 0) {\n        step = 0\n      }\n\n      if (t <= 1 && step > jumps) {\n        step = jumps\n      }\n\n      return step / jumps\n    }\n  }\n}\n\nexport class Stepper {\n  done() {\n    return false\n  }\n}\n\n/***\nEasing Functions\n================\n***/\n\nexport class Ease extends Stepper {\n  constructor(fn = timeline.ease) {\n    super()\n    this.ease = easing[fn] || fn\n  }\n\n  step(from, to, pos) {\n    if (typeof from !== 'number') {\n      return pos < 1 ? from : to\n    }\n    return from + (to - from) * this.ease(pos)\n  }\n}\n\n/***\nController Types\n================\n***/\n\nexport class Controller extends Stepper {\n  constructor(fn) {\n    super()\n    this.stepper = fn\n  }\n\n  done(c) {\n    return c.done\n  }\n\n  step(current, target, dt, c) {\n    return this.stepper(current, target, dt, c)\n  }\n}\n\nfunction recalculate() {\n  // Apply the default parameters\n  const duration = (this._duration || 500) / 1000\n  const overshoot = this._overshoot || 0\n\n  // Calculate the PID natural response\n  const eps = 1e-10\n  const pi = Math.PI\n  const os = Math.log(overshoot / 100 + eps)\n  const zeta = -os / Math.sqrt(pi * pi + os * os)\n  const wn = 3.9 / (zeta * duration)\n\n  // Calculate the Spring values\n  this.d = 2 * zeta * wn\n  this.k = wn * wn\n}\n\nexport class Spring extends Controller {\n  constructor(duration = 500, overshoot = 0) {\n    super()\n    this.duration(duration).overshoot(overshoot)\n  }\n\n  step(current, target, dt, c) {\n    if (typeof current === 'string') return current\n    c.done = dt === Infinity\n    if (dt === Infinity) return target\n    if (dt === 0) return current\n\n    if (dt > 100) dt = 16\n\n    dt /= 1000\n\n    // Get the previous velocity\n    const velocity = c.velocity || 0\n\n    // Apply the control to get the new position and store it\n    const acceleration = -this.d * velocity - this.k * (current - target)\n    const newPosition = current + velocity * dt + (acceleration * dt * dt) / 2\n\n    // Store the velocity\n    c.velocity = velocity + acceleration * dt\n\n    // Figure out if we have converged, and if so, pass the value\n    c.done = Math.abs(target - newPosition) + Math.abs(velocity) < 0.002\n    return c.done ? target : newPosition\n  }\n}\n\nextend(Spring, {\n  duration: makeSetterGetter('_duration', recalculate),\n  overshoot: makeSetterGetter('_overshoot', recalculate)\n})\n\nexport class PID extends Controller {\n  constructor(p = 0.1, i = 0.01, d = 0, windup = 1000) {\n    super()\n    this.p(p).i(i).d(d).windup(windup)\n  }\n\n  step(current, target, dt, c) {\n    if (typeof current === 'string') return current\n    c.done = dt === Infinity\n\n    if (dt === Infinity) return target\n    if (dt === 0) return current\n\n    const p = target - current\n    let i = (c.integral || 0) + p * dt\n    const d = (p - (c.error || 0)) / dt\n    const windup = this._windup\n\n    // antiwindup\n    if (windup !== false) {\n      i = Math.max(-windup, Math.min(i, windup))\n    }\n\n    c.error = p\n    c.integral = i\n\n    c.done = Math.abs(p) < 0.001\n\n    return c.done ? target : current + (this.P * p + this.I * i + this.D * d)\n  }\n}\n\nextend(PID, {\n  windup: makeSetterGetter('_windup'),\n  p: makeSetterGetter('P'),\n  i: makeSetterGetter('I'),\n  d: makeSetterGetter('D')\n})\n","import { isPathLetter } from '../modules/core/regex.js'\nimport Point from '../types/Point.js'\n\nconst segmentParameters = {\n  M: 2,\n  L: 2,\n  H: 1,\n  V: 1,\n  C: 6,\n  S: 4,\n  Q: 4,\n  T: 2,\n  A: 7,\n  Z: 0\n}\n\nconst pathHandlers = {\n  M: function (c, p, p0) {\n    p.x = p0.x = c[0]\n    p.y = p0.y = c[1]\n\n    return ['M', p.x, p.y]\n  },\n  L: function (c, p) {\n    p.x = c[0]\n    p.y = c[1]\n    return ['L', c[0], c[1]]\n  },\n  H: function (c, p) {\n    p.x = c[0]\n    return ['H', c[0]]\n  },\n  V: function (c, p) {\n    p.y = c[0]\n    return ['V', c[0]]\n  },\n  C: function (c, p) {\n    p.x = c[4]\n    p.y = c[5]\n    return ['C', c[0], c[1], c[2], c[3], c[4], c[5]]\n  },\n  S: function (c, p) {\n    p.x = c[2]\n    p.y = c[3]\n    return ['S', c[0], c[1], c[2], c[3]]\n  },\n  Q: function (c, p) {\n    p.x = c[2]\n    p.y = c[3]\n    return ['Q', c[0], c[1], c[2], c[3]]\n  },\n  T: function (c, p) {\n    p.x = c[0]\n    p.y = c[1]\n    return ['T', c[0], c[1]]\n  },\n  Z: function (c, p, p0) {\n    p.x = p0.x\n    p.y = p0.y\n    return ['Z']\n  },\n  A: function (c, p) {\n    p.x = c[5]\n    p.y = c[6]\n    return ['A', c[0], c[1], c[2], c[3], c[4], c[5], c[6]]\n  }\n}\n\nconst mlhvqtcsaz = 'mlhvqtcsaz'.split('')\n\nfor (let i = 0, il = mlhvqtcsaz.length; i < il; ++i) {\n  pathHandlers[mlhvqtcsaz[i]] = (function (i) {\n    return function (c, p, p0) {\n      if (i === 'H') c[0] = c[0] + p.x\n      else if (i === 'V') c[0] = c[0] + p.y\n      else if (i === 'A') {\n        c[5] = c[5] + p.x\n        c[6] = c[6] + p.y\n      } else {\n        for (let j = 0, jl = c.length; j < jl; ++j) {\n          c[j] = c[j] + (j % 2 ? p.y : p.x)\n        }\n      }\n\n      return pathHandlers[i](c, p, p0)\n    }\n  })(mlhvqtcsaz[i].toUpperCase())\n}\n\nfunction makeAbsolut(parser) {\n  const command = parser.segment[0]\n  return pathHandlers[command](parser.segment.slice(1), parser.p, parser.p0)\n}\n\nfunction segmentComplete(parser) {\n  return (\n    parser.segment.length &&\n    parser.segment.length - 1 ===\n      segmentParameters[parser.segment[0].toUpperCase()]\n  )\n}\n\nfunction startNewSegment(parser, token) {\n  parser.inNumber && finalizeNumber(parser, false)\n  const pathLetter = isPathLetter.test(token)\n\n  if (pathLetter) {\n    parser.segment = [token]\n  } else {\n    const lastCommand = parser.lastCommand\n    const small = lastCommand.toLowerCase()\n    const isSmall = lastCommand === small\n    parser.segment = [small === 'm' ? (isSmall ? 'l' : 'L') : lastCommand]\n  }\n\n  parser.inSegment = true\n  parser.lastCommand = parser.segment[0]\n\n  return pathLetter\n}\n\nfunction finalizeNumber(parser, inNumber) {\n  if (!parser.inNumber) throw new Error('Parser Error')\n  parser.number && parser.segment.push(parseFloat(parser.number))\n  parser.inNumber = inNumber\n  parser.number = ''\n  parser.pointSeen = false\n  parser.hasExponent = false\n\n  if (segmentComplete(parser)) {\n    finalizeSegment(parser)\n  }\n}\n\nfunction finalizeSegment(parser) {\n  parser.inSegment = false\n  if (parser.absolute) {\n    parser.segment = makeAbsolut(parser)\n  }\n  parser.segments.push(parser.segment)\n}\n\nfunction isArcFlag(parser) {\n  if (!parser.segment.length) return false\n  const isArc = parser.segment[0].toUpperCase() === 'A'\n  const length = parser.segment.length\n\n  return isArc && (length === 4 || length === 5)\n}\n\nfunction isExponential(parser) {\n  return parser.lastToken.toUpperCase() === 'E'\n}\n\nconst pathDelimiters = new Set([' ', ',', '\\t', '\\n', '\\r', '\\f'])\nexport function pathParser(d, toAbsolute = true) {\n  let index = 0\n  let token = ''\n  const parser = {\n    segment: [],\n    inNumber: false,\n    number: '',\n    lastToken: '',\n    inSegment: false,\n    segments: [],\n    pointSeen: false,\n    hasExponent: false,\n    absolute: toAbsolute,\n    p0: new Point(),\n    p: new Point()\n  }\n\n  while (((parser.lastToken = token), (token = d.charAt(index++)))) {\n    if (!parser.inSegment) {\n      if (startNewSegment(parser, token)) {\n        continue\n      }\n    }\n\n    if (token === '.') {\n      if (parser.pointSeen || parser.hasExponent) {\n        finalizeNumber(parser, false)\n        --index\n        continue\n      }\n      parser.inNumber = true\n      parser.pointSeen = true\n      parser.number += token\n      continue\n    }\n\n    if (!isNaN(parseInt(token))) {\n      if (parser.number === '0' || isArcFlag(parser)) {\n        parser.inNumber = true\n        parser.number = token\n        finalizeNumber(parser, true)\n        continue\n      }\n\n      parser.inNumber = true\n      parser.number += token\n      continue\n    }\n\n    if (pathDelimiters.has(token)) {\n      if (parser.inNumber) {\n        finalizeNumber(parser, false)\n      }\n      continue\n    }\n\n    if (token === '-' || token === '+') {\n      if (parser.inNumber && !isExponential(parser)) {\n        finalizeNumber(parser, false)\n        --index\n        continue\n      }\n      parser.number += token\n      parser.inNumber = true\n      continue\n    }\n\n    if (token.toUpperCase() === 'E') {\n      parser.number += token\n      parser.hasExponent = true\n      continue\n    }\n\n    if (isPathLetter.test(token)) {\n      if (parser.inNumber) {\n        finalizeNumber(parser, false)\n      } else if (!segmentComplete(parser)) {\n        throw new Error('parser Error')\n      } else {\n        finalizeSegment(parser)\n      }\n      --index\n    }\n  }\n\n  if (parser.inNumber) {\n    finalizeNumber(parser, false)\n  }\n\n  if (parser.inSegment && segmentComplete(parser)) {\n    finalizeSegment(parser)\n  }\n\n  return parser.segments\n}\n","import SVGArray from './SVGArray.js'\nimport parser from '../modules/core/parser.js'\nimport Box from './Box.js'\nimport { pathParser } from '../utils/pathParser.js'\n\nfunction arrayToString(a) {\n  let s = ''\n  for (let i = 0, il = a.length; i < il; i++) {\n    s += a[i][0]\n\n    if (a[i][1] != null) {\n      s += a[i][1]\n\n      if (a[i][2] != null) {\n        s += ' '\n        s += a[i][2]\n\n        if (a[i][3] != null) {\n          s += ' '\n          s += a[i][3]\n          s += ' '\n          s += a[i][4]\n\n          if (a[i][5] != null) {\n            s += ' '\n            s += a[i][5]\n            s += ' '\n            s += a[i][6]\n\n            if (a[i][7] != null) {\n              s += ' '\n              s += a[i][7]\n            }\n          }\n        }\n      }\n    }\n  }\n\n  return s + ' '\n}\n\nexport default class PathArray extends SVGArray {\n  // Get bounding box of path\n  bbox() {\n    parser().path.setAttribute('d', this.toString())\n    return new Box(parser.nodes.path.getBBox())\n  }\n\n  // Move path string\n  move(x, y) {\n    // get bounding box of current situation\n    const box = this.bbox()\n\n    // get relative offset\n    x -= box.x\n    y -= box.y\n\n    if (!isNaN(x) && !isNaN(y)) {\n      // move every point\n      for (let l, i = this.length - 1; i >= 0; i--) {\n        l = this[i][0]\n\n        if (l === 'M' || l === 'L' || l === 'T') {\n          this[i][1] += x\n          this[i][2] += y\n        } else if (l === 'H') {\n          this[i][1] += x\n        } else if (l === 'V') {\n          this[i][1] += y\n        } else if (l === 'C' || l === 'S' || l === 'Q') {\n          this[i][1] += x\n          this[i][2] += y\n          this[i][3] += x\n          this[i][4] += y\n\n          if (l === 'C') {\n            this[i][5] += x\n            this[i][6] += y\n          }\n        } else if (l === 'A') {\n          this[i][6] += x\n          this[i][7] += y\n        }\n      }\n    }\n\n    return this\n  }\n\n  // Absolutize and parse path to array\n  parse(d = 'M0 0') {\n    if (Array.isArray(d)) {\n      d = Array.prototype.concat.apply([], d).toString()\n    }\n\n    return pathParser(d)\n  }\n\n  // Resize path string\n  size(width, height) {\n    // get bounding box of current situation\n    const box = this.bbox()\n    let i, l\n\n    // If the box width or height is 0 then we ignore\n    // transformations on the respective axis\n    box.width = box.width === 0 ? 1 : box.width\n    box.height = box.height === 0 ? 1 : box.height\n\n    // recalculate position of all points according to new size\n    for (i = this.length - 1; i >= 0; i--) {\n      l = this[i][0]\n\n      if (l === 'M' || l === 'L' || l === 'T') {\n        this[i][1] = ((this[i][1] - box.x) * width) / box.width + box.x\n        this[i][2] = ((this[i][2] - box.y) * height) / box.height + box.y\n      } else if (l === 'H') {\n        this[i][1] = ((this[i][1] - box.x) * width) / box.width + box.x\n      } else if (l === 'V') {\n        this[i][1] = ((this[i][1] - box.y) * height) / box.height + box.y\n      } else if (l === 'C' || l === 'S' || l === 'Q') {\n        this[i][1] = ((this[i][1] - box.x) * width) / box.width + box.x\n        this[i][2] = ((this[i][2] - box.y) * height) / box.height + box.y\n        this[i][3] = ((this[i][3] - box.x) * width) / box.width + box.x\n        this[i][4] = ((this[i][4] - box.y) * height) / box.height + box.y\n\n        if (l === 'C') {\n          this[i][5] = ((this[i][5] - box.x) * width) / box.width + box.x\n          this[i][6] = ((this[i][6] - box.y) * height) / box.height + box.y\n        }\n      } else if (l === 'A') {\n        // resize radii\n        this[i][1] = (this[i][1] * width) / box.width\n        this[i][2] = (this[i][2] * height) / box.height\n\n        // move position values\n        this[i][6] = ((this[i][6] - box.x) * width) / box.width + box.x\n        this[i][7] = ((this[i][7] - box.y) * height) / box.height + box.y\n      }\n    }\n\n    return this\n  }\n\n  // Convert array to string\n  toString() {\n    return arrayToString(this)\n  }\n}\n","import { Ease } from './Controller.js'\nimport {\n  delimiter,\n  numberAndUnit,\n  isPathLetter\n} from '../modules/core/regex.js'\nimport { extend } from '../utils/adopter.js'\nimport Color from '../types/Color.js'\nimport PathArray from '../types/PathArray.js'\nimport SVGArray from '../types/SVGArray.js'\nimport SVGNumber from '../types/SVGNumber.js'\n\nconst getClassForType = (value) => {\n  const type = typeof value\n\n  if (type === 'number') {\n    return SVGNumber\n  } else if (type === 'string') {\n    if (Color.isColor(value)) {\n      return Color\n    } else if (delimiter.test(value)) {\n      return isPathLetter.test(value) ? PathArray : SVGArray\n    } else if (numberAndUnit.test(value)) {\n      return SVGNumber\n    } else {\n      return NonMorphable\n    }\n  } else if (morphableTypes.indexOf(value.constructor) > -1) {\n    return value.constructor\n  } else if (Array.isArray(value)) {\n    return SVGArray\n  } else if (type === 'object') {\n    return ObjectBag\n  } else {\n    return NonMorphable\n  }\n}\n\nexport default class Morphable {\n  constructor(stepper) {\n    this._stepper = stepper || new Ease('-')\n\n    this._from = null\n    this._to = null\n    this._type = null\n    this._context = null\n    this._morphObj = null\n  }\n\n  at(pos) {\n    return this._morphObj.morph(\n      this._from,\n      this._to,\n      pos,\n      this._stepper,\n      this._context\n    )\n  }\n\n  done() {\n    const complete = this._context.map(this._stepper.done).reduce(function (\n      last,\n      curr\n    ) {\n      return last && curr\n    }, true)\n    return complete\n  }\n\n  from(val) {\n    if (val == null) {\n      return this._from\n    }\n\n    this._from = this._set(val)\n    return this\n  }\n\n  stepper(stepper) {\n    if (stepper == null) return this._stepper\n    this._stepper = stepper\n    return this\n  }\n\n  to(val) {\n    if (val == null) {\n      return this._to\n    }\n\n    this._to = this._set(val)\n    return this\n  }\n\n  type(type) {\n    // getter\n    if (type == null) {\n      return this._type\n    }\n\n    // setter\n    this._type = type\n    return this\n  }\n\n  _set(value) {\n    if (!this._type) {\n      this.type(getClassForType(value))\n    }\n\n    let result = new this._type(value)\n    if (this._type === Color) {\n      result = this._to\n        ? result[this._to[4]]()\n        : this._from\n          ? result[this._from[4]]()\n          : result\n    }\n\n    if (this._type === ObjectBag) {\n      result = this._to\n        ? result.align(this._to)\n        : this._from\n          ? result.align(this._from)\n          : result\n    }\n\n    result = result.toConsumable()\n\n    this._morphObj = this._morphObj || new this._type()\n    this._context =\n      this._context ||\n      Array.apply(null, Array(result.length))\n        .map(Object)\n        .map(function (o) {\n          o.done = true\n          return o\n        })\n    return result\n  }\n}\n\nexport class NonMorphable {\n  constructor(...args) {\n    this.init(...args)\n  }\n\n  init(val) {\n    val = Array.isArray(val) ? val[0] : val\n    this.value = val\n    return this\n  }\n\n  toArray() {\n    return [this.value]\n  }\n\n  valueOf() {\n    return this.value\n  }\n}\n\nexport class TransformBag {\n  constructor(...args) {\n    this.init(...args)\n  }\n\n  init(obj) {\n    if (Array.isArray(obj)) {\n      obj = {\n        scaleX: obj[0],\n        scaleY: obj[1],\n        shear: obj[2],\n        rotate: obj[3],\n        translateX: obj[4],\n        translateY: obj[5],\n        originX: obj[6],\n        originY: obj[7]\n      }\n    }\n\n    Object.assign(this, TransformBag.defaults, obj)\n    return this\n  }\n\n  toArray() {\n    const v = this\n\n    return [\n      v.scaleX,\n      v.scaleY,\n      v.shear,\n      v.rotate,\n      v.translateX,\n      v.translateY,\n      v.originX,\n      v.originY\n    ]\n  }\n}\n\nTransformBag.defaults = {\n  scaleX: 1,\n  scaleY: 1,\n  shear: 0,\n  rotate: 0,\n  translateX: 0,\n  translateY: 0,\n  originX: 0,\n  originY: 0\n}\n\nconst sortByKey = (a, b) => {\n  return a[0] < b[0] ? -1 : a[0] > b[0] ? 1 : 0\n}\n\nexport class ObjectBag {\n  constructor(...args) {\n    this.init(...args)\n  }\n\n  align(other) {\n    const values = this.values\n    for (let i = 0, il = values.length; i < il; ++i) {\n      // If the type is the same we only need to check if the color is in the correct format\n      if (values[i + 1] === other[i + 1]) {\n        if (values[i + 1] === Color && other[i + 7] !== values[i + 7]) {\n          const space = other[i + 7]\n          const color = new Color(this.values.splice(i + 3, 5))\n            [space]()\n            .toArray()\n          this.values.splice(i + 3, 0, ...color)\n        }\n\n        i += values[i + 2] + 2\n        continue\n      }\n\n      if (!other[i + 1]) {\n        return this\n      }\n\n      // The types differ, so we overwrite the new type with the old one\n      // And initialize it with the types default (e.g. black for color or 0 for number)\n      const defaultObject = new other[i + 1]().toArray()\n\n      // Than we fix the values array\n      const toDelete = values[i + 2] + 3\n\n      values.splice(\n        i,\n        toDelete,\n        other[i],\n        other[i + 1],\n        other[i + 2],\n        ...defaultObject\n      )\n\n      i += values[i + 2] + 2\n    }\n    return this\n  }\n\n  init(objOrArr) {\n    this.values = []\n\n    if (Array.isArray(objOrArr)) {\n      this.values = objOrArr.slice()\n      return\n    }\n\n    objOrArr = objOrArr || {}\n    const entries = []\n\n    for (const i in objOrArr) {\n      const Type = getClassForType(objOrArr[i])\n      const val = new Type(objOrArr[i]).toArray()\n      entries.push([i, Type, val.length, ...val])\n    }\n\n    entries.sort(sortByKey)\n\n    this.values = entries.reduce((last, curr) => last.concat(curr), [])\n    return this\n  }\n\n  toArray() {\n    return this.values\n  }\n\n  valueOf() {\n    const obj = {}\n    const arr = this.values\n\n    // for (var i = 0, len = arr.length; i < len; i += 2) {\n    while (arr.length) {\n      const key = arr.shift()\n      const Type = arr.shift()\n      const num = arr.shift()\n      const values = arr.splice(0, num)\n      obj[key] = new Type(values) // .valueOf()\n    }\n\n    return obj\n  }\n}\n\nconst morphableTypes = [NonMorphable, TransformBag, ObjectBag]\n\nexport function registerMorphableType(type = []) {\n  morphableTypes.push(...[].concat(type))\n}\n\nexport function makeMorphable() {\n  extend(morphableTypes, {\n    to(val) {\n      return new Morphable()\n        .type(this.constructor)\n        .from(this.toArray()) // this.valueOf())\n        .to(val)\n    },\n    fromArray(arr) {\n      this.init(arr)\n      return this\n    },\n    toConsumable() {\n      return this.toArray()\n    },\n    morph(from, to, pos, stepper, context) {\n      const mapper = function (i, index) {\n        return stepper.step(i, to[index], pos, context[index], context)\n      }\n\n      return this.fromArray(from.map(mapper))\n    }\n  })\n}\n","import { nodeOrNew, register, wrapWithAttrCheck } from '../utils/adopter.js'\nimport { proportionalSize } from '../utils/utils.js'\nimport { registerMethods } from '../utils/methods.js'\nimport PathArray from '../types/PathArray.js'\nimport Shape from './Shape.js'\n\nexport default class Path extends Shape {\n  // Initialize node\n  constructor(node, attrs = node) {\n    super(nodeOrNew('path', node), attrs)\n  }\n\n  // Get array\n  array() {\n    return this._array || (this._array = new PathArray(this.attr('d')))\n  }\n\n  // Clear array cache\n  clear() {\n    delete this._array\n    return this\n  }\n\n  // Set height of element\n  height(height) {\n    return height == null\n      ? this.bbox().height\n      : this.size(this.bbox().width, height)\n  }\n\n  // Move by left top corner\n  move(x, y) {\n    return this.attr('d', this.array().move(x, y))\n  }\n\n  // Plot new path\n  plot(d) {\n    return d == null\n      ? this.array()\n      : this.clear().attr(\n          'd',\n          typeof d === 'string' ? d : (this._array = new PathArray(d))\n        )\n  }\n\n  // Set element size to given width and height\n  size(width, height) {\n    const p = proportionalSize(this, width, height)\n    return this.attr('d', this.array().size(p.width, p.height))\n  }\n\n  // Set width of element\n  width(width) {\n    return width == null\n      ? this.bbox().width\n      : this.size(width, this.bbox().height)\n  }\n\n  // Move by left top corner over x-axis\n  x(x) {\n    return x == null ? this.bbox().x : this.move(x, this.bbox().y)\n  }\n\n  // Move by left top corner over y-axis\n  y(y) {\n    return y == null ? this.bbox().y : this.move(this.bbox().x, y)\n  }\n}\n\n// Define morphable array\nPath.prototype.MorphArray = PathArray\n\n// Add parent method\nregisterMethods({\n  Container: {\n    // Create a wrapped path element\n    path: wrapWithAttrCheck(function (d) {\n      // make sure plot is called as a setter\n      return this.put(new Path()).plot(d || new PathArray())\n    })\n  }\n})\n\nregister(Path, 'Path')\n","import { proportionalSize } from '../../utils/utils.js'\nimport PointArray from '../../types/PointArray.js'\n\n// Get array\nexport function array() {\n  return this._array || (this._array = new PointArray(this.attr('points')))\n}\n\n// Clear array cache\nexport function clear() {\n  delete this._array\n  return this\n}\n\n// Move by left top corner\nexport function move(x, y) {\n  return this.attr('points', this.array().move(x, y))\n}\n\n// Plot new path\nexport function plot(p) {\n  return p == null\n    ? this.array()\n    : this.clear().attr(\n        'points',\n        typeof p === 'string' ? p : (this._array = new PointArray(p))\n      )\n}\n\n// Set element size to given width and height\nexport function size(width, height) {\n  const p = proportionalSize(this, width, height)\n  return this.attr('points', this.array().size(p.width, p.height))\n}\n","import {\n  extend,\n  nodeOrNew,\n  register,\n  wrapWithAttrCheck\n} from '../utils/adopter.js'\nimport { registerMethods } from '../utils/methods.js'\nimport PointArray from '../types/PointArray.js'\nimport Shape from './Shape.js'\nimport * as pointed from '../modules/core/pointed.js'\nimport * as poly from '../modules/core/poly.js'\n\nexport default class Polygon extends Shape {\n  // Initialize node\n  constructor(node, attrs = node) {\n    super(nodeOrNew('polygon', node), attrs)\n  }\n}\n\nregisterMethods({\n  Container: {\n    // Create a wrapped polygon element\n    polygon: wrapWithAttrCheck(function (p) {\n      // make sure plot is called as a setter\n      return this.put(new Polygon()).plot(p || new PointArray())\n    })\n  }\n})\n\nextend(Polygon, pointed)\nextend(Polygon, poly)\nregister(Polygon, 'Polygon')\n","import {\n  extend,\n  nodeOrNew,\n  register,\n  wrapWithAttrCheck\n} from '../utils/adopter.js'\nimport { registerMethods } from '../utils/methods.js'\nimport PointArray from '../types/PointArray.js'\nimport Shape from './Shape.js'\nimport * as pointed from '../modules/core/pointed.js'\nimport * as poly from '../modules/core/poly.js'\n\nexport default class Polyline extends Shape {\n  // Initialize node\n  constructor(node, attrs = node) {\n    super(nodeOrNew('polyline', node), attrs)\n  }\n}\n\nregisterMethods({\n  Container: {\n    // Create a wrapped polygon element\n    polyline: wrapWithAttrCheck(function (p) {\n      // make sure plot is called as a setter\n      return this.put(new Polyline()).plot(p || new PointArray())\n    })\n  }\n})\n\nextend(Polyline, pointed)\nextend(Polyline, poly)\nregister(Polyline, 'Polyline')\n","import {\n  extend,\n  nodeOrNew,\n  register,\n  wrapWithAttrCheck\n} from '../utils/adopter.js'\nimport { registerMethods } from '../utils/methods.js'\nimport { rx, ry } from '../modules/core/circled.js'\nimport Shape from './Shape.js'\n\nexport default class Rect extends Shape {\n  // Initialize node\n  constructor(node, attrs = node) {\n    super(nodeOrNew('rect', node), attrs)\n  }\n}\n\nextend(Rect, { rx, ry })\n\nregisterMethods({\n  Container: {\n    // Create a rect element\n    rect: wrapWithAttrCheck(function (width, height) {\n      return this.put(new Rect()).size(width, height)\n    })\n  }\n})\n\nregister(Rect, 'Rect')\n","export default class Queue {\n  constructor() {\n    this._first = null\n    this._last = null\n  }\n\n  // Shows us the first item in the list\n  first() {\n    return this._first && this._first.value\n  }\n\n  // Shows us the last item in the list\n  last() {\n    return this._last && this._last.value\n  }\n\n  push(value) {\n    // An item stores an id and the provided value\n    const item =\n      typeof value.next !== 'undefined'\n        ? value\n        : { value: value, next: null, prev: null }\n\n    // Deal with the queue being empty or populated\n    if (this._last) {\n      item.prev = this._last\n      this._last.next = item\n      this._last = item\n    } else {\n      this._last = item\n      this._first = item\n    }\n\n    // Return the current item\n    return item\n  }\n\n  // Removes the item that was returned from the push\n  remove(item) {\n    // Relink the previous item\n    if (item.prev) item.prev.next = item.next\n    if (item.next) item.next.prev = item.prev\n    if (item === this._last) this._last = item.prev\n    if (item === this._first) this._first = item.next\n\n    // Invalidate item\n    item.prev = null\n    item.next = null\n  }\n\n  shift() {\n    // Check if we have a value\n    const remove = this._first\n    if (!remove) return null\n\n    // If we do, remove it and relink things\n    this._first = remove.next\n    if (this._first) this._first.prev = null\n    this._last = this._first ? this._last : null\n    return remove.value\n  }\n}\n","import { globals } from '../utils/window.js'\nimport Queue from './Queue.js'\n\nconst Animator = {\n  nextDraw: null,\n  frames: new Queue(),\n  timeouts: new Queue(),\n  immediates: new Queue(),\n  timer: () => globals.window.performance || globals.window.Date,\n  transforms: [],\n\n  frame(fn) {\n    // Store the node\n    const node = Animator.frames.push({ run: fn })\n\n    // Request an animation frame if we don't have one\n    if (Animator.nextDraw === null) {\n      Animator.nextDraw = globals.window.requestAnimationFrame(Animator._draw)\n    }\n\n    // Return the node so we can remove it easily\n    return node\n  },\n\n  timeout(fn, delay) {\n    delay = delay || 0\n\n    // Work out when the event should fire\n    const time = Animator.timer().now() + delay\n\n    // Add the timeout to the end of the queue\n    const node = Animator.timeouts.push({ run: fn, time: time })\n\n    // Request another animation frame if we need one\n    if (Animator.nextDraw === null) {\n      Animator.nextDraw = globals.window.requestAnimationFrame(Animator._draw)\n    }\n\n    return node\n  },\n\n  immediate(fn) {\n    // Add the immediate fn to the end of the queue\n    const node = Animator.immediates.push(fn)\n    // Request another animation frame if we need one\n    if (Animator.nextDraw === null) {\n      Animator.nextDraw = globals.window.requestAnimationFrame(Animator._draw)\n    }\n\n    return node\n  },\n\n  cancelFrame(node) {\n    node != null && Animator.frames.remove(node)\n  },\n\n  clearTimeout(node) {\n    node != null && Animator.timeouts.remove(node)\n  },\n\n  cancelImmediate(node) {\n    node != null && Animator.immediates.remove(node)\n  },\n\n  _draw(now) {\n    // Run all the timeouts we can run, if they are not ready yet, add them\n    // to the end of the queue immediately! (bad timeouts!!! [sarcasm])\n    let nextTimeout = null\n    const lastTimeout = Animator.timeouts.last()\n    while ((nextTimeout = Animator.timeouts.shift())) {\n      // Run the timeout if its time, or push it to the end\n      if (now >= nextTimeout.time) {\n        nextTimeout.run()\n      } else {\n        Animator.timeouts.push(nextTimeout)\n      }\n\n      // If we hit the last item, we should stop shifting out more items\n      if (nextTimeout === lastTimeout) break\n    }\n\n    // Run all of the animation frames\n    let nextFrame = null\n    const lastFrame = Animator.frames.last()\n    while (nextFrame !== lastFrame && (nextFrame = Animator.frames.shift())) {\n      nextFrame.run(now)\n    }\n\n    let nextImmediate = null\n    while ((nextImmediate = Animator.immediates.shift())) {\n      nextImmediate()\n    }\n\n    // If we have remaining timeouts or frames, draw until we don't anymore\n    Animator.nextDraw =\n      Animator.timeouts.first() || Animator.frames.first()\n        ? globals.window.requestAnimationFrame(Animator._draw)\n        : null\n  }\n}\n\nexport default Animator\n","import { globals } from '../utils/window.js'\nimport { registerMethods } from '../utils/methods.js'\nimport Animator from './Animator.js'\nimport EventTarget from '../types/EventTarget.js'\n\nconst makeSchedule = function (runnerInfo) {\n  const start = runnerInfo.start\n  const duration = runnerInfo.runner.duration()\n  const end = start + duration\n  return {\n    start: start,\n    duration: duration,\n    end: end,\n    runner: runnerInfo.runner\n  }\n}\n\nconst defaultSource = function () {\n  const w = globals.window\n  return (w.performance || w.Date).now()\n}\n\nexport default class Timeline extends EventTarget {\n  // Construct a new timeline on the given element\n  constructor(timeSource = defaultSource) {\n    super()\n\n    this._timeSource = timeSource\n\n    // terminate resets all variables to their initial state\n    this.terminate()\n  }\n\n  active() {\n    return !!this._nextFrame\n  }\n\n  finish() {\n    // Go to end and pause\n    this.time(this.getEndTimeOfTimeline() + 1)\n    return this.pause()\n  }\n\n  // Calculates the end of the timeline\n  getEndTime() {\n    const lastRunnerInfo = this.getLastRunnerInfo()\n    const lastDuration = lastRunnerInfo ? lastRunnerInfo.runner.duration() : 0\n    const lastStartTime = lastRunnerInfo ? lastRunnerInfo.start : this._time\n    return lastStartTime + lastDuration\n  }\n\n  getEndTimeOfTimeline() {\n    const endTimes = this._runners.map((i) => i.start + i.runner.duration())\n    return Math.max(0, ...endTimes)\n  }\n\n  getLastRunnerInfo() {\n    return this.getRunnerInfoById(this._lastRunnerId)\n  }\n\n  getRunnerInfoById(id) {\n    return this._runners[this._runnerIds.indexOf(id)] || null\n  }\n\n  pause() {\n    this._paused = true\n    return this._continue()\n  }\n\n  persist(dtOrForever) {\n    if (dtOrForever == null) return this._persist\n    this._persist = dtOrForever\n    return this\n  }\n\n  play() {\n    // Now make sure we are not paused and continue the animation\n    this._paused = false\n    return this.updateTime()._continue()\n  }\n\n  reverse(yes) {\n    const currentSpeed = this.speed()\n    if (yes == null) return this.speed(-currentSpeed)\n\n    const positive = Math.abs(currentSpeed)\n    return this.speed(yes ? -positive : positive)\n  }\n\n  // schedules a runner on the timeline\n  schedule(runner, delay, when) {\n    if (runner == null) {\n      return this._runners.map(makeSchedule)\n    }\n\n    // The start time for the next animation can either be given explicitly,\n    // derived from the current timeline time or it can be relative to the\n    // last start time to chain animations directly\n\n    let absoluteStartTime = 0\n    const endTime = this.getEndTime()\n    delay = delay || 0\n\n    // Work out when to start the animation\n    if (when == null || when === 'last' || when === 'after') {\n      // Take the last time and increment\n      absoluteStartTime = endTime\n    } else if (when === 'absolute' || when === 'start') {\n      absoluteStartTime = delay\n      delay = 0\n    } else if (when === 'now') {\n      absoluteStartTime = this._time\n    } else if (when === 'relative') {\n      const runnerInfo = this.getRunnerInfoById(runner.id)\n      if (runnerInfo) {\n        absoluteStartTime = runnerInfo.start + delay\n        delay = 0\n      }\n    } else if (when === 'with-last') {\n      const lastRunnerInfo = this.getLastRunnerInfo()\n      const lastStartTime = lastRunnerInfo ? lastRunnerInfo.start : this._time\n      absoluteStartTime = lastStartTime\n    } else {\n      throw new Error('Invalid value for the \"when\" parameter')\n    }\n\n    // Manage runner\n    runner.unschedule()\n    runner.timeline(this)\n\n    const persist = runner.persist()\n    const runnerInfo = {\n      persist: persist === null ? this._persist : persist,\n      start: absoluteStartTime + delay,\n      runner\n    }\n\n    this._lastRunnerId = runner.id\n\n    this._runners.push(runnerInfo)\n    this._runners.sort((a, b) => a.start - b.start)\n    this._runnerIds = this._runners.map((info) => info.runner.id)\n\n    this.updateTime()._continue()\n    return this\n  }\n\n  seek(dt) {\n    return this.time(this._time + dt)\n  }\n\n  source(fn) {\n    if (fn == null) return this._timeSource\n    this._timeSource = fn\n    return this\n  }\n\n  speed(speed) {\n    if (speed == null) return this._speed\n    this._speed = speed\n    return this\n  }\n\n  stop() {\n    // Go to start and pause\n    this.time(0)\n    return this.pause()\n  }\n\n  time(time) {\n    if (time == null) return this._time\n    this._time = time\n    return this._continue(true)\n  }\n\n  // Remove the runner from this timeline\n  unschedule(runner) {\n    const index = this._runnerIds.indexOf(runner.id)\n    if (index < 0) return this\n\n    this._runners.splice(index, 1)\n    this._runnerIds.splice(index, 1)\n\n    runner.timeline(null)\n    return this\n  }\n\n  // Makes sure, that after pausing the time doesn't jump\n  updateTime() {\n    if (!this.active()) {\n      this._lastSourceTime = this._timeSource()\n    }\n    return this\n  }\n\n  // Checks if we are running and continues the animation\n  _continue(immediateStep = false) {\n    Animator.cancelFrame(this._nextFrame)\n    this._nextFrame = null\n\n    if (immediateStep) return this._stepImmediate()\n    if (this._paused) return this\n\n    this._nextFrame = Animator.frame(this._step)\n    return this\n  }\n\n  _stepFn(immediateStep = false) {\n    // Get the time delta from the last time and update the time\n    const time = this._timeSource()\n    let dtSource = time - this._lastSourceTime\n\n    if (immediateStep) dtSource = 0\n\n    const dtTime = this._speed * dtSource + (this._time - this._lastStepTime)\n    this._lastSourceTime = time\n\n    // Only update the time if we use the timeSource.\n    // Otherwise use the current time\n    if (!immediateStep) {\n      // Update the time\n      this._time += dtTime\n      this._time = this._time < 0 ? 0 : this._time\n    }\n    this._lastStepTime = this._time\n    this.fire('time', this._time)\n\n    // This is for the case that the timeline was seeked so that the time\n    // is now before the startTime of the runner. That is why we need to set\n    // the runner to position 0\n\n    // FIXME:\n    // However, resetting in insertion order leads to bugs. Considering the case,\n    // where 2 runners change the same attribute but in different times,\n    // resetting both of them will lead to the case where the later defined\n    // runner always wins the reset even if the other runner started earlier\n    // and therefore should win the attribute battle\n    // this can be solved by resetting them backwards\n    for (let k = this._runners.length; k--; ) {\n      // Get and run the current runner and ignore it if its inactive\n      const runnerInfo = this._runners[k]\n      const runner = runnerInfo.runner\n\n      // Make sure that we give the actual difference\n      // between runner start time and now\n      const dtToStart = this._time - runnerInfo.start\n\n      // Dont run runner if not started yet\n      // and try to reset it\n      if (dtToStart <= 0) {\n        runner.reset()\n      }\n    }\n\n    // Run all of the runners directly\n    let runnersLeft = false\n    for (let i = 0, len = this._runners.length; i < len; i++) {\n      // Get and run the current runner and ignore it if its inactive\n      const runnerInfo = this._runners[i]\n      const runner = runnerInfo.runner\n      let dt = dtTime\n\n      // Make sure that we give the actual difference\n      // between runner start time and now\n      const dtToStart = this._time - runnerInfo.start\n\n      // Dont run runner if not started yet\n      if (dtToStart <= 0) {\n        runnersLeft = true\n        continue\n      } else if (dtToStart < dt) {\n        // Adjust dt to make sure that animation is on point\n        dt = dtToStart\n      }\n\n      if (!runner.active()) continue\n\n      // If this runner is still going, signal that we need another animation\n      // frame, otherwise, remove the completed runner\n      const finished = runner.step(dt).done\n      if (!finished) {\n        runnersLeft = true\n        // continue\n      } else if (runnerInfo.persist !== true) {\n        // runner is finished. And runner might get removed\n        const endTime = runner.duration() - runner.time() + this._time\n\n        if (endTime + runnerInfo.persist < this._time) {\n          // Delete runner and correct index\n          runner.unschedule()\n          --i\n          --len\n        }\n      }\n    }\n\n    // Basically: we continue when there are runners right from us in time\n    // when -->, and when runners are left from us when <--\n    if (\n      (runnersLeft && !(this._speed < 0 && this._time === 0)) ||\n      (this._runnerIds.length && this._speed < 0 && this._time > 0)\n    ) {\n      this._continue()\n    } else {\n      this.pause()\n      this.fire('finished')\n    }\n\n    return this\n  }\n\n  terminate() {\n    // cleanup memory\n\n    // Store the timing variables\n    this._startTime = 0\n    this._speed = 1.0\n\n    // Determines how long a runner is hold in memory. Can be a dt or true/false\n    this._persist = 0\n\n    // Keep track of the running animations and their starting parameters\n    this._nextFrame = null\n    this._paused = true\n    this._runners = []\n    this._runnerIds = []\n    this._lastRunnerId = -1\n    this._time = 0\n    this._lastSourceTime = 0\n    this._lastStepTime = 0\n\n    // Make sure that step is always called in class context\n    this._step = this._stepFn.bind(this, false)\n    this._stepImmediate = this._stepFn.bind(this, true)\n  }\n}\n\nregisterMethods({\n  Element: {\n    timeline: function (timeline) {\n      if (timeline == null) {\n        this._timeline = this._timeline || new Timeline()\n        return this._timeline\n      } else {\n        this._timeline = timeline\n        return this\n      }\n    }\n  }\n})\n","import { Controller, Ease, Stepper } from './Controller.js'\nimport { extend, register } from '../utils/adopter.js'\nimport { from, to } from '../modules/core/gradiented.js'\nimport { getOrigin } from '../utils/utils.js'\nimport { noop, timeline } from '../modules/core/defaults.js'\nimport { registerMethods } from '../utils/methods.js'\nimport { rx, ry } from '../modules/core/circled.js'\nimport Animator from './Animator.js'\nimport Box from '../types/Box.js'\nimport EventTarget from '../types/EventTarget.js'\nimport Matrix from '../types/Matrix.js'\nimport Morphable, { TransformBag, ObjectBag } from './Morphable.js'\nimport Point from '../types/Point.js'\nimport SVGNumber from '../types/SVGNumber.js'\nimport Timeline from './Timeline.js'\n\nexport default class Runner extends EventTarget {\n  constructor(options) {\n    super()\n\n    // Store a unique id on the runner, so that we can identify it later\n    this.id = Runner.id++\n\n    // Ensure a default value\n    options = options == null ? timeline.duration : options\n\n    // Ensure that we get a controller\n    options = typeof options === 'function' ? new Controller(options) : options\n\n    // Declare all of the variables\n    this._element = null\n    this._timeline = null\n    this.done = false\n    this._queue = []\n\n    // Work out the stepper and the duration\n    this._duration = typeof options === 'number' && options\n    this._isDeclarative = options instanceof Controller\n    this._stepper = this._isDeclarative ? options : new Ease()\n\n    // We copy the current values from the timeline because they can change\n    this._history = {}\n\n    // Store the state of the runner\n    this.enabled = true\n    this._time = 0\n    this._lastTime = 0\n\n    // At creation, the runner is in reset state\n    this._reseted = true\n\n    // Save transforms applied to this runner\n    this.transforms = new Matrix()\n    this.transformId = 1\n\n    // Looping variables\n    this._haveReversed = false\n    this._reverse = false\n    this._loopsDone = 0\n    this._swing = false\n    this._wait = 0\n    this._times = 1\n\n    this._frameId = null\n\n    // Stores how long a runner is stored after being done\n    this._persist = this._isDeclarative ? true : null\n  }\n\n  static sanitise(duration, delay, when) {\n    // Initialise the default parameters\n    let times = 1\n    let swing = false\n    let wait = 0\n    duration = duration ?? timeline.duration\n    delay = delay ?? timeline.delay\n    when = when || 'last'\n\n    // If we have an object, unpack the values\n    if (typeof duration === 'object' && !(duration instanceof Stepper)) {\n      delay = duration.delay ?? delay\n      when = duration.when ?? when\n      swing = duration.swing || swing\n      times = duration.times ?? times\n      wait = duration.wait ?? wait\n      duration = duration.duration ?? timeline.duration\n    }\n\n    return {\n      duration: duration,\n      delay: delay,\n      swing: swing,\n      times: times,\n      wait: wait,\n      when: when\n    }\n  }\n\n  active(enabled) {\n    if (enabled == null) return this.enabled\n    this.enabled = enabled\n    return this\n  }\n\n  /*\n  Private Methods\n  ===============\n  Methods that shouldn't be used externally\n  */\n  addTransform(transform) {\n    this.transforms.lmultiplyO(transform)\n    return this\n  }\n\n  after(fn) {\n    return this.on('finished', fn)\n  }\n\n  animate(duration, delay, when) {\n    const o = Runner.sanitise(duration, delay, when)\n    const runner = new Runner(o.duration)\n    if (this._timeline) runner.timeline(this._timeline)\n    if (this._element) runner.element(this._element)\n    return runner.loop(o).schedule(o.delay, o.when)\n  }\n\n  clearTransform() {\n    this.transforms = new Matrix()\n    return this\n  }\n\n  // TODO: Keep track of all transformations so that deletion is faster\n  clearTransformsFromQueue() {\n    if (\n      !this.done ||\n      !this._timeline ||\n      !this._timeline._runnerIds.includes(this.id)\n    ) {\n      this._queue = this._queue.filter((item) => {\n        return !item.isTransform\n      })\n    }\n  }\n\n  delay(delay) {\n    return this.animate(0, delay)\n  }\n\n  duration() {\n    return this._times * (this._wait + this._duration) - this._wait\n  }\n\n  during(fn) {\n    return this.queue(null, fn)\n  }\n\n  ease(fn) {\n    this._stepper = new Ease(fn)\n    return this\n  }\n  /*\n  Runner Definitions\n  ==================\n  These methods help us define the runtime behaviour of the Runner or they\n  help us make new runners from the current runner\n  */\n\n  element(element) {\n    if (element == null) return this._element\n    this._element = element\n    element._prepareRunner()\n    return this\n  }\n\n  finish() {\n    return this.step(Infinity)\n  }\n\n  loop(times, swing, wait) {\n    // Deal with the user passing in an object\n    if (typeof times === 'object') {\n      swing = times.swing\n      wait = times.wait\n      times = times.times\n    }\n\n    // Sanitise the values and store them\n    this._times = times || Infinity\n    this._swing = swing || false\n    this._wait = wait || 0\n\n    // Allow true to be passed\n    if (this._times === true) {\n      this._times = Infinity\n    }\n\n    return this\n  }\n\n  loops(p) {\n    const loopDuration = this._duration + this._wait\n    if (p == null) {\n      const loopsDone = Math.floor(this._time / loopDuration)\n      const relativeTime = this._time - loopsDone * loopDuration\n      const position = relativeTime / this._duration\n      return Math.min(loopsDone + position, this._times)\n    }\n    const whole = Math.floor(p)\n    const partial = p % 1\n    const time = loopDuration * whole + this._duration * partial\n    return this.time(time)\n  }\n\n  persist(dtOrForever) {\n    if (dtOrForever == null) return this._persist\n    this._persist = dtOrForever\n    return this\n  }\n\n  position(p) {\n    // Get all of the variables we need\n    const x = this._time\n    const d = this._duration\n    const w = this._wait\n    const t = this._times\n    const s = this._swing\n    const r = this._reverse\n    let position\n\n    if (p == null) {\n      /*\n      This function converts a time to a position in the range [0, 1]\n      The full explanation can be found in this desmos demonstration\n        https://www.desmos.com/calculator/u4fbavgche\n      The logic is slightly simplified here because we can use booleans\n      */\n\n      // Figure out the value without thinking about the start or end time\n      const f = function (x) {\n        const swinging = s * Math.floor((x % (2 * (w + d))) / (w + d))\n        const backwards = (swinging && !r) || (!swinging && r)\n        const uncliped =\n          (Math.pow(-1, backwards) * (x % (w + d))) / d + backwards\n        const clipped = Math.max(Math.min(uncliped, 1), 0)\n        return clipped\n      }\n\n      // Figure out the value by incorporating the start time\n      const endTime = t * (w + d) - w\n      position =\n        x <= 0\n          ? Math.round(f(1e-5))\n          : x < endTime\n            ? f(x)\n            : Math.round(f(endTime - 1e-5))\n      return position\n    }\n\n    // Work out the loops done and add the position to the loops done\n    const loopsDone = Math.floor(this.loops())\n    const swingForward = s && loopsDone % 2 === 0\n    const forwards = (swingForward && !r) || (r && swingForward)\n    position = loopsDone + (forwards ? p : 1 - p)\n    return this.loops(position)\n  }\n\n  progress(p) {\n    if (p == null) {\n      return Math.min(1, this._time / this.duration())\n    }\n    return this.time(p * this.duration())\n  }\n\n  /*\n  Basic Functionality\n  ===================\n  These methods allow us to attach basic functions to the runner directly\n  */\n  queue(initFn, runFn, retargetFn, isTransform) {\n    this._queue.push({\n      initialiser: initFn || noop,\n      runner: runFn || noop,\n      retarget: retargetFn,\n      isTransform: isTransform,\n      initialised: false,\n      finished: false\n    })\n    const timeline = this.timeline()\n    timeline && this.timeline()._continue()\n    return this\n  }\n\n  reset() {\n    if (this._reseted) return this\n    this.time(0)\n    this._reseted = true\n    return this\n  }\n\n  reverse(reverse) {\n    this._reverse = reverse == null ? !this._reverse : reverse\n    return this\n  }\n\n  schedule(timeline, delay, when) {\n    // The user doesn't need to pass a timeline if we already have one\n    if (!(timeline instanceof Timeline)) {\n      when = delay\n      delay = timeline\n      timeline = this.timeline()\n    }\n\n    // If there is no timeline, yell at the user...\n    if (!timeline) {\n      throw Error('Runner cannot be scheduled without timeline')\n    }\n\n    // Schedule the runner on the timeline provided\n    timeline.schedule(this, delay, when)\n    return this\n  }\n\n  step(dt) {\n    // If we are inactive, this stepper just gets skipped\n    if (!this.enabled) return this\n\n    // Update the time and get the new position\n    dt = dt == null ? 16 : dt\n    this._time += dt\n    const position = this.position()\n\n    // Figure out if we need to run the stepper in this frame\n    const running = this._lastPosition !== position && this._time >= 0\n    this._lastPosition = position\n\n    // Figure out if we just started\n    const duration = this.duration()\n    const justStarted = this._lastTime <= 0 && this._time > 0\n    const justFinished = this._lastTime < duration && this._time >= duration\n\n    this._lastTime = this._time\n    if (justStarted) {\n      this.fire('start', this)\n    }\n\n    // Work out if the runner is finished set the done flag here so animations\n    // know, that they are running in the last step (this is good for\n    // transformations which can be merged)\n    const declarative = this._isDeclarative\n    this.done = !declarative && !justFinished && this._time >= duration\n\n    // Runner is running. So its not in reset state anymore\n    this._reseted = false\n\n    let converged = false\n    // Call initialise and the run function\n    if (running || declarative) {\n      this._initialise(running)\n\n      // clear the transforms on this runner so they dont get added again and again\n      this.transforms = new Matrix()\n      converged = this._run(declarative ? dt : position)\n\n      this.fire('step', this)\n    }\n    // correct the done flag here\n    // declarative animations itself know when they converged\n    this.done = this.done || (converged && declarative)\n    if (justFinished) {\n      this.fire('finished', this)\n    }\n    return this\n  }\n\n  /*\n  Runner animation methods\n  ========================\n  Control how the animation plays\n  */\n  time(time) {\n    if (time == null) {\n      return this._time\n    }\n    const dt = time - this._time\n    this.step(dt)\n    return this\n  }\n\n  timeline(timeline) {\n    // check explicitly for undefined so we can set the timeline to null\n    if (typeof timeline === 'undefined') return this._timeline\n    this._timeline = timeline\n    return this\n  }\n\n  unschedule() {\n    const timeline = this.timeline()\n    timeline && timeline.unschedule(this)\n    return this\n  }\n\n  // Run each initialise function in the runner if required\n  _initialise(running) {\n    // If we aren't running, we shouldn't initialise when not declarative\n    if (!running && !this._isDeclarative) return\n\n    // Loop through all of the initialisers\n    for (let i = 0, len = this._queue.length; i < len; ++i) {\n      // Get the current initialiser\n      const current = this._queue[i]\n\n      // Determine whether we need to initialise\n      const needsIt = this._isDeclarative || (!current.initialised && running)\n      running = !current.finished\n\n      // Call the initialiser if we need to\n      if (needsIt && running) {\n        current.initialiser.call(this)\n        current.initialised = true\n      }\n    }\n  }\n\n  // Save a morpher to the morpher list so that we can retarget it later\n  _rememberMorpher(method, morpher) {\n    this._history[method] = {\n      morpher: morpher,\n      caller: this._queue[this._queue.length - 1]\n    }\n\n    // We have to resume the timeline in case a controller\n    // is already done without being ever run\n    // This can happen when e.g. this is done:\n    //    anim = el.animate(new SVG.Spring)\n    // and later\n    //    anim.move(...)\n    if (this._isDeclarative) {\n      const timeline = this.timeline()\n      timeline && timeline.play()\n    }\n  }\n\n  // Try to set the target for a morpher if the morpher exists, otherwise\n  // Run each run function for the position or dt given\n  _run(positionOrDt) {\n    // Run all of the _queue directly\n    let allfinished = true\n    for (let i = 0, len = this._queue.length; i < len; ++i) {\n      // Get the current function to run\n      const current = this._queue[i]\n\n      // Run the function if its not finished, we keep track of the finished\n      // flag for the sake of declarative _queue\n      const converged = current.runner.call(this, positionOrDt)\n      current.finished = current.finished || converged === true\n      allfinished = allfinished && current.finished\n    }\n\n    // We report when all of the constructors are finished\n    return allfinished\n  }\n\n  // do nothing and return false\n  _tryRetarget(method, target, extra) {\n    if (this._history[method]) {\n      // if the last method wasn't even initialised, throw it away\n      if (!this._history[method].caller.initialised) {\n        const index = this._queue.indexOf(this._history[method].caller)\n        this._queue.splice(index, 1)\n        return false\n      }\n\n      // for the case of transformations, we use the special retarget function\n      // which has access to the outer scope\n      if (this._history[method].caller.retarget) {\n        this._history[method].caller.retarget.call(this, target, extra)\n        // for everything else a simple morpher change is sufficient\n      } else {\n        this._history[method].morpher.to(target)\n      }\n\n      this._history[method].caller.finished = false\n      const timeline = this.timeline()\n      timeline && timeline.play()\n      return true\n    }\n    return false\n  }\n}\n\nRunner.id = 0\n\nexport class FakeRunner {\n  constructor(transforms = new Matrix(), id = -1, done = true) {\n    this.transforms = transforms\n    this.id = id\n    this.done = done\n  }\n\n  clearTransformsFromQueue() {}\n}\n\nextend([Runner, FakeRunner], {\n  mergeWith(runner) {\n    return new FakeRunner(\n      runner.transforms.lmultiply(this.transforms),\n      runner.id\n    )\n  }\n})\n\n// FakeRunner.emptyRunner = new FakeRunner()\n\nconst lmultiply = (last, curr) => last.lmultiplyO(curr)\nconst getRunnerTransform = (runner) => runner.transforms\n\nfunction mergeTransforms() {\n  // Find the matrix to apply to the element and apply it\n  const runners = this._transformationRunners.runners\n  const netTransform = runners\n    .map(getRunnerTransform)\n    .reduce(lmultiply, new Matrix())\n\n  this.transform(netTransform)\n\n  this._transformationRunners.merge()\n\n  if (this._transformationRunners.length() === 1) {\n    this._frameId = null\n  }\n}\n\nexport class RunnerArray {\n  constructor() {\n    this.runners = []\n    this.ids = []\n  }\n\n  add(runner) {\n    if (this.runners.includes(runner)) return\n    const id = runner.id + 1\n\n    this.runners.push(runner)\n    this.ids.push(id)\n\n    return this\n  }\n\n  clearBefore(id) {\n    const deleteCnt = this.ids.indexOf(id + 1) || 1\n    this.ids.splice(0, deleteCnt, 0)\n    this.runners\n      .splice(0, deleteCnt, new FakeRunner())\n      .forEach((r) => r.clearTransformsFromQueue())\n    return this\n  }\n\n  edit(id, newRunner) {\n    const index = this.ids.indexOf(id + 1)\n    this.ids.splice(index, 1, id + 1)\n    this.runners.splice(index, 1, newRunner)\n    return this\n  }\n\n  getByID(id) {\n    return this.runners[this.ids.indexOf(id + 1)]\n  }\n\n  length() {\n    return this.ids.length\n  }\n\n  merge() {\n    let lastRunner = null\n    for (let i = 0; i < this.runners.length; ++i) {\n      const runner = this.runners[i]\n\n      const condition =\n        lastRunner &&\n        runner.done &&\n        lastRunner.done &&\n        // don't merge runner when persisted on timeline\n        (!runner._timeline ||\n          !runner._timeline._runnerIds.includes(runner.id)) &&\n        (!lastRunner._timeline ||\n          !lastRunner._timeline._runnerIds.includes(lastRunner.id))\n\n      if (condition) {\n        // the +1 happens in the function\n        this.remove(runner.id)\n        const newRunner = runner.mergeWith(lastRunner)\n        this.edit(lastRunner.id, newRunner)\n        lastRunner = newRunner\n        --i\n      } else {\n        lastRunner = runner\n      }\n    }\n\n    return this\n  }\n\n  remove(id) {\n    const index = this.ids.indexOf(id + 1)\n    this.ids.splice(index, 1)\n    this.runners.splice(index, 1)\n    return this\n  }\n}\n\nregisterMethods({\n  Element: {\n    animate(duration, delay, when) {\n      const o = Runner.sanitise(duration, delay, when)\n      const timeline = this.timeline()\n      return new Runner(o.duration)\n        .loop(o)\n        .element(this)\n        .timeline(timeline.play())\n        .schedule(o.delay, o.when)\n    },\n\n    delay(by, when) {\n      return this.animate(0, by, when)\n    },\n\n    // this function searches for all runners on the element and deletes the ones\n    // which run before the current one. This is because absolute transformations\n    // overwrite anything anyway so there is no need to waste time computing\n    // other runners\n    _clearTransformRunnersBefore(currentRunner) {\n      this._transformationRunners.clearBefore(currentRunner.id)\n    },\n\n    _currentTransform(current) {\n      return (\n        this._transformationRunners.runners\n          // we need the equal sign here to make sure, that also transformations\n          // on the same runner which execute before the current transformation are\n          // taken into account\n          .filter((runner) => runner.id <= current.id)\n          .map(getRunnerTransform)\n          .reduce(lmultiply, new Matrix())\n      )\n    },\n\n    _addRunner(runner) {\n      this._transformationRunners.add(runner)\n\n      // Make sure that the runner merge is executed at the very end of\n      // all Animator functions. That is why we use immediate here to execute\n      // the merge right after all frames are run\n      Animator.cancelImmediate(this._frameId)\n      this._frameId = Animator.immediate(mergeTransforms.bind(this))\n    },\n\n    _prepareRunner() {\n      if (this._frameId == null) {\n        this._transformationRunners = new RunnerArray().add(\n          new FakeRunner(new Matrix(this))\n        )\n      }\n    }\n  }\n})\n\n// Will output the elements from array A that are not in the array B\nconst difference = (a, b) => a.filter((x) => !b.includes(x))\n\nextend(Runner, {\n  attr(a, v) {\n    return this.styleAttr('attr', a, v)\n  },\n\n  // Add animatable styles\n  css(s, v) {\n    return this.styleAttr('css', s, v)\n  },\n\n  styleAttr(type, nameOrAttrs, val) {\n    if (typeof nameOrAttrs === 'string') {\n      return this.styleAttr(type, { [nameOrAttrs]: val })\n    }\n\n    let attrs = nameOrAttrs\n    if (this._tryRetarget(type, attrs)) return this\n\n    let morpher = new Morphable(this._stepper).to(attrs)\n    let keys = Object.keys(attrs)\n\n    this.queue(\n      function () {\n        morpher = morpher.from(this.element()[type](keys))\n      },\n      function (pos) {\n        this.element()[type](morpher.at(pos).valueOf())\n        return morpher.done()\n      },\n      function (newToAttrs) {\n        // Check if any new keys were added\n        const newKeys = Object.keys(newToAttrs)\n        const differences = difference(newKeys, keys)\n\n        // If their are new keys, initialize them and add them to morpher\n        if (differences.length) {\n          // Get the values\n          const addedFromAttrs = this.element()[type](differences)\n\n          // Get the already initialized values\n          const oldFromAttrs = new ObjectBag(morpher.from()).valueOf()\n\n          // Merge old and new\n          Object.assign(oldFromAttrs, addedFromAttrs)\n          morpher.from(oldFromAttrs)\n        }\n\n        // Get the object from the morpher\n        const oldToAttrs = new ObjectBag(morpher.to()).valueOf()\n\n        // Merge in new attributes\n        Object.assign(oldToAttrs, newToAttrs)\n\n        // Change morpher target\n        morpher.to(oldToAttrs)\n\n        // Make sure that we save the work we did so we don't need it to do again\n        keys = newKeys\n        attrs = newToAttrs\n      }\n    )\n\n    this._rememberMorpher(type, morpher)\n    return this\n  },\n\n  zoom(level, point) {\n    if (this._tryRetarget('zoom', level, point)) return this\n\n    let morpher = new Morphable(this._stepper).to(new SVGNumber(level))\n\n    this.queue(\n      function () {\n        morpher = morpher.from(this.element().zoom())\n      },\n      function (pos) {\n        this.element().zoom(morpher.at(pos), point)\n        return morpher.done()\n      },\n      function (newLevel, newPoint) {\n        point = newPoint\n        morpher.to(newLevel)\n      }\n    )\n\n    this._rememberMorpher('zoom', morpher)\n    return this\n  },\n\n  /**\n   ** absolute transformations\n   **/\n\n  //\n  // M v -----|-----(D M v = F v)------|----->  T v\n  //\n  // 1. define the final state (T) and decompose it (once)\n  //    t = [tx, ty, the, lam, sy, sx]\n  // 2. on every frame: pull the current state of all previous transforms\n  //    (M - m can change)\n  //   and then write this as m = [tx0, ty0, the0, lam0, sy0, sx0]\n  // 3. Find the interpolated matrix F(pos) = m + pos * (t - m)\n  //   - Note F(0) = M\n  //   - Note F(1) = T\n  // 4. Now you get the delta matrix as a result: D = F * inv(M)\n\n  transform(transforms, relative, affine) {\n    // If we have a declarative function, we should retarget it if possible\n    relative = transforms.relative || relative\n    if (\n      this._isDeclarative &&\n      !relative &&\n      this._tryRetarget('transform', transforms)\n    ) {\n      return this\n    }\n\n    // Parse the parameters\n    const isMatrix = Matrix.isMatrixLike(transforms)\n    affine =\n      transforms.affine != null\n        ? transforms.affine\n        : affine != null\n          ? affine\n          : !isMatrix\n\n    // Create a morpher and set its type\n    const morpher = new Morphable(this._stepper).type(\n      affine ? TransformBag : Matrix\n    )\n\n    let origin\n    let element\n    let current\n    let currentAngle\n    let startTransform\n\n    function setup() {\n      // make sure element and origin is defined\n      element = element || this.element()\n      origin = origin || getOrigin(transforms, element)\n\n      startTransform = new Matrix(relative ? undefined : element)\n\n      // add the runner to the element so it can merge transformations\n      element._addRunner(this)\n\n      // Deactivate all transforms that have run so far if we are absolute\n      if (!relative) {\n        element._clearTransformRunnersBefore(this)\n      }\n    }\n\n    function run(pos) {\n      // clear all other transforms before this in case something is saved\n      // on this runner. We are absolute. We dont need these!\n      if (!relative) this.clearTransform()\n\n      const { x, y } = new Point(origin).transform(\n        element._currentTransform(this)\n      )\n\n      let target = new Matrix({ ...transforms, origin: [x, y] })\n      let start = this._isDeclarative && current ? current : startTransform\n\n      if (affine) {\n        target = target.decompose(x, y)\n        start = start.decompose(x, y)\n\n        // Get the current and target angle as it was set\n        const rTarget = target.rotate\n        const rCurrent = start.rotate\n\n        // Figure out the shortest path to rotate directly\n        const possibilities = [rTarget - 360, rTarget, rTarget + 360]\n        const distances = possibilities.map((a) => Math.abs(a - rCurrent))\n        const shortest = Math.min(...distances)\n        const index = distances.indexOf(shortest)\n        target.rotate = possibilities[index]\n      }\n\n      if (relative) {\n        // we have to be careful here not to overwrite the rotation\n        // with the rotate method of Matrix\n        if (!isMatrix) {\n          target.rotate = transforms.rotate || 0\n        }\n        if (this._isDeclarative && currentAngle) {\n          start.rotate = currentAngle\n        }\n      }\n\n      morpher.from(start)\n      morpher.to(target)\n\n      const affineParameters = morpher.at(pos)\n      currentAngle = affineParameters.rotate\n      current = new Matrix(affineParameters)\n\n      this.addTransform(current)\n      element._addRunner(this)\n      return morpher.done()\n    }\n\n    function retarget(newTransforms) {\n      // only get a new origin if it changed since the last call\n      if (\n        (newTransforms.origin || 'center').toString() !==\n        (transforms.origin || 'center').toString()\n      ) {\n        origin = getOrigin(newTransforms, element)\n      }\n\n      // overwrite the old transformations with the new ones\n      transforms = { ...newTransforms, origin }\n    }\n\n    this.queue(setup, run, retarget, true)\n    this._isDeclarative && this._rememberMorpher('transform', morpher)\n    return this\n  },\n\n  // Animatable x-axis\n  x(x) {\n    return this._queueNumber('x', x)\n  },\n\n  // Animatable y-axis\n  y(y) {\n    return this._queueNumber('y', y)\n  },\n\n  ax(x) {\n    return this._queueNumber('ax', x)\n  },\n\n  ay(y) {\n    return this._queueNumber('ay', y)\n  },\n\n  dx(x = 0) {\n    return this._queueNumberDelta('x', x)\n  },\n\n  dy(y = 0) {\n    return this._queueNumberDelta('y', y)\n  },\n\n  dmove(x, y) {\n    return this.dx(x).dy(y)\n  },\n\n  _queueNumberDelta(method, to) {\n    to = new SVGNumber(to)\n\n    // Try to change the target if we have this method already registered\n    if (this._tryRetarget(method, to)) return this\n\n    // Make a morpher and queue the animation\n    const morpher = new Morphable(this._stepper).to(to)\n    let from = null\n    this.queue(\n      function () {\n        from = this.element()[method]()\n        morpher.from(from)\n        morpher.to(from + to)\n      },\n      function (pos) {\n        this.element()[method](morpher.at(pos))\n        return morpher.done()\n      },\n      function (newTo) {\n        morpher.to(from + new SVGNumber(newTo))\n      }\n    )\n\n    // Register the morpher so that if it is changed again, we can retarget it\n    this._rememberMorpher(method, morpher)\n    return this\n  },\n\n  _queueObject(method, to) {\n    // Try to change the target if we have this method already registered\n    if (this._tryRetarget(method, to)) return this\n\n    // Make a morpher and queue the animation\n    const morpher = new Morphable(this._stepper).to(to)\n    this.queue(\n      function () {\n        morpher.from(this.element()[method]())\n      },\n      function (pos) {\n        this.element()[method](morpher.at(pos))\n        return morpher.done()\n      }\n    )\n\n    // Register the morpher so that if it is changed again, we can retarget it\n    this._rememberMorpher(method, morpher)\n    return this\n  },\n\n  _queueNumber(method, value) {\n    return this._queueObject(method, new SVGNumber(value))\n  },\n\n  // Animatable center x-axis\n  cx(x) {\n    return this._queueNumber('cx', x)\n  },\n\n  // Animatable center y-axis\n  cy(y) {\n    return this._queueNumber('cy', y)\n  },\n\n  // Add animatable move\n  move(x, y) {\n    return this.x(x).y(y)\n  },\n\n  amove(x, y) {\n    return this.ax(x).ay(y)\n  },\n\n  // Add animatable center\n  center(x, y) {\n    return this.cx(x).cy(y)\n  },\n\n  // Add animatable size\n  size(width, height) {\n    // animate bbox based size for all other elements\n    let box\n\n    if (!width || !height) {\n      box = this._element.bbox()\n    }\n\n    if (!width) {\n      width = (box.width / box.height) * height\n    }\n\n    if (!height) {\n      height = (box.height / box.width) * width\n    }\n\n    return this.width(width).height(height)\n  },\n\n  // Add animatable width\n  width(width) {\n    return this._queueNumber('width', width)\n  },\n\n  // Add animatable height\n  height(height) {\n    return this._queueNumber('height', height)\n  },\n\n  // Add animatable plot\n  plot(a, b, c, d) {\n    // Lines can be plotted with 4 arguments\n    if (arguments.length === 4) {\n      return this.plot([a, b, c, d])\n    }\n\n    if (this._tryRetarget('plot', a)) return this\n\n    const morpher = new Morphable(this._stepper)\n      .type(this._element.MorphArray)\n      .to(a)\n\n    this.queue(\n      function () {\n        morpher.from(this._element.array())\n      },\n      function (pos) {\n        this._element.plot(morpher.at(pos))\n        return morpher.done()\n      }\n    )\n\n    this._rememberMorpher('plot', morpher)\n    return this\n  },\n\n  // Add leading method\n  leading(value) {\n    return this._queueNumber('leading', value)\n  },\n\n  // Add animatable viewbox\n  viewbox(x, y, width, height) {\n    return this._queueObject('viewbox', new Box(x, y, width, height))\n  },\n\n  update(o) {\n    if (typeof o !== 'object') {\n      return this.update({\n        offset: arguments[0],\n        color: arguments[1],\n        opacity: arguments[2]\n      })\n    }\n\n    if (o.opacity != null) this.attr('stop-opacity', o.opacity)\n    if (o.color != null) this.attr('stop-color', o.color)\n    if (o.offset != null) this.attr('offset', o.offset)\n\n    return this\n  }\n})\n\nextend(Runner, { rx, ry, from, to })\nregister(Runner, 'Runner')\n","import {\n  adopt,\n  nodeOrNew,\n  register,\n  wrapWithAttrCheck\n} from '../utils/adopter.js'\nimport { svg, xlink, xmlns } from '../modules/core/namespaces.js'\nimport { registerMethods } from '../utils/methods.js'\nimport Container from './Container.js'\nimport Defs from './Defs.js'\nimport { globals } from '../utils/window.js'\n\nexport default class Svg extends Container {\n  constructor(node, attrs = node) {\n    super(nodeOrNew('svg', node), attrs)\n    this.namespace()\n  }\n\n  // Creates and returns defs element\n  defs() {\n    if (!this.isRoot()) return this.root().defs()\n\n    return adopt(this.node.querySelector('defs')) || this.put(new Defs())\n  }\n\n  isRoot() {\n    return (\n      !this.node.parentNode ||\n      (!(this.node.parentNode instanceof globals.window.SVGElement) &&\n        this.node.parentNode.nodeName !== '#document-fragment')\n    )\n  }\n\n  // Add namespaces\n  namespace() {\n    if (!this.isRoot()) return this.root().namespace()\n    return this.attr({ xmlns: svg, version: '1.1' }).attr(\n      'xmlns:xlink',\n      xlink,\n      xmlns\n    )\n  }\n\n  removeNamespace() {\n    return this.attr({ xmlns: null, version: null })\n      .attr('xmlns:xlink', null, xmlns)\n      .attr('xmlns:svgjs', null, xmlns)\n  }\n\n  // Check if this is a root svg\n  // If not, call root() from this element\n  root() {\n    if (this.isRoot()) return this\n    return super.root()\n  }\n}\n\nregisterMethods({\n  Container: {\n    // Create nested svg document\n    nested: wrapWithAttrCheck(function () {\n      return this.put(new Svg())\n    })\n  }\n})\n\nregister(Svg, 'Svg', true)\n","import { nodeOrNew, register, wrapWithAttrCheck } from '../utils/adopter.js'\nimport { registerMethods } from '../utils/methods.js'\nimport Container from './Container.js'\n\nexport default class Symbol extends Container {\n  // Initialize node\n  constructor(node, attrs = node) {\n    super(nodeOrNew('symbol', node), attrs)\n  }\n}\n\nregisterMethods({\n  Container: {\n    symbol: wrapWithAttrCheck(function () {\n      return this.put(new Symbol())\n    })\n  }\n})\n\nregister(Symbol, 'Symbol')\n","import { globals } from '../../utils/window.js'\n\n// Create plain text node\nexport function plain(text) {\n  // clear if build mode is disabled\n  if (this._build === false) {\n    this.clear()\n  }\n\n  // create text node\n  this.node.appendChild(globals.document.createTextNode(text))\n\n  return this\n}\n\n// Get length of text element\nexport function length() {\n  return this.node.getComputedTextLength()\n}\n\n// Move over x-axis\n// Text is moved by its bounding box\n// text-anchor does NOT matter\nexport function x(x, box = this.bbox()) {\n  if (x == null) {\n    return box.x\n  }\n\n  return this.attr('x', this.attr('x') + x - box.x)\n}\n\n// Move over y-axis\nexport function y(y, box = this.bbox()) {\n  if (y == null) {\n    return box.y\n  }\n\n  return this.attr('y', this.attr('y') + y - box.y)\n}\n\nexport function move(x, y, box = this.bbox()) {\n  return this.x(x, box).y(y, box)\n}\n\n// Move center over x-axis\nexport function cx(x, box = this.bbox()) {\n  if (x == null) {\n    return box.cx\n  }\n\n  return this.attr('x', this.attr('x') + x - box.cx)\n}\n\n// Move center over y-axis\nexport function cy(y, box = this.bbox()) {\n  if (y == null) {\n    return box.cy\n  }\n\n  return this.attr('y', this.attr('y') + y - box.cy)\n}\n\nexport function center(x, y, box = this.bbox()) {\n  return this.cx(x, box).cy(y, box)\n}\n\nexport function ax(x) {\n  return this.attr('x', x)\n}\n\nexport function ay(y) {\n  return this.attr('y', y)\n}\n\nexport function amove(x, y) {\n  return this.ax(x).ay(y)\n}\n\n// Enable / disable build mode\nexport function build(build) {\n  this._build = !!build\n  return this\n}\n","import {\n  adopt,\n  extend,\n  nodeOrNew,\n  register,\n  wrapWithAttrCheck\n} from '../utils/adopter.js'\nimport { registerMethods } from '../utils/methods.js'\nimport SVGNumber from '../types/SVGNumber.js'\nimport Shape from './Shape.js'\nimport { globals } from '../utils/window.js'\nimport * as textable from '../modules/core/textable.js'\nimport { isDescriptive, writeDataToDom } from '../utils/utils.js'\n\nexport default class Text extends Shape {\n  // Initialize node\n  constructor(node, attrs = node) {\n    super(nodeOrNew('text', node), attrs)\n\n    this.dom.leading = this.dom.leading ?? new SVGNumber(1.3) // store leading value for rebuilding\n    this._rebuild = true // enable automatic updating of dy values\n    this._build = false // disable build mode for adding multiple lines\n  }\n\n  // Set / get leading\n  leading(value) {\n    // act as getter\n    if (value == null) {\n      return this.dom.leading\n    }\n\n    // act as setter\n    this.dom.leading = new SVGNumber(value)\n\n    return this.rebuild()\n  }\n\n  // Rebuild appearance type\n  rebuild(rebuild) {\n    // store new rebuild flag if given\n    if (typeof rebuild === 'boolean') {\n      this._rebuild = rebuild\n    }\n\n    // define position of all lines\n    if (this._rebuild) {\n      const self = this\n      let blankLineOffset = 0\n      const leading = this.dom.leading\n\n      this.each(function (i) {\n        if (isDescriptive(this.node)) return\n\n        const fontSize = globals.window\n          .getComputedStyle(this.node)\n          .getPropertyValue('font-size')\n\n        const dy = leading * new SVGNumber(fontSize)\n\n        if (this.dom.newLined) {\n          this.attr('x', self.attr('x'))\n\n          if (this.text() === '\\n') {\n            blankLineOffset += dy\n          } else {\n            this.attr('dy', i ? dy + blankLineOffset : 0)\n            blankLineOffset = 0\n          }\n        }\n      })\n\n      this.fire('rebuild')\n    }\n\n    return this\n  }\n\n  // overwrite method from parent to set data properly\n  setData(o) {\n    this.dom = o\n    this.dom.leading = new SVGNumber(o.leading || 1.3)\n    return this\n  }\n\n  writeDataToDom() {\n    writeDataToDom(this, this.dom, { leading: 1.3 })\n    return this\n  }\n\n  // Set the text content\n  text(text) {\n    // act as getter\n    if (text === undefined) {\n      const children = this.node.childNodes\n      let firstLine = 0\n      text = ''\n\n      for (let i = 0, len = children.length; i < len; ++i) {\n        // skip textPaths - they are no lines\n        if (children[i].nodeName === 'textPath' || isDescriptive(children[i])) {\n          if (i === 0) firstLine = i + 1\n          continue\n        }\n\n        // add newline if its not the first child and newLined is set to true\n        if (\n          i !== firstLine &&\n          children[i].nodeType !== 3 &&\n          adopt(children[i]).dom.newLined === true\n        ) {\n          text += '\\n'\n        }\n\n        // add content of this node\n        text += children[i].textContent\n      }\n\n      return text\n    }\n\n    // remove existing content\n    this.clear().build(true)\n\n    if (typeof text === 'function') {\n      // call block\n      text.call(this, this)\n    } else {\n      // store text and make sure text is not blank\n      text = (text + '').split('\\n')\n\n      // build new lines\n      for (let j = 0, jl = text.length; j < jl; j++) {\n        this.newLine(text[j])\n      }\n    }\n\n    // disable build mode and rebuild lines\n    return this.build(false).rebuild()\n  }\n}\n\nextend(Text, textable)\n\nregisterMethods({\n  Container: {\n    // Create text element\n    text: wrapWithAttrCheck(function (text = '') {\n      return this.put(new Text()).text(text)\n    }),\n\n    // Create plain text element\n    plain: wrapWithAttrCheck(function (text = '') {\n      return this.put(new Text()).plain(text)\n    })\n  }\n})\n\nregister(Text, 'Text')\n","import {\n  extend,\n  nodeOrNew,\n  register,\n  wrapWithAttrCheck\n} from '../utils/adopter.js'\nimport { globals } from '../utils/window.js'\nimport { registerMethods } from '../utils/methods.js'\nimport SVGNumber from '../types/SVGNumber.js'\nimport Shape from './Shape.js'\nimport Text from './Text.js'\nimport * as textable from '../modules/core/textable.js'\n\nexport default class Tspan extends Shape {\n  // Initialize node\n  constructor(node, attrs = node) {\n    super(nodeOrNew('tspan', node), attrs)\n    this._build = false // disable build mode for adding multiple lines\n  }\n\n  // Shortcut dx\n  dx(dx) {\n    return this.attr('dx', dx)\n  }\n\n  // Shortcut dy\n  dy(dy) {\n    return this.attr('dy', dy)\n  }\n\n  // Create new line\n  newLine() {\n    // mark new line\n    this.dom.newLined = true\n\n    // fetch parent\n    const text = this.parent()\n\n    // early return in case we are not in a text element\n    if (!(text instanceof Text)) {\n      return this\n    }\n\n    const i = text.index(this)\n\n    const fontSize = globals.window\n      .getComputedStyle(this.node)\n      .getPropertyValue('font-size')\n    const dy = text.dom.leading * new SVGNumber(fontSize)\n\n    // apply new position\n    return this.dy(i ? dy : 0).attr('x', text.x())\n  }\n\n  // Set text content\n  text(text) {\n    if (text == null)\n      return this.node.textContent + (this.dom.newLined ? '\\n' : '')\n\n    if (typeof text === 'function') {\n      this.clear().build(true)\n      text.call(this, this)\n      this.build(false)\n    } else {\n      this.plain(text)\n    }\n\n    return this\n  }\n}\n\nextend(Tspan, textable)\n\nregisterMethods({\n  Tspan: {\n    tspan: wrapWithAttrCheck(function (text = '') {\n      const tspan = new Tspan()\n\n      // clear if build mode is disabled\n      if (!this._build) {\n        this.clear()\n      }\n\n      // add new tspan\n      return this.put(tspan).text(text)\n    })\n  },\n  Text: {\n    newLine: function (text = '') {\n      return this.tspan(text).newLine()\n    }\n  }\n})\n\nregister(Tspan, 'Tspan')\n","import { cx, cy, height, width, x, y } from '../modules/core/circled.js'\nimport {\n  extend,\n  nodeOrNew,\n  register,\n  wrapWithAttrCheck\n} from '../utils/adopter.js'\nimport { registerMethods } from '../utils/methods.js'\nimport SVGNumber from '../types/SVGNumber.js'\nimport Shape from './Shape.js'\n\nexport default class Circle extends Shape {\n  constructor(node, attrs = node) {\n    super(nodeOrNew('circle', node), attrs)\n  }\n\n  radius(r) {\n    return this.attr('r', r)\n  }\n\n  // Radius x value\n  rx(rx) {\n    return this.attr('r', rx)\n  }\n\n  // Alias radius x value\n  ry(ry) {\n    return this.rx(ry)\n  }\n\n  size(size) {\n    return this.radius(new SVGNumber(size).divide(2))\n  }\n}\n\nextend(Circle, { x, y, cx, cy, width, height })\n\nregisterMethods({\n  Container: {\n    // Create circle element\n    circle: wrapWithAttrCheck(function (size = 0) {\n      return this.put(new Circle()).size(size).move(0, 0)\n    })\n  }\n})\n\nregister(Circle, 'Circle')\n","import { nodeOrNew, register, wrapWithAttrCheck } from '../utils/adopter.js'\nimport { registerMethods } from '../utils/methods.js'\nimport Container from './Container.js'\nimport baseFind from '../modules/core/selector.js'\n\nexport default class ClipPath extends Container {\n  constructor(node, attrs = node) {\n    super(nodeOrNew('clipPath', node), attrs)\n  }\n\n  // Unclip all clipped elements and remove itself\n  remove() {\n    // unclip all targets\n    this.targets().forEach(function (el) {\n      el.unclip()\n    })\n\n    // remove clipPath from parent\n    return super.remove()\n  }\n\n  targets() {\n    return baseFind('svg [clip-path*=' + this.id() + ']')\n  }\n}\n\nregisterMethods({\n  Container: {\n    // Create clipping element\n    clip: wrapWithAttrCheck(function () {\n      return this.defs().put(new ClipPath())\n    })\n  },\n  Element: {\n    // Distribute clipPath to svg element\n    clipper() {\n      return this.reference('clip-path')\n    },\n\n    clipWith(element) {\n      // use given clip or create a new one\n      const clipper =\n        element instanceof ClipPath\n          ? element\n          : this.parent().clip().add(element)\n\n      // apply mask\n      return this.attr('clip-path', 'url(#' + clipper.id() + ')')\n    },\n\n    // Unclip element\n    unclip() {\n      return this.attr('clip-path', null)\n    }\n  }\n})\n\nregister(ClipPath, 'ClipPath')\n","import { nodeOrNew, register, wrapWithAttrCheck } from '../utils/adopter.js'\nimport { registerMethods } from '../utils/methods.js'\nimport Element from './Element.js'\n\nexport default class ForeignObject extends Element {\n  constructor(node, attrs = node) {\n    super(nodeOrNew('foreignObject', node), attrs)\n  }\n}\n\nregisterMethods({\n  Container: {\n    foreignObject: wrapWithAttrCheck(function (width, height) {\n      return this.put(new ForeignObject()).size(width, height)\n    })\n  }\n})\n\nregister(ForeignObject, 'ForeignObject')\n","import Matrix from '../../types/Matrix.js'\nimport Point from '../../types/Point.js'\nimport Box from '../../types/Box.js'\nimport { proportionalSize } from '../../utils/utils.js'\nimport { getWindow } from '../../utils/window.js'\n\nexport function dmove(dx, dy) {\n  this.children().forEach((child) => {\n    let bbox\n\n    // We have to wrap this for elements that dont have a bbox\n    // e.g. title and other descriptive elements\n    try {\n      // Get the childs bbox\n      // Bug: https://bugzilla.mozilla.org/show_bug.cgi?id=1905039\n      // Because bbox for nested svgs returns the contents bbox in the coordinate space of the svg itself (weird!), we cant use bbox for svgs\n      // Therefore we have to use getBoundingClientRect. But THAT is broken (as explained in the bug).\n      // Funnily enough the broken behavior would work for us but that breaks it in chrome\n      // So we have to replicate the broken behavior of FF by just reading the attributes of the svg itself\n      bbox =\n        child.node instanceof getWindow().SVGSVGElement\n          ? new Box(child.attr(['x', 'y', 'width', 'height']))\n          : child.bbox()\n    } catch (e) {\n      return\n    }\n\n    // Get childs matrix\n    const m = new Matrix(child)\n    // Translate childs matrix by amount and\n    // transform it back into parents space\n    const matrix = m.translate(dx, dy).transform(m.inverse())\n    // Calculate new x and y from old box\n    const p = new Point(bbox.x, bbox.y).transform(matrix)\n    // Move element\n    child.move(p.x, p.y)\n  })\n\n  return this\n}\n\nexport function dx(dx) {\n  return this.dmove(dx, 0)\n}\n\nexport function dy(dy) {\n  return this.dmove(0, dy)\n}\n\nexport function height(height, box = this.bbox()) {\n  if (height == null) return box.height\n  return this.size(box.width, height, box)\n}\n\nexport function move(x = 0, y = 0, box = this.bbox()) {\n  const dx = x - box.x\n  const dy = y - box.y\n\n  return this.dmove(dx, dy)\n}\n\nexport function size(width, height, box = this.bbox()) {\n  const p = proportionalSize(this, width, height, box)\n  const scaleX = p.width / box.width\n  const scaleY = p.height / box.height\n\n  this.children().forEach((child) => {\n    const o = new Point(box).transform(new Matrix(child).inverse())\n    child.scale(scaleX, scaleY, o.x, o.y)\n  })\n\n  return this\n}\n\nexport function width(width, box = this.bbox()) {\n  if (width == null) return box.width\n  return this.size(width, box.height, box)\n}\n\nexport function x(x, box = this.bbox()) {\n  if (x == null) return box.x\n  return this.move(x, box.y, box)\n}\n\nexport function y(y, box = this.bbox()) {\n  if (y == null) return box.y\n  return this.move(box.x, y, box)\n}\n","import {\n  nodeOrNew,\n  register,\n  wrapWithAttrCheck,\n  extend\n} from '../utils/adopter.js'\nimport { registerMethods } from '../utils/methods.js'\nimport Container from './Container.js'\nimport * as containerGeometry from '../modules/core/containerGeometry.js'\n\nexport default class G extends Container {\n  constructor(node, attrs = node) {\n    super(nodeOrNew('g', node), attrs)\n  }\n}\n\nextend(G, containerGeometry)\n\nregisterMethods({\n  Container: {\n    // Create a group element\n    group: wrapWithAttrCheck(function () {\n      return this.put(new G())\n    })\n  }\n})\n\nregister(G, 'G')\n","import {\n  nodeOrNew,\n  register,\n  wrapWithAttrCheck,\n  extend\n} from '../utils/adopter.js'\nimport { registerMethods } from '../utils/methods.js'\nimport { xlink } from '../modules/core/namespaces.js'\nimport Container from './Container.js'\nimport * as containerGeometry from '../modules/core/containerGeometry.js'\n\nexport default class A extends Container {\n  constructor(node, attrs = node) {\n    super(nodeOrNew('a', node), attrs)\n  }\n\n  // Link target attribute\n  target(target) {\n    return this.attr('target', target)\n  }\n\n  // Link url\n  to(url) {\n    return this.attr('href', url, xlink)\n  }\n}\n\nextend(A, containerGeometry)\n\nregisterMethods({\n  Container: {\n    // Create a hyperlink element\n    link: wrapWithAttrCheck(function (url) {\n      return this.put(new A()).to(url)\n    })\n  },\n  Element: {\n    unlink() {\n      const link = this.linker()\n\n      if (!link) return this\n\n      const parent = link.parent()\n\n      if (!parent) {\n        return this.remove()\n      }\n\n      const index = parent.index(link)\n      parent.add(this, index)\n\n      link.remove()\n      return this\n    },\n    linkTo(url) {\n      // reuse old link if possible\n      let link = this.linker()\n\n      if (!link) {\n        link = new A()\n        this.wrap(link)\n      }\n\n      if (typeof url === 'function') {\n        url.call(link, link)\n      } else {\n        link.to(url)\n      }\n\n      return this\n    },\n    linker() {\n      const link = this.parent()\n      if (link && link.node.nodeName.toLowerCase() === 'a') {\n        return link\n      }\n\n      return null\n    }\n  }\n})\n\nregister(A, 'A')\n","import { nodeOrNew, register, wrapWithAttrCheck } from '../utils/adopter.js'\nimport { registerMethods } from '../utils/methods.js'\nimport Container from './Container.js'\nimport baseFind from '../modules/core/selector.js'\n\nexport default class Mask extends Container {\n  // Initialize node\n  constructor(node, attrs = node) {\n    super(nodeOrNew('mask', node), attrs)\n  }\n\n  // Unmask all masked elements and remove itself\n  remove() {\n    // unmask all targets\n    this.targets().forEach(function (el) {\n      el.unmask()\n    })\n\n    // remove mask from parent\n    return super.remove()\n  }\n\n  targets() {\n    return baseFind('svg [mask*=' + this.id() + ']')\n  }\n}\n\nregisterMethods({\n  Container: {\n    mask: wrapWithAttrCheck(function () {\n      return this.defs().put(new Mask())\n    })\n  },\n  Element: {\n    // Distribute mask to svg element\n    masker() {\n      return this.reference('mask')\n    },\n\n    maskWith(element) {\n      // use given mask or create a new one\n      const masker =\n        element instanceof Mask ? element : this.parent().mask().add(element)\n\n      // apply mask\n      return this.attr('mask', 'url(#' + masker.id() + ')')\n    },\n\n    // Unmask element\n    unmask() {\n      return this.attr('mask', null)\n    }\n  }\n})\n\nregister(Mask, 'Mask')\n","import { nodeOrNew, register } from '../utils/adopter.js'\nimport Element from './Element.js'\nimport SVGNumber from '../types/SVGNumber.js'\nimport { registerMethods } from '../utils/methods.js'\n\nexport default class Stop extends Element {\n  constructor(node, attrs = node) {\n    super(nodeOrNew('stop', node), attrs)\n  }\n\n  // add color stops\n  update(o) {\n    if (typeof o === 'number' || o instanceof SVGNumber) {\n      o = {\n        offset: arguments[0],\n        color: arguments[1],\n        opacity: arguments[2]\n      }\n    }\n\n    // set attributes\n    if (o.opacity != null) this.attr('stop-opacity', o.opacity)\n    if (o.color != null) this.attr('stop-color', o.color)\n    if (o.offset != null) this.attr('offset', new SVGNumber(o.offset))\n\n    return this\n  }\n}\n\nregisterMethods({\n  Gradient: {\n    // Add a color stop\n    stop: function (offset, color, opacity) {\n      return this.put(new Stop()).update(offset, color, opacity)\n    }\n  }\n})\n\nregister(Stop, 'Stop')\n","import { nodeOrNew, register } from '../utils/adopter.js'\nimport { registerMethods } from '../utils/methods.js'\nimport { unCamelCase } from '../utils/utils.js'\nimport Element from './Element.js'\n\nfunction cssRule(selector, rule) {\n  if (!selector) return ''\n  if (!rule) return selector\n\n  let ret = selector + '{'\n\n  for (const i in rule) {\n    ret += unCamelCase(i) + ':' + rule[i] + ';'\n  }\n\n  ret += '}'\n\n  return ret\n}\n\nexport default class Style extends Element {\n  constructor(node, attrs = node) {\n    super(nodeOrNew('style', node), attrs)\n  }\n\n  addText(w = '') {\n    this.node.textContent += w\n    return this\n  }\n\n  font(name, src, params = {}) {\n    return this.rule('@font-face', {\n      fontFamily: name,\n      src: src,\n      ...params\n    })\n  }\n\n  rule(selector, obj) {\n    return this.addText(cssRule(selector, obj))\n  }\n}\n\nregisterMethods('Dom', {\n  style(selector, obj) {\n    return this.put(new Style()).rule(selector, obj)\n  },\n  fontface(name, src, params) {\n    return this.put(new Style()).font(name, src, params)\n  }\n})\n\nregister(Style, 'Style')\n","import { nodeOrNew, register, wrapWithAttrCheck } from '../utils/adopter.js'\nimport { registerMethods } from '../utils/methods.js'\nimport { xlink } from '../modules/core/namespaces.js'\nimport Path from './Path.js'\nimport PathArray from '../types/PathArray.js'\nimport Text from './Text.js'\nimport baseFind from '../modules/core/selector.js'\n\nexport default class TextPath extends Text {\n  // Initialize node\n  constructor(node, attrs = node) {\n    super(nodeOrNew('textPath', node), attrs)\n  }\n\n  // return the array of the path track element\n  array() {\n    const track = this.track()\n\n    return track ? track.array() : null\n  }\n\n  // Plot path if any\n  plot(d) {\n    const track = this.track()\n    let pathArray = null\n\n    if (track) {\n      pathArray = track.plot(d)\n    }\n\n    return d == null ? pathArray : this\n  }\n\n  // Get the path element\n  track() {\n    return this.reference('href')\n  }\n}\n\nregisterMethods({\n  Container: {\n    textPath: wrapWithAttrCheck(function (text, path) {\n      // Convert text to instance if needed\n      if (!(text instanceof Text)) {\n        text = this.text(text)\n      }\n\n      return text.path(path)\n    })\n  },\n  Text: {\n    // Create path for text to run on\n    path: wrapWithAttrCheck(function (track, importNodes = true) {\n      const textPath = new TextPath()\n\n      // if track is a path, reuse it\n      if (!(track instanceof Path)) {\n        // create path element\n        track = this.defs().path(track)\n      }\n\n      // link textPath to path and add content\n      textPath.attr('href', '#' + track, xlink)\n\n      // Transplant all nodes from text to textPath\n      let node\n      if (importNodes) {\n        while ((node = this.node.firstChild)) {\n          textPath.node.appendChild(node)\n        }\n      }\n\n      // add textPath element as child node and return textPath\n      return this.put(textPath)\n    }),\n\n    // Get the textPath children\n    textPath() {\n      return this.findOne('textPath')\n    }\n  },\n  Path: {\n    // creates a textPath from this path\n    text: wrapWithAttrCheck(function (text) {\n      // Convert text to instance if needed\n      if (!(text instanceof Text)) {\n        text = new Text().addTo(this.parent()).text(text)\n      }\n\n      // Create textPath from text and path and return\n      return text.path(this)\n    }),\n\n    targets() {\n      return baseFind('svg textPath').filter((node) => {\n        return (node.attr('href') || '').includes(this.id())\n      })\n\n      // Does not work in IE11. Use when IE support is dropped\n      // return baseFind('svg textPath[*|href*=' + this.id() + ']')\n    }\n  }\n})\n\nTextPath.prototype.MorphArray = PathArray\nregister(TextPath, 'TextPath')\n","import { nodeOrNew, register, wrapWithAttrCheck } from '../utils/adopter.js'\nimport { registerMethods } from '../utils/methods.js'\nimport { xlink } from '../modules/core/namespaces.js'\nimport Shape from './Shape.js'\n\nexport default class Use extends Shape {\n  constructor(node, attrs = node) {\n    super(nodeOrNew('use', node), attrs)\n  }\n\n  // Use element as a reference\n  use(element, file) {\n    // Set lined element\n    return this.attr('href', (file || '') + '#' + element, xlink)\n  }\n}\n\nregisterMethods({\n  Container: {\n    // Create a use element\n    use: wrapWithAttrCheck(function (element, file) {\n      return this.put(new Use()).use(element, file)\n    })\n  }\n})\n\nregister(Use, 'Use')\n","/* Optional Modules */\nimport './modules/optional/arrange.js'\nimport './modules/optional/class.js'\nimport './modules/optional/css.js'\nimport './modules/optional/data.js'\nimport './modules/optional/memory.js'\nimport './modules/optional/sugar.js'\nimport './modules/optional/transform.js'\n\nimport { extend, makeInstance } from './utils/adopter.js'\nimport { getMethodNames, getMethodsFor } from './utils/methods.js'\nimport Box from './types/Box.js'\nimport Color from './types/Color.js'\nimport Container from './elements/Container.js'\nimport Defs from './elements/Defs.js'\nimport Dom from './elements/Dom.js'\nimport Element from './elements/Element.js'\nimport Ellipse from './elements/Ellipse.js'\nimport EventTarget from './types/EventTarget.js'\nimport Fragment from './elements/Fragment.js'\nimport Gradient from './elements/Gradient.js'\nimport Image from './elements/Image.js'\nimport Line from './elements/Line.js'\nimport List from './types/List.js'\nimport Marker from './elements/Marker.js'\nimport Matrix from './types/Matrix.js'\nimport Morphable, {\n  NonMorphable,\n  ObjectBag,\n  TransformBag,\n  makeMorphable,\n  registerMorphableType\n} from './animation/Morphable.js'\nimport Path from './elements/Path.js'\nimport PathArray from './types/PathArray.js'\nimport Pattern from './elements/Pattern.js'\nimport PointArray from './types/PointArray.js'\nimport Point from './types/Point.js'\nimport Polygon from './elements/Polygon.js'\nimport Polyline from './elements/Polyline.js'\nimport Rect from './elements/Rect.js'\nimport Runner from './animation/Runner.js'\nimport SVGArray from './types/SVGArray.js'\nimport SVGNumber from './types/SVGNumber.js'\nimport Shape from './elements/Shape.js'\nimport Svg from './elements/Svg.js'\nimport Symbol from './elements/Symbol.js'\nimport Text from './elements/Text.js'\nimport Tspan from './elements/Tspan.js'\nimport * as defaults from './modules/core/defaults.js'\nimport * as utils from './utils/utils.js'\nimport * as namespaces from './modules/core/namespaces.js'\nimport * as regex from './modules/core/regex.js'\n\nexport {\n  Morphable,\n  registerMorphableType,\n  makeMorphable,\n  TransformBag,\n  ObjectBag,\n  NonMorphable\n}\n\nexport { defaults, utils, namespaces, regex }\nexport const SVG = makeInstance\nexport { default as parser } from './modules/core/parser.js'\nexport { default as find } from './modules/core/selector.js'\nexport * from './modules/core/event.js'\nexport * from './utils/adopter.js'\nexport {\n  getWindow,\n  registerWindow,\n  restoreWindow,\n  saveWindow,\n  withWindow\n} from './utils/window.js'\n\n/* Animation Modules */\nexport { default as Animator } from './animation/Animator.js'\nexport {\n  Controller,\n  Ease,\n  PID,\n  Spring,\n  easing\n} from './animation/Controller.js'\nexport { default as Queue } from './animation/Queue.js'\nexport { default as Runner } from './animation/Runner.js'\nexport { default as Timeline } from './animation/Timeline.js'\n\n/* Types */\nexport { default as Array } from './types/SVGArray.js'\nexport { default as Box } from './types/Box.js'\nexport { default as Color } from './types/Color.js'\nexport { default as EventTarget } from './types/EventTarget.js'\nexport { default as Matrix } from './types/Matrix.js'\nexport { default as Number } from './types/SVGNumber.js'\nexport { default as PathArray } from './types/PathArray.js'\nexport { default as Point } from './types/Point.js'\nexport { default as PointArray } from './types/PointArray.js'\nexport { default as List } from './types/List.js'\n\n/* Elements */\nexport { default as Circle } from './elements/Circle.js'\nexport { default as ClipPath } from './elements/ClipPath.js'\nexport { default as Container } from './elements/Container.js'\nexport { default as Defs } from './elements/Defs.js'\nexport { default as Dom } from './elements/Dom.js'\nexport { default as Element } from './elements/Element.js'\nexport { default as Ellipse } from './elements/Ellipse.js'\nexport { default as ForeignObject } from './elements/ForeignObject.js'\nexport { default as Fragment } from './elements/Fragment.js'\nexport { default as Gradient } from './elements/Gradient.js'\nexport { default as G } from './elements/G.js'\nexport { default as A } from './elements/A.js'\nexport { default as Image } from './elements/Image.js'\nexport { default as Line } from './elements/Line.js'\nexport { default as Marker } from './elements/Marker.js'\nexport { default as Mask } from './elements/Mask.js'\nexport { default as Path } from './elements/Path.js'\nexport { default as Pattern } from './elements/Pattern.js'\nexport { default as Polygon } from './elements/Polygon.js'\nexport { default as Polyline } from './elements/Polyline.js'\nexport { default as Rect } from './elements/Rect.js'\nexport { default as Shape } from './elements/Shape.js'\nexport { default as Stop } from './elements/Stop.js'\nexport { default as Style } from './elements/Style.js'\nexport { default as Svg } from './elements/Svg.js'\nexport { default as Symbol } from './elements/Symbol.js'\nexport { default as Text } from './elements/Text.js'\nexport { default as TextPath } from './elements/TextPath.js'\nexport { default as Tspan } from './elements/Tspan.js'\nexport { default as Use } from './elements/Use.js'\n\nextend([Svg, Symbol, Image, Pattern, Marker], getMethodsFor('viewbox'))\n\nextend([Line, Polyline, Polygon, Path], getMethodsFor('marker'))\n\nextend(Text, getMethodsFor('Text'))\nextend(Path, getMethodsFor('Path'))\n\nextend(Defs, getMethodsFor('Defs'))\n\nextend([Text, Tspan], getMethodsFor('Tspan'))\n\nextend([Rect, Ellipse, Gradient, Runner], getMethodsFor('radius'))\n\nextend(EventTarget, getMethodsFor('EventTarget'))\nextend(Dom, getMethodsFor('Dom'))\nextend(Element, getMethodsFor('Element'))\nextend(Shape, getMethodsFor('Shape'))\nextend([Container, Fragment], getMethodsFor('Container'))\nextend(Gradient, getMethodsFor('Gradient'))\n\nextend(Runner, getMethodsFor('Runner'))\n\nList.extend(getMethodNames())\n\nregisterMorphableType([\n  SVGNumber,\n  Color,\n  Box,\n  Matrix,\n  SVGArray,\n  PointArray,\n  PathArray,\n  Point\n])\n\nmakeMorphable()\n","import { Box, Element, G, extend, off, on } from '@svgdotjs/svg.js'\n\nconst getCoordsFromEvent = (ev) => {\n  if (ev.changedTouches) {\n    ev = ev.changedTouches[0]\n  }\n  return { x: ev.clientX, y: ev.clientY }\n}\n\n// Creates handler, saves it\nclass DragHandler {\n  constructor(el) {\n    el.remember('_draggable', this)\n    this.el = el\n\n    this.drag = this.drag.bind(this)\n    this.startDrag = this.startDrag.bind(this)\n    this.endDrag = this.endDrag.bind(this)\n  }\n\n  // Enables or disabled drag based on input\n  init(enabled) {\n    if (enabled) {\n      this.el.on('mousedown.drag', this.startDrag)\n      this.el.on('touchstart.drag', this.startDrag, { passive: false })\n    } else {\n      this.el.off('mousedown.drag')\n      this.el.off('touchstart.drag')\n    }\n  }\n\n  // Start dragging\n  startDrag(ev) {\n    const isMouse = !ev.type.indexOf('mouse')\n\n    // Check for left button\n    if (isMouse && ev.which !== 1 && ev.buttons !== 0) {\n      return\n    }\n\n    // Fire beforedrag event\n    if (\n      this.el.dispatch('beforedrag', { event: ev, handler: this })\n        .defaultPrevented\n    ) {\n      return\n    }\n\n    // Prevent browser drag behavior as soon as possible\n    ev.preventDefault()\n\n    // Prevent propagation to a parent that might also have dragging enabled\n    ev.stopPropagation()\n\n    // Make sure that start events are unbound so that one element\n    // is only dragged by one input only\n    this.init(false)\n\n    this.box = this.el.bbox()\n    this.lastClick = this.el.point(getCoordsFromEvent(ev))\n\n    const eventMove = (isMouse ? 'mousemove' : 'touchmove') + '.drag'\n    const eventEnd = (isMouse ? 'mouseup' : 'touchend') + '.drag'\n\n    // Bind drag and end events to window\n    on(window, eventMove, this.drag, this, { passive: false })\n    on(window, eventEnd, this.endDrag, this, { passive: false })\n\n    // Fire dragstart event\n    this.el.fire('dragstart', { event: ev, handler: this, box: this.box })\n  }\n\n  // While dragging\n  drag(ev) {\n    const { box, lastClick } = this\n\n    const currentClick = this.el.point(getCoordsFromEvent(ev))\n    const dx = currentClick.x - lastClick.x\n    const dy = currentClick.y - lastClick.y\n\n    if (!dx && !dy) return box\n\n    const x = box.x + dx\n    const y = box.y + dy\n    this.box = new Box(x, y, box.w, box.h)\n    this.lastClick = currentClick\n\n    if (\n      this.el.dispatch('dragmove', {\n        event: ev,\n        handler: this,\n        box: this.box,\n      }).defaultPrevented\n    ) {\n      return\n    }\n\n    this.move(x, y)\n  }\n\n  move(x, y) {\n    // Svg elements bbox depends on their content even though they have\n    // x, y, width and height - strange!\n    // Thats why we handle them the same as groups\n    if (this.el.type === 'svg') {\n      G.prototype.move.call(this.el, x, y)\n    } else {\n      this.el.move(x, y)\n    }\n  }\n\n  endDrag(ev) {\n    // final drag\n    this.drag(ev)\n\n    // fire dragend event\n    this.el.fire('dragend', { event: ev, handler: this, box: this.box })\n\n    // unbind events\n    off(window, 'mousemove.drag')\n    off(window, 'touchmove.drag')\n    off(window, 'mouseup.drag')\n    off(window, 'touchend.drag')\n\n    // Rebind initial Events\n    this.init(true)\n  }\n}\n\nextend(Element, {\n  draggable(enable = true) {\n    const dragHandler = this.remember('_draggable') || new DragHandler(this)\n    dragHandler.init(enable)\n    return this\n  },\n})\n","import { G, Text as svgLabel, ForeignObject as svgHTML } from \"@svgdotjs/svg.js\"\r\n\r\nexport type TeXConverterType = (value: string) => string\r\nexport interface IGraphConfig {\r\n    width: number,\r\n    height: number,\r\n    origin: XY,\r\n    system: COORDINATE_SYSTEM,\r\n    axis: {\r\n        x: XY,\r\n        y: XY\r\n    }\r\n}\r\n\r\nexport interface IGraphDisplay {\r\n    grid?: boolean,\r\n    subgrid?: number,\r\n    axis?: boolean | { x: boolean | number | IAxisConfig, y: boolean | number | IAxisConfig },\r\n}\r\nexport interface IGraphConstructorConfig {\r\n    width?: number,\r\n    height?: number,\r\n    origin?: XY,\r\n    system?: COORDINATE_SYSTEM,\r\n    ppu?: number,\r\n    axis?: {\r\n        x: XY,\r\n        y: XY\r\n    },\r\n    display?: IGraphDisplay,\r\n    tex?: TeXConverterType\r\n}\r\n\r\nexport interface IAxisConfig {\r\n    color?: string,\r\n    padding?: number,\r\n    half?: boolean,\r\n    length?: number\r\n}\r\n\r\nexport interface IFigureAppearanceConfig {\r\n    stroke: {\r\n        color: string,\r\n        width: number,\r\n        opacity: number\r\n    },\r\n    fill: {\r\n        color: string,\r\n        opacity: number\r\n    },\r\n}\r\n\r\nexport interface XY {\r\n    x: number,\r\n    y: number\r\n}\r\n\r\nexport function isXY(obj: unknown): obj is XY {\r\n    // @ts-expect-error : obj is XY\r\n    return obj !== null && obj !== undefined && obj.x !== undefined && obj.y !== undefined\r\n}\r\n\r\nexport function isDOMAIN(obj: unknown): obj is DOMAIN {\r\n    // @ts-expect-error : obj is DOMAIN\r\n    return obj !== null && obj !== undefined && obj.min !== undefined && obj.max !== undefined\r\n}\r\n\r\n\r\nexport interface DOMAIN {\r\n    axis?: 'x' | 'y',\r\n    min: number,\r\n    max: number\r\n}\r\n\r\nexport enum LAYER_NAME {\r\n    BACKGROUND = 'background',\r\n    GRIDS = 'grids',\r\n    AXIS = 'axis',\r\n    MAIN = 'main',\r\n    PLOTS_BACKGROUND = 'plots_BG',\r\n    PLOTS = 'plots',\r\n    PLOTS_FOREGROUND = 'plots_FG',\r\n    FOREGROUND = 'foreground',\r\n    POINTS = 'points',\r\n    INTERACTIVE = 'interactive',\r\n}\r\n\r\nexport type ILayers = Record<LAYER_NAME, G>\r\n\r\nexport enum AXIS {\r\n    'X' = 'Ox',\r\n    'Y' = 'Oy'\r\n}\r\n\r\nexport enum COORDINATE_SYSTEM {\r\n    'CARTESIAN_2D' = 'cartesian_2d',\r\n    'POLAR' = 'polar',\r\n}\r\n\r\nexport enum POINTCONSTRAINT {\r\n    FREE = 'free',\r\n    FIXED = 'fixed',\r\n    MIDDLE = 'middle',\r\n    PROJECTION = 'projection',\r\n    INTERSECTION_LINES = 'intersection_lines',\r\n    FOLLOW = 'follow',\r\n    DIRECTION = 'direction',\r\n    VECTOR = 'vector',\r\n    INTERSECTION_CIRCLE_LINE = 'intersection_circle_line',\r\n    INTERSECTION_CIRCLES = 'intersection_circles',\r\n    SYMMETRY = 'symmetry',\r\n    COORDINATES = 'coordinates',\r\n}\r\n\r\nexport enum LINECONSTRAINT {\r\n    FIXED = 'fixed',                    // two points\r\n    PARALLEL = 'parallel',              // a point and a vector\r\n    PERPENDICULAR = 'perpendicular',    // a point and a vector\r\n    TANGENT = 'tangent',                // a point and a circle\r\n    MEDIATOR = \"mediator\",              // two points\r\n    SLOPE = 'slope',                    // a point and a slope\r\n    BISECTOR = \"bisector\",            // two lines\r\n}\r\n\r\nexport enum POLYGON_CONSTRAINT {\r\n    FIXED = 'fixed',\r\n    REGULAR = 'regular',\r\n    STAR = 'star'\r\n}\r\nexport type LabelType = svgLabel | svgHTML | null","import { G, Text as svgLabel, ForeignObject as svgHTML, SVG } from \"@svgdotjs/svg.js\"\r\nimport type { XY } from \"../pidraw.common\"\r\n\r\ntype LabelType = svgLabel | svgHTML\r\nexport type LABEL_POSITION = 'tl' | 'tc' | 'tr' | 'ml' | 'mc' | 'mr' | 'bl' | 'bc' | 'br'\r\nexport interface ILabelConfig {\r\n    text: string,\r\n    asHtml: boolean,\r\n    alignement: LABEL_POSITION,\r\n    offset: XY,\r\n    texConverter: (value: string) => string\r\n}\r\nexport class Label {\r\n    #element: G\r\n    #name: string\r\n    #shape: LabelType\r\n    #config: ILabelConfig\r\n    #displayName: string\r\n    #x: number\r\n    #y: number\r\n    #style: string\r\n\r\n    get config() { return this.#config }\r\n    get x() { return this.#x }\r\n    set x(value: number) { this.#x = value }\r\n    get y() { return this.#y }\r\n    set y(value: number) { this.#y = value }\r\n    get asHtml() { return this.#config.asHtml }\r\n    get shape() { return this.#shape }\r\n    get alignement() { return this.#config.alignement }\r\n\r\n    constructor(rootG: G, name: string, config: ILabelConfig) {\r\n        // The parent group : the figure which the label is attached to.\r\n        this.#element = rootG\r\n\r\n        // The name of the label - it's the name / id of the label.\r\n        // Uses the name of the base figure.\r\n        this.#name = name\r\n\r\n        // Store the configuration of the label.\r\n        this.#config = Object.assign(\r\n            {\r\n                text: name,\r\n                asHtml: false,\r\n                alignement: 'br',\r\n                offset: { x: 0, y: 0 },\r\n                texConverter: (value: string) => value\r\n            },\r\n            config\r\n        )\r\n\r\n        // displayName is the text displayed on the label.\r\n        this.#displayName = config.text ?? name\r\n\r\n        // Position of the label\r\n        this.#x = 0\r\n        this.#y = 0\r\n\r\n        // Default style\r\n        this.#style = 'display: block; position: fixed; white-space:nowrap'\r\n\r\n        // Create the label shape\r\n        this.#shape = this.#makeLabel()\r\n    }\r\n\r\n    #makeLabel(): svgLabel | svgHTML {\r\n        // Remove the existing label.\r\n        if (this.#shape) { this.#shape.remove() }\r\n\r\n        // Create a new label.\r\n        this.#shape = this.#config.asHtml ?\r\n            this.#element.foreignObject(1, 1)\r\n                .attr('style', \"overflow:visible\")\r\n                .add(SVG(`<div style=\"${this.#style}\">${this.displayName}</div>`, true)) :\r\n            this.#element.text(this.displayName)\r\n\r\n        this.#shape.attr('id', `${this.#name}-label`)\r\n\r\n        return this.#shape\r\n    }\r\n\r\n    // Get the label of the figure.\r\n    get label(): LabelType { return this.#shape }\r\n\r\n    get displayName() {\r\n        if (this.#config.asHtml) {\r\n            return this.#config.texConverter(this.#displayName)\r\n        }\r\n        return this.#displayName\r\n    }\r\n\r\n\r\n    hide() {\r\n        this.#shape.hide()\r\n        return this\r\n    }\r\n    show() {\r\n        this.#shape.show()\r\n        return this\r\n    }\r\n    // Set the label of the figure.\r\n    setLabel(text?: string): this {\r\n        // Default label is the name of the figure.\r\n        if (text !== undefined) { this.#displayName = text }\r\n\r\n        // Update the text.\r\n        this.#makeLabel()\r\n\r\n        return this\r\n    }\r\n\r\n    move(x: number, y: number): this {\r\n        this.#x = x\r\n        this.#y = y\r\n        this.position()\r\n        return this\r\n    }\r\n    rotate(angle: number): this {\r\n        this.#shape.transform({\r\n            rotate: angle,\r\n            origin: { x: this.#x, y: this.#y }\r\n        })\r\n        return this\r\n    }\r\n\r\n    position(alignement?: LABEL_POSITION, offset?: XY): this {\r\n        if (alignement === undefined) { alignement = this.#config.alignement }\r\n        if (offset === undefined) { offset = this.#config.offset }\r\n\r\n        // Make sure the offset is correct (NaN value must be zero.)\r\n        offset = {\r\n            x: isNaN(offset.x) ? 0 : offset.x,\r\n            y: isNaN(offset.y) ? 0 : offset.y\r\n        }\r\n\r\n        // Set the alignement and offset\r\n        this.#config.alignement = alignement\r\n        this.#config.offset = offset\r\n\r\n        // TODO: label placement / alignement to optimize !\r\n        // Current object position\r\n        let x = this.#x,\r\n            y = this.#y\r\n\r\n        // Get and set the width of the label\r\n        let width = 0, height = 0\r\n        if (this.#shape instanceof svgHTML) {\r\n            // Getting the width and height of the HTML element\r\n            width = this.#shape.node.children[0].clientWidth\r\n            height = this.#shape.node.children[0].clientHeight\r\n\r\n            this.label.width(width)\r\n            this.label.height(height)\r\n        } else {\r\n            width = this.#shape.length()\r\n            height = this.#shape.bbox().h\r\n        }\r\n\r\n        if (alignement.includes('l')) {\r\n            x = x - width / 2 + (alignement.includes('m') ? -10 : 0)\r\n        } else if (alignement.includes('r')) {\r\n            x = x + width / 2 + (alignement.includes('m') ? 10 : 0)\r\n        } else if (alignement.includes('c')) {\r\n            x = +x\r\n        }\r\n\r\n        if (alignement.includes(\"t\")) {\r\n            y = y - height / 2\r\n        } else if (alignement.includes(\"m\")) {\r\n            y = +y\r\n        } else if (alignement.includes(\"b\")) {\r\n            y = y + height / 2\r\n        }\r\n\r\n        if (this.#shape instanceof svgHTML) {\r\n            this.#shape.center(x + (offset.x ?? 0), y - (offset.y ?? 0))\r\n        } else {\r\n            this.#shape.center(x + (offset.x ?? 0), y - (offset.y ?? 0))\r\n        }\r\n        return this\r\n    }\r\n\r\n}","/**\r\n * The calculus class is intended to replace PiMath and avoid using \"fractions\" and work directly with number.\r\n */\r\n\r\nimport { Marker, Path as svgPath, Svg } from \"@svgdotjs/svg.js\"\r\nimport { type DOMAIN, type IGraphConfig,type XY, isDOMAIN, isXY } from \"./pidraw.common\"\r\n\r\nexport function numberCorrection(value: number, number_of_digits = 10): number {\r\n    return +value.toFixed(number_of_digits)\r\n}\r\n\r\nexport function isInfinity(value: number): boolean {\r\n    return value === Number.NEGATIVE_INFINITY || value === Number.POSITIVE_INFINITY\r\n}\r\n\r\nexport function distanceAB(A: XY, B: XY): number {\r\n    return Math.sqrt((B.x - A.x) ** 2 + (B.y - A.y) ** 2)\r\n}\r\n\r\nexport class mathVector {\r\n    constructor(x: number | XY, y?: number | XY) {\r\n        this._x = 0\r\n        this._y = 0\r\n\r\n        if (isXY(x) && isXY(y)) {\r\n            this._x = y.x - x.x\r\n            this._y = y.y - x.y\r\n        } else if (isXY(x) && y === undefined) {\r\n            this._x = x.x\r\n            this._y = x.y\r\n        } else if (!isNaN(+x) && y !== undefined && !isNaN(+y)) {\r\n            this._x = +x\r\n            this._y = +y\r\n        }\r\n\r\n        return this\r\n    }\r\n\r\n    private _x: number\r\n\r\n    get x(): number {\r\n        return this._x\r\n    }\r\n\r\n    set x(value: number) {\r\n        this._x = value\r\n    }\r\n\r\n    private _y: number\r\n\r\n    get y(): number {\r\n        return this._y\r\n    }\r\n\r\n    set y(value: number) {\r\n        this._y = value\r\n    }\r\n\r\n    get norm(): number {\r\n        return Math.sqrt(this._x ** 2 + this._y ** 2)\r\n    }\r\n\r\n    get normal(): mathVector {\r\n        return new mathVector(this._y, -this._x)\r\n    }\r\n\r\n    get unit(): mathVector {\r\n        const n = this.norm\r\n        return new mathVector(this._x / n, this._y / n)\r\n    }\r\n\r\n    static scalarProduct(u: mathVector, v: mathVector): number {\r\n        return u.x * v.x + u.y * v.y\r\n    }\r\n\r\n    projection(on: mathVector): mathVector {\r\n        const x = on.x\r\n        const y = on.y\r\n\r\n        const k = mathVector.scalarProduct(this, on) / (x ** 2 + y ** 2)\r\n\r\n        return new mathVector(x * k, y * k)\r\n    }\r\n\r\n    rotate(angle: number): this {\r\n\r\n        // Rotate the vector by <angle> degrees.\r\n        // (cos  -sin ) ( x )\r\n        // (sin  cos  ) ( y )\r\n        // => x: cos * x - sin * y\r\n        // => y: sin * x + cos * y\r\n        const rads = +angle * Math.PI / 180,\r\n            x = +this._x,\r\n            y = +this._y\r\n\r\n        this._x = Math.cos(rads) * x - Math.sin(rads) * y\r\n        this._y = Math.sin(rads) * x + Math.cos(rads) * y\r\n\r\n        return this\r\n    }\r\n\r\n    add(v: mathVector): mathVector {\r\n        return new mathVector(this._x + v.x, this._y + v.y)\r\n    }\r\n\r\n    setLength(length: number): this {\r\n        const n = this.norm\r\n        this._x = this._x * length / n\r\n        this._y = this._y * length / n\r\n\r\n        return this\r\n    }\r\n}\r\n\r\nexport class mathLine {\r\n    constructor(A: XY, B: XY | mathVector) {\r\n        this._A = { x: 0, y: 0 }\r\n        this._director = new mathVector(0, 0)\r\n\r\n        if (B instanceof mathVector) {\r\n            this._A = A\r\n            this._director = B\r\n        } else {\r\n            return new mathLine(A, new mathVector(A, B))\r\n        }\r\n    }\r\n\r\n    private _A: XY\r\n\r\n    get A(): XY {\r\n        return this._A\r\n    }\r\n\r\n    set A(value: XY) {\r\n        this._A = value\r\n    }\r\n\r\n    private _director: mathVector\r\n\r\n    get director(): mathVector {\r\n        return this._director\r\n    }\r\n\r\n    set director(value: mathVector) {\r\n        this._director = value\r\n    }\r\n\r\n    get normal(): mathVector {\r\n        return new mathVector(this._director.y, -this._director.x)\r\n    }\r\n\r\n    get slope(): number {\r\n        return this._director.y / this._director.x\r\n    }\r\n\r\n    get ordinate(): number {\r\n        // A = (a,b)\r\n        // d = (dx,dy)\r\n        // x = a + k.dx => x = 0 => k = -a/dx\r\n        // y = b + k.dy => y = b - a.dy/dx => h = y - mx\r\n        return this._A.y - this._A.x * this.slope\r\n    }\r\n\r\n    getValueAtX(x: number): number {\r\n        // y = mx + h\r\n        return x * this.slope + this.ordinate\r\n    }\r\n\r\n    getValueAtY(y: number): number {\r\n        // x = (y-h)/m\r\n        const slope = this.slope\r\n\r\n        if (isInfinity(slope)) {\r\n            return this._A.x\r\n        }\r\n        return (y - this.ordinate) / this.slope\r\n    }\r\n\r\n    intersection(value: mathLine): XY | null {\r\n        // (d1): y = m1x+h1\r\n        // (d2): y = m2x+h2\r\n        // m1x+h1  = m2x+h2 => x = (h2-h1)/(m1-m2)\r\n        const m1 = this.slope,\r\n            h1 = this.ordinate,\r\n            m2 = value.slope,\r\n            h2 = value.ordinate\r\n\r\n        let x: number, y: number\r\n\r\n        if (m1 === Number.POSITIVE_INFINITY || m1 === Number.NEGATIVE_INFINITY) {\r\n            x = this._A.x\r\n            y = m2 * x + h2\r\n        } else if (m2 === Number.POSITIVE_INFINITY || m2 === Number.NEGATIVE_INFINITY) {\r\n            x = value.A.x\r\n            y = m1 * x + h1\r\n        } else {\r\n            x = (h2 - h1) / (m1 - m2)\r\n            y = m1 * x + h1\r\n        }\r\n\r\n        if (x === Number.POSITIVE_INFINITY || x === Number.NEGATIVE_INFINITY) {\r\n            return null\r\n        }\r\n        return { x, y }\r\n    }\r\n\r\n    projection(value: XY): XY {\r\n        // d = (dx,dy)\r\n        // p = (px,py)\r\n        // k = (d.p)/(d.d)\r\n        // proj = k.d\r\n        const d = this._director,\r\n            p = new mathVector(this._A, value)\r\n\r\n        const k = mathVector.scalarProduct(d, p) / mathVector.scalarProduct(d, d)\r\n\r\n        return { x: this._A.x + d.x * k, y: this._A.y + d.y * k }\r\n    }\r\n}\r\n\r\n\r\n/** -----------------------------------------\r\n * numeric expression and shutting yard for expressions.\r\n *\r\n */\r\n\r\nexport class NumExp {\r\n    constructor(value: string, uniformize?: boolean) {\r\n        this._expression = value\r\n\r\n        try {\r\n            this._rpn = new Shutingyard(ShutingyardMode.NUMERIC).parse(value, uniformize ?? true).rpn\r\n            this._isValid = true\r\n        } catch (e) {\r\n            this._rpn = []\r\n            this._isValid = false\r\n        }\r\n    }\r\n\r\n    private _rpn: { token: string, tokenType: ShutingyardType }[]\r\n\r\n    get rpn(): { token: string; tokenType: ShutingyardType }[] {\r\n        return this._rpn\r\n    }\r\n\r\n    private _expression: string\r\n\r\n    get expression(): string {\r\n        return this._expression\r\n    }\r\n\r\n    private _isValid: boolean\r\n\r\n    get isValid(): boolean {\r\n        try {\r\n            this.evaluate({ x: 0 })\r\n            this._isValid = true\r\n        } catch {\r\n            this._isValid = false\r\n        }\r\n        return this._isValid\r\n    }\r\n\r\n    set isValid(value: boolean) {\r\n        this._isValid = value\r\n    }\r\n\r\n    evaluate(values?: Record<string, number>): number {\r\n        const stack: number[] = []\r\n\r\n        if (this._rpn.length === 0) {\r\n            this._isValid = false\r\n            return NaN\r\n        }\r\n\r\n        this.isValid = true\r\n\r\n        for (const element of this._rpn) {\r\n            if (element.tokenType === ShutingyardType.COEFFICIENT) {\r\n                // May be a numeric value or a Fraction.\r\n                if (!isNaN(+element.token)) {\r\n                    this._addToStack(stack, +element.token)\r\n                } else {\r\n                    console.log('adding Fraction - should not be here ! ')\r\n                    // this._addToStack(stack, new Fraction(element.token).value)\r\n                }\r\n            } else if (element.tokenType === ShutingyardType.VARIABLE) {\r\n                if (values?.[element.token] !== undefined) {\r\n                    this._addToStack(stack, +values[element.token])\r\n                }\r\n            } else if (element.tokenType === ShutingyardType.CONSTANT) {\r\n                this._addToStack(stack, tokenConstant[element.token])\r\n            } else if (element.tokenType === ShutingyardType.OPERATION) {\r\n                if (element.token === '*') {\r\n                    const b = stack.pop(),\r\n                        a = stack.pop()\r\n                    if (a === undefined || b === undefined) {\r\n                        this.isValid = false\r\n                        return NaN\r\n                    }\r\n\r\n                    this._addToStack(stack, a * b)\r\n                } else if (element.token === '/') {\r\n                    const b = stack.pop(),\r\n                        a = stack.pop()\r\n                    if (a === undefined || b === undefined) {\r\n                        this.isValid = false\r\n                        return NaN\r\n                    }\r\n                    this._addToStack(stack, a / b)\r\n                } else if (element.token === '+') {\r\n                    const b = stack.pop(),\r\n                        a = stack.pop()\r\n                    if (a === undefined || b === undefined) {\r\n                        this.isValid = false\r\n                        return NaN\r\n                    }\r\n                    this._addToStack(stack, (+a) + (+b))\r\n                } else if (element.token === '-') {\r\n                    const b = stack.pop(),\r\n                        a = stack.pop() ?? 0\r\n                    if (b === undefined) {\r\n                        this.isValid = false\r\n                        return NaN\r\n                    }\r\n                    this._addToStack(stack, a - b)\r\n                } else if (element.token === '^') {\r\n                    const b = stack.pop(),\r\n                        a = stack.pop()\r\n                    if (a === undefined || b === undefined) {\r\n                        this.isValid = false\r\n                        return NaN\r\n                    }\r\n                    this._addToStack(stack, Math.pow(a, b))\r\n                }\r\n            } else if (element.tokenType === ShutingyardType.FUNCTION) {\r\n                const a = stack.pop()\r\n                if (a === undefined) {\r\n                    this.isValid = false\r\n                    return NaN\r\n                }\r\n                if (element.token === 'sin') {\r\n                    this._addToStack(stack, Math.sin(a))\r\n                } else if (element.token === 'cos') {\r\n                    this._addToStack(stack, Math.cos(a))\r\n                } else if (element.token === 'tan') {\r\n                    this._addToStack(stack, Math.tan(a))\r\n                } else if (element.token === 'asin') {\r\n                    this._addToStack(stack, Math.asin(a))\r\n                } else if (element.token === 'acos') {\r\n                    this._addToStack(stack, Math.acos(a))\r\n                } else if (element.token === 'atan') {\r\n                    this._addToStack(stack, Math.atan(a))\r\n                } else if (element.token === 'sqrt') {\r\n                    this._addToStack(stack, Math.sqrt(a))\r\n                } else if (element.token === 'nthrt') {\r\n                    const b = stack.pop()\r\n                    if (b === undefined) {\r\n                        this._isValid = false\r\n                        return NaN\r\n                    }\r\n                    if (a % 2 === 0 && b < 0) {\r\n                        this._addToStack(stack, NaN)\r\n                    } else {\r\n                        this._addToStack(stack, (b < 0 ? -1 : 1) * Math.pow(Math.abs(b), 1 / a))\r\n                    }\r\n                } else if (element.token === 'ln') {\r\n                    this._addToStack(stack, Math.log(a))\r\n                } else if (element.token === 'log') {\r\n                    this._addToStack(stack, Math.log10(a))\r\n                } else if (element.token === 'abs') {\r\n                    this._addToStack(stack, Math.abs(a))\r\n                }\r\n            }\r\n        }\r\n\r\n        if (stack.length === 1) {\r\n            return stack[0]\r\n        } else {\r\n            throw new Error(`There was a problem parsing: ${this._expression}`)\r\n        }\r\n    }\r\n\r\n    private _extractDecimalPart(value: number): string {\r\n        let decimal = value.toString()\r\n\r\n        if (!decimal.includes('.')) {\r\n            return ''\r\n        }\r\n\r\n        decimal = decimal.split('.')[1]\r\n\r\n        return decimal.substring(0, decimal.length - 2)\r\n    }\r\n\r\n    private _addToStack(stack: number[], value: number): void {\r\n        stack.push(numberCorrection(value))\r\n    }\r\n}\r\n\r\ntype tokenType = Record<string, {\r\n    precedence: number,\r\n    associative: string,\r\n    type: ShutingyardType\r\n}>;\r\n\r\nconst tokenConstant: Record<string, number> = {\r\n    pi: Math.PI,\r\n    e: Math.exp(1)\r\n}\r\n\r\nenum ShutingyardType {\r\n    LEFT_PARENTHESIS = '(',\r\n    RIGHT_PARENTHESIS = ')',\r\n    VARIABLE = 'variable',\r\n    COEFFICIENT = 'coefficient',\r\n    OPERATION = 'operation',\r\n    CONSTANT = 'constant',\r\n    FUNCTION = 'function',\r\n    FUNCTION_ARGUMENT = 'function-argument',\r\n    MONOM = 'monom'\r\n}\r\n\r\nenum ShutingyardMode {\r\n    EXPRESSION = 'expression',\r\n    POLYNOM = 'polynom',\r\n    NUMERIC = 'numeric'\r\n}\r\n\r\ninterface Token { token: string, tokenType: ShutingyardType }\r\n\r\nclass Shutingyard {\r\n    readonly _mode: ShutingyardMode\r\n    private _tokenConfig: tokenType\r\n    private _tokenConstant: Record<string, number>\r\n    private _tokenKeys: string[]\r\n    private _uniformize: boolean\r\n\r\n    constructor(mode?: ShutingyardMode) {\r\n        this._mode = typeof mode === 'undefined' ? ShutingyardMode.POLYNOM : mode\r\n\r\n        this._tokenConfig = {}\r\n        this._tokenConstant = {}\r\n        this._tokenKeys = []\r\n        this._uniformize = false\r\n\r\n        this.tokenConfigInitialization()\r\n    }\r\n\r\n    private _rpn: Token[] = []\r\n\r\n    // Getter\r\n    get rpn() {\r\n        // console.log(this._rpn)\r\n        return this._rpn\r\n    }\r\n\r\n    get rpnToken() {\r\n        return this._rpn.map(x => x.token)\r\n    }\r\n\r\n    tokenConfigInitialization(): tokenType {\r\n        if (this._mode === ShutingyardMode.NUMERIC) {\r\n            this._tokenConfig = {\r\n                '^': { precedence: 4, associative: 'right', type: ShutingyardType.OPERATION },\r\n                '*': { precedence: 3, associative: 'left', type: ShutingyardType.OPERATION },\r\n                '/': { precedence: 3, associative: 'left', type: ShutingyardType.OPERATION },\r\n                '+': { precedence: 2, associative: 'left', type: ShutingyardType.OPERATION },\r\n                '-': { precedence: 2, associative: 'left', type: ShutingyardType.OPERATION },\r\n                '%': { precedence: 3, associative: 'right', type: ShutingyardType.OPERATION },\r\n                'sin': { precedence: 4, associative: 'right', type: ShutingyardType.FUNCTION },\r\n                'cos': { precedence: 4, associative: 'right', type: ShutingyardType.FUNCTION },\r\n                'tan': { precedence: 4, associative: 'right', type: ShutingyardType.FUNCTION },\r\n                'asin': { precedence: 4, associative: 'right', type: ShutingyardType.FUNCTION },\r\n                'acos': { precedence: 4, associative: 'right', type: ShutingyardType.FUNCTION },\r\n                'atan': { precedence: 4, associative: 'right', type: ShutingyardType.FUNCTION },\r\n                'sqrt': { precedence: 4, associative: 'right', type: ShutingyardType.FUNCTION },\r\n                'nthrt': { precedence: 4, associative: 'right', type: ShutingyardType.FUNCTION },\r\n                'ln': { precedence: 4, associative: 'right', type: ShutingyardType.FUNCTION },\r\n                'log': { precedence: 4, associative: 'right', type: ShutingyardType.FUNCTION },\r\n                'abs': { precedence: 4, associative: 'right', type: ShutingyardType.FUNCTION },\r\n            }\r\n            this._uniformize = false\r\n        } else if (this._mode === ShutingyardMode.EXPRESSION) {\r\n            this._tokenConfig = {\r\n                '^': { precedence: 4, associative: 'right', type: ShutingyardType.OPERATION },\r\n                '*': { precedence: 3, associative: 'left', type: ShutingyardType.OPERATION },\r\n                '/': { precedence: 3, associative: 'left', type: ShutingyardType.OPERATION },\r\n                '+': { precedence: 2, associative: 'left', type: ShutingyardType.OPERATION },\r\n                '-': { precedence: 2, associative: 'left', type: ShutingyardType.OPERATION },\r\n                '%': { precedence: 3, associative: 'right', type: ShutingyardType.OPERATION },\r\n                'sin': { precedence: 4, associative: 'right', type: ShutingyardType.FUNCTION },\r\n                'cos': { precedence: 4, associative: 'right', type: ShutingyardType.FUNCTION },\r\n                'tan': { precedence: 4, associative: 'right', type: ShutingyardType.FUNCTION },\r\n                'asin': { precedence: 4, associative: 'right', type: ShutingyardType.FUNCTION },\r\n                'acos': { precedence: 4, associative: 'right', type: ShutingyardType.FUNCTION },\r\n                'atan': { precedence: 4, associative: 'right', type: ShutingyardType.FUNCTION },\r\n                'sqrt': { precedence: 4, associative: 'right', type: ShutingyardType.FUNCTION },\r\n                'nthrt': { precedence: 4, associative: 'right', type: ShutingyardType.FUNCTION },\r\n                'abs': { precedence: 4, associative: 'right', type: ShutingyardType.FUNCTION },\r\n            }\r\n            this._uniformize = true\r\n        } else {\r\n            this._tokenConfig = {\r\n                '^': { precedence: 4, associative: 'right', type: ShutingyardType.OPERATION },\r\n                '*': { precedence: 3, associative: 'left', type: ShutingyardType.OPERATION },\r\n                '/': { precedence: 3, associative: 'left', type: ShutingyardType.OPERATION },\r\n                '+': { precedence: 2, associative: 'left', type: ShutingyardType.OPERATION },\r\n                '-': { precedence: 2, associative: 'left', type: ShutingyardType.OPERATION },\r\n            }\r\n            this._uniformize = true\r\n        }\r\n\r\n        this._tokenKeys = Object.keys(this._tokenConfig).sort((a, b) => b.length - a.length)\r\n        return this._tokenConfig\r\n    }\r\n\r\n    /**\r\n     * Get the next token to analyse.\r\n     * @param expr (string) Expression to analyse\r\n     * @param start (number) CUrrent position in the expr string.\r\n     */\r\n    NextToken(expr: string, start: number): [string, number, ShutingyardType] {\r\n        let token: string, tokenType: ShutingyardType\r\n\r\n        token = ''\r\n        tokenType = ShutingyardType.MONOM\r\n\r\n        // Case of parenthesis or comma (generic items)\r\n        if (expr[start] === '(') {\r\n            token = '('\r\n            tokenType = ShutingyardType.LEFT_PARENTHESIS\r\n        }\r\n        // It's a closing parentheses\r\n        else if (expr[start] === ')') {\r\n            token = ')'\r\n            tokenType = ShutingyardType.RIGHT_PARENTHESIS\r\n        }\r\n        // It's an argument separator for a function\r\n        else if (expr[start] === ',') {\r\n            token = ','\r\n            tokenType = ShutingyardType.FUNCTION_ARGUMENT\r\n        } else {\r\n            // Extract operation and function tokens\r\n            for (const key of this._tokenKeys) {\r\n                if (expr.substring(start, start + key.length) === key) {\r\n                    token += key\r\n                    tokenType = this._tokenConfig[key].type\r\n                    break\r\n                }\r\n            }\r\n\r\n            // Extract constant\r\n            for (const key in tokenConstant) {\r\n                if (expr.substring(start, start + key.length) === key) {\r\n                    token += key\r\n                    tokenType = ShutingyardType.CONSTANT\r\n                    break\r\n                }\r\n            }\r\n\r\n            if (token === '') {\r\n                // No function found ! Might be a coefficient !\r\n                if (expr[start].match(/[0-9]/)) {\r\n                    const k = expr.substring(start).match(/^([0-9.]+)/)\r\n                    if (k) {\r\n                        token = k[0]\r\n                    }\r\n                    tokenType = ShutingyardType.COEFFICIENT\r\n                } else if (expr[start].match(/[a-zA-Z]/)) {\r\n                    const variable = expr.substring(start).match(/^([a-zA-Z]+)/)\r\n                    if (variable) {\r\n                        token = variable[0]\r\n                        tokenType = ShutingyardType.VARIABLE\r\n                    }\r\n                } else {\r\n                    console.log('Unidentified token', expr[start], expr, start)\r\n                    token = expr[start]\r\n                    tokenType = ShutingyardType.MONOM\r\n                }\r\n\r\n            }\r\n        }\r\n\r\n        return [token, start + token.length, tokenType]\r\n    }\r\n\r\n    normalize(expr: string): string {\r\n        if (expr.length === 1) {\r\n            return expr\r\n        }\r\n\r\n        // Get the list of function token.\r\n        const fnToken: string[] = [],\r\n            kToken: string[] = []\r\n        for (const token in this._tokenConfig) {\r\n            if (this._tokenConfig[token].type === ShutingyardType.FUNCTION) {\r\n                fnToken.push(token)\r\n            }\r\n        }\r\n        // sort if from the lengthy to the smallest function\r\n        fnToken.sort((a, b) => b.length - a.length)\r\n\r\n        for (const token in tokenConstant) {\r\n            kToken.push(token)\r\n        }\r\n        // sort if from the lengthy to the smallest function\r\n        kToken.sort((a, b) => b.length - a.length)\r\n\r\n        let normalizedExpr = \"\",\r\n            i = 0,\r\n            crtToken,\r\n            nextToken\r\n\r\n        while (i < expr.length - 1) {\r\n            // Check if we have a function token.\r\n            // The function MUST have an open parentheses\r\n            let tokenIdx = 0\r\n            while (tokenIdx < fnToken.length) {\r\n                const token = fnToken[tokenIdx]\r\n                if (expr.slice(i, i + token.length + 1) === token + '(') {\r\n                    normalizedExpr += token + '('\r\n                    i += token.length + 1\r\n\r\n                    // Restart the scan for the function token\r\n                    tokenIdx = 0\r\n                } else {\r\n                    // scan for a next function token\r\n                    tokenIdx++\r\n                }\r\n            }\r\n\r\n            // Check for a constant\r\n            tokenIdx = 0\r\n            while (tokenIdx < kToken.length) {\r\n                const token = kToken[tokenIdx]\r\n                if (expr.slice(i, i + token.length) === token) {\r\n                    // We have found a constant.\r\n                    normalizedExpr += token\r\n                    i += token.length\r\n\r\n                    // Exit the loop\r\n                    break\r\n                }\r\n                tokenIdx++\r\n            }\r\n\r\n            // The function token are solved.\r\n            if (i >= expr.length) { break }\r\n\r\n            crtToken = expr[i]\r\n            nextToken = expr[i + 1]\r\n            normalizedExpr += crtToken\r\n            if (crtToken.match(/[a-zA-Z]/g)) {\r\n                // Current element is a letter.\r\n                // if the next element is a letter, a number or an opening parentheses, add the multiplication sign.\r\n                if (nextToken.match(/[a-zA-Z\\d(]/)) {\r\n                    normalizedExpr += '*'\r\n                }\r\n            } else if (crtToken.match(/\\d/)) {\r\n                // Current element is a number.\r\n                // if the next element is a letter or a parentheses, add the multiplication sign.\r\n                if (nextToken.match(/[a-zA-Z(]/)) {\r\n                    normalizedExpr += '*'\r\n                }\r\n            } else if (crtToken === ')') {\r\n                // Current element is a closing parentheses.\r\n                // if the next element is a letter, a number or an opening parentheses, add the multiplication sign\r\n                if (nextToken.match(/[a-zA-Z\\d(]/)) {\r\n                    normalizedExpr += '*'\r\n                }\r\n            }\r\n\r\n            // Go to next token\r\n            i++\r\n        }\r\n\r\n        // add the last token\r\n        return normalizedExpr + (nextToken ?? '')\r\n    }\r\n\r\n    /**\r\n     * Parse an expression using the shutting yard tree algorithms\r\n     * @param expr (string) Expression to analyse\r\n     * Returns a RPN list of items.\r\n     * @param uniformize\r\n     */\r\n    parse(expr: string, uniformize?: boolean): this {\r\n\r\n        // Normalize the input if required.\r\n        if (uniformize ?? this._uniformize) { expr = this.normalize(expr) }\r\n\r\n        let securityLoopLvl1 = 50\r\n        let securityLoopLvl2\r\n        let tokenPos = 0\r\n        let token: string\r\n        let tokenType: ShutingyardType\r\n        const securityLoopLvl2_default = 50\r\n\r\n        const outQueue: Token[] = []\r\n        const opStack: Token[] = []\r\n\r\n        while (tokenPos < expr.length) {\r\n            securityLoopLvl1--\r\n            if (securityLoopLvl1 === 0) {\r\n                console.log('SECURITY LEVEL 1 EXIT')\r\n                break\r\n            }\r\n\r\n            // Get the next token and the corresponding new (ending) position\r\n            [token, tokenPos, tokenType] = this.NextToken(expr, tokenPos)\r\n\r\n            switch (tokenType) {\r\n                case ShutingyardType.MONOM:\r\n                case ShutingyardType.COEFFICIENT:\r\n                case ShutingyardType.VARIABLE:\r\n                case ShutingyardType.CONSTANT:\r\n                    outQueue.push({ token, tokenType })\r\n                    break\r\n\r\n                case ShutingyardType.OPERATION:\r\n                    //If the token is an operator, o1, then:\r\n                    if (opStack.length > 0) {\r\n                        let opTop = opStack[opStack.length - 1]\r\n\r\n                        securityLoopLvl2 = +securityLoopLvl2_default\r\n\r\n                        //while there is an operator token o2, at the top of the operator stack and\r\n                        while (opTop.token in this._tokenConfig && (\r\n                            //either o1 is left-associative and its precedence is less than or equal to that of o2,\r\n                            (this._tokenConfig[token].associative === 'left' && this._tokenConfig[token].precedence <= this._tokenConfig[opTop.token].precedence)\r\n                            ||\r\n                            //or o1 is right associative, and has precedence less than that of o2,\r\n                            (this._tokenConfig[token].associative === 'right' && this._tokenConfig[token].precedence < this._tokenConfig[opTop.token].precedence)\r\n                        )\r\n                        ) {\r\n\r\n                            /* Security exit ! */\r\n                            securityLoopLvl2--\r\n                            if (securityLoopLvl2 === 0) {\r\n                                console.log('SECURITY LEVEL 2 OPERATION EXIT')\r\n                                break\r\n                            }\r\n\r\n                            // Add the operation to the queue\r\n                            outQueue.push(opStack.pop() ?? { token: '', tokenType: ShutingyardType.OPERATION })\r\n\r\n                            // Get the next operation on top of the Stack.\r\n                            if (opStack.length === 0) {\r\n                                break\r\n                            }\r\n                            opTop = opStack[opStack.length - 1]\r\n                        }\r\n                    }\r\n                    //at the end of iteration push o1 onto the operator stack\r\n                    opStack.push({ token, tokenType })\r\n                    break\r\n                case ShutingyardType.FUNCTION_ARGUMENT:\r\n                    securityLoopLvl2 = +securityLoopLvl2_default\r\n                    while (opStack[opStack.length - 1].token !== '(' && opStack.length > 0) {\r\n                        securityLoopLvl2--\r\n                        if (securityLoopLvl2 === 0) {\r\n                            console.log('SECURITY LEVEL 2 FUNCTION ARGUMENT EXIT')\r\n                            break\r\n                        }\r\n\r\n                        outQueue.push((opStack.pop()) ?? { token, tokenType })\r\n                    }\r\n                    break\r\n                case ShutingyardType.LEFT_PARENTHESIS:\r\n                    opStack.push({ token, tokenType })\r\n                    // Add an empty value if next element is negative.\r\n                    if (expr[tokenPos] === '-') {\r\n                        outQueue.push({ token: '0', tokenType: ShutingyardType.COEFFICIENT })\r\n                    }\r\n                    break\r\n                case ShutingyardType.RIGHT_PARENTHESIS:\r\n                    securityLoopLvl2 = +securityLoopLvl2_default\r\n                    //Until the token at the top of the stack is a left parenthesis, pop operators off the stack onto the output queue.\r\n                    while (opStack[opStack.length - 1].token !== '(' && opStack.length > 1 /*Maybe zero !? */) {\r\n                        securityLoopLvl2--\r\n                        if (securityLoopLvl2 === 0) {\r\n                            console.log('SECURITY LEVEL 2 CLOSING PARENTHESES EXIT')\r\n                            break\r\n                        }\r\n\r\n                        outQueue.push((opStack.pop()) ?? { token, tokenType })\r\n                    }\r\n\r\n                    //Pop the left parenthesis from the stack, but not onto the output queue.\r\n                    opStack.pop()\r\n                    break\r\n                case ShutingyardType.FUNCTION:\r\n                    opStack.push({ token, tokenType })\r\n                    break\r\n                default:\r\n                    // In theory, everything should be handled.\r\n                    console.log(`SHUTING YARD: ${tokenType} : ${token} `)\r\n            }\r\n        }\r\n\r\n        this._rpn = outQueue.concat(opStack.reverse())\r\n\r\n        return this\r\n    }\r\n}\r\n\r\nexport function toPixels<T>(coordinates: T, config: IGraphConfig, axis?: 'x' | 'y' | undefined): T {\r\n    // It's a number\r\n    if (typeof coordinates === 'number') {\r\n        if (axis === 'y') {\r\n            return coordinates * config.axis.y.y as T\r\n        }\r\n        return coordinates * config.axis.x.x as T\r\n    }\r\n\r\n    // It's a domain\r\n    if (isDOMAIN(coordinates)) {\r\n        let min, max\r\n        if (axis === 'y') {\r\n            min = config.origin.y +\r\n                coordinates.min * config.axis.y.y\r\n            max = config.origin.y +\r\n                coordinates.max * config.axis.y.y\r\n\r\n        } else {\r\n            min = config.origin.x +\r\n                coordinates.min * config.axis.x.x,\r\n                max = config.origin.x +\r\n                coordinates.max * config.axis.x.x\r\n        }\r\n\r\n        return {\r\n            min: Math.min(min, max),\r\n            max: Math.max(min, max)\r\n        } as T\r\n    }\r\n\r\n    // It's a point\r\n    if (isXY(coordinates)) {\r\n        return {\r\n            x: config.origin.x +\r\n                coordinates.x * config.axis.x.x +\r\n                coordinates.y * config.axis.y.x,\r\n            y: config.origin.y +\r\n                coordinates.x * config.axis.x.y +\r\n                coordinates.y * config.axis.y.y\r\n        } as T\r\n    }\r\n\r\n    // No changes\r\n    return coordinates\r\n}\r\n\r\nexport function toCoordinates(pixels: XY, config: IGraphConfig): XY {\r\n    return {\r\n        x: (pixels.x - config.origin.x) / config.axis.x.x,\r\n        y: (pixels.y - config.origin.y) / config.axis.y.y\r\n    }\r\n}\r\n\r\nexport function computeLine(\r\n    origin: XY,\r\n    direction: XY,\r\n    width: number,\r\n    height: number,\r\n    padding = 0,\r\n    half_axis = false,\r\n    length?: number,\r\n): [XY, XY] | null {\r\n    // Returned values\r\n    // (x1, y1) = start of the line\r\n    // (x2, y2) = end of the line\r\n    let x1 = 0,\r\n        y1 = 0,\r\n        x2 = 0,\r\n        y2 = 0\r\n\r\n    // Define special cases (vertical or horizontal direction)\r\n    if (direction.x === 0) {\r\n        // vertical line\r\n        x1 = origin.x\r\n\r\n        if (half_axis) {\r\n            y1 = origin.y + padding\r\n        } else {\r\n            y1 = direction.y > 0 ? +padding : height - padding\r\n        }\r\n\r\n        x2 = origin.x\r\n        if (length) {\r\n            y2 = direction.y < 0 ? origin.y + length * direction.y : 0 + padding\r\n        } else {\r\n            y2 = direction.y > 0 ? height - padding : 0 + padding\r\n        }\r\n\r\n    } else if (direction.y === 0) {\r\n        // horizontal line\r\n        if (half_axis) {\r\n            x1 = origin.x - padding\r\n        } else {\r\n            x1 = direction.x > 0 ? 0 + padding : width - padding\r\n        }\r\n        y1 = origin.y\r\n\r\n        if (length) {\r\n            x2 = direction.x > 0 ? origin.x + length * direction.x : 0 - padding\r\n        } else {\r\n            x2 = direction.x > 0 ? width - padding : 0 + padding\r\n        }\r\n        y2 = origin.y\r\n    } else {\r\n        // We have a diagonal line\r\n        let k_start = 0,\r\n            k_end = 0\r\n\r\n        // Two cases: direction.x is strictly positive or strictly negative.\r\n        if (direction.x > 0) {\r\n            k_start = half_axis ?\r\n                -padding / direction.x :\r\n                length ? length : (origin.x - padding) / direction.x\r\n            k_end = length ?\r\n                length : (width - origin.x - padding) / direction.x\r\n        } else if (direction.x < 0) {\r\n            k_start = half_axis ?\r\n                -padding / direction.x :\r\n                length ? length : (width - origin.x - padding) / direction.x\r\n            k_end = length ?\r\n                length : (origin.x - padding) / direction.x\r\n        }\r\n\r\n        // The coefficient must be positive\r\n        k_start = Math.abs(k_start)\r\n        k_end = Math.abs(k_end)\r\n\r\n        // Define the starting and ending points of the line.\r\n        x1 = origin.x - k_start * direction.x\r\n        y1 = origin.y - k_start * direction.y\r\n        x2 = origin.x + k_end * direction.x\r\n        y2 = origin.y + k_end * direction.y\r\n    }\r\n\r\n    // Determine if the line is visible in the canvas\r\n    if (\r\n        (x1 > width && x2 > width) ||\r\n        (x1 < 0 && x2 < 0) ||\r\n        (y1 > height && y2 > height) ||\r\n        (y1 < 0 && y2 < 0)\r\n    ) {\r\n        return null\r\n    }\r\n\r\n    return [{ x: x1, y: y1 }, { x: x2, y: y2 }]\r\n}\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * Get coordinate by radius / angle\r\n * Reference: https://stackoverflow.com/questions/5736398/how-to-calculate-the-svg-path-for-an-arc-of-a-circle\r\n * @param centerX\r\n * @param centerY\r\n * @param radius\r\n * @param angleInDegrees\r\n */\r\nexport function polarToCartesian(centerX: number, centerY: number, radius: number, angleInDegrees: number): XY {\r\n    const angleInRadians = -(angleInDegrees) * Math.PI / 180.0\r\n\r\n    return {\r\n        x: centerX + (radius * Math.cos(angleInRadians)),\r\n        y: centerY + (radius * Math.sin(angleInRadians))\r\n    }\r\n}\r\n\r\n/**\r\n * get the angle from Ox to OP, where O is origin and P is the handle\r\n * @param {Point} origin\r\n * @param {Point} handle\r\n * @returns {number}\r\n */\r\nexport function cartesianToAngle(origin: XY, handle: XY): number {\r\n    let angle\r\n    const dx = handle.x - origin.x,\r\n        dy = -(handle.y - origin.y)\r\n\r\n    angle = (handle.x - origin.x === 0) ? 90 : Math.atan(dy / dx) * 180.0 / Math.PI\r\n\r\n    // Depending on the position in the grid, modify the value.\r\n    if (dx >= 0) {\r\n        if (dy >= 0) {\r\n            // 0 -> 90\r\n\r\n        } else {\r\n            // 270->360\r\n            while (angle < 270) {\r\n                angle += 180\r\n            }\r\n        }\r\n    } else {\r\n        if (dy >= 0) {\r\n            // 90->180\r\n            while (angle < 90) {\r\n                angle += 180\r\n            }\r\n        } else {\r\n            // 180->270\r\n            while (angle < 180) {\r\n                angle += 180\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    return angle\r\n}\r\n\r\n\r\nexport function createMarker(svg: Svg, scale: number, shape?: string): { start: Marker, end: Marker } {\r\n\r\n    if (shape === 'x') {\r\n        return {\r\n            start: svg.marker(\r\n                scale,\r\n                scale,\r\n                function (add) {\r\n\r\n                    const p = add.path(`M0,0 L${scale},${scale} M${scale},0 L0,${scale}`)\r\n\r\n                    p.stroke({\r\n                        color: 'black',\r\n                        width: 1\r\n                    })\r\n                }).attr('markerUnits', 'userSpaceOnUse'),\r\n            end: svg.marker(\r\n                scale,\r\n                scale,\r\n                function (add) {\r\n                    const p = add.path(`M0,0 L${scale},${scale} M${scale},0 L0,${scale}`)\r\n\r\n                    p.stroke({\r\n                        color: 'black',\r\n                        width: 1\r\n                    })\r\n                }).attr('markerUnits', 'userSpaceOnUse'),\r\n        }\r\n    }\r\n\r\n    if (shape === '|') {\r\n        return {\r\n            start: svg.marker(\r\n                scale,\r\n                scale,\r\n                function (add) {\r\n                    const p = add.path(`M${scale / 2},${scale} L${scale / 2},0`)\r\n\r\n                    p.stroke({ color: 'black', width: 1 })\r\n                }).attr('markerUnits', 'userSpaceOnUse'),\r\n            end: svg.marker(\r\n                scale,\r\n                scale,\r\n                function (add) {\r\n                    const p = add.path(`M${scale / 2},${scale} L${scale / 2},0`)\r\n\r\n                    p.stroke({ color: 'black', width: 1 })\r\n                }).attr('markerUnits', 'userSpaceOnUse'),\r\n        }\r\n    }\r\n\r\n    return {\r\n        start: svg.marker(\r\n            scale * 1.2,\r\n            scale * 1.2,\r\n            function (add) {\r\n                add.path(`M1,0 L1,${scale}, L${scale * 1.2},${scale / 2} L1,0z`).rotate(180)\r\n            }).ref(0, scale / 2).attr('markerUnits', 'userSpaceOnUse'),\r\n        end: svg.marker(\r\n            scale * 1.2,\r\n            scale * 1.2,\r\n            function (add) {\r\n                add.path(`M1,0 L1,${scale}, L${scale * 1.2},${scale / 2} L1,0z`)\r\n            }).ref(scale, scale / 2).attr('markerUnits', 'userSpaceOnUse'),\r\n    }\r\n}\r\n\r\n//TODO: optimize the neearesPointToPath function\r\nexport function nearestPointToPath(value: XY, path: svgPath, precision = 1): XY {\r\n    const xy = path.pointAt(0)\r\n\r\n    function distance(a: XY, b: XY): number {\r\n        return (a.x - b.x) ** 2 + (a.y - b.y) ** 2\r\n    }\r\n\r\n    for (let t = precision; t < path.length(); t += precision) {\r\n        const { x, y } = path.pointAt(t)\r\n\r\n        // Check if the distance with the current value is less than the previous one.\r\n        if (distance(value, { x, y }) < distance(value, xy)) {\r\n            xy.x = x\r\n            xy.y = y\r\n        }\r\n    }\r\n    return xy\r\n}","import { Svg, G, Shape, Path } from \"@svgdotjs/svg.js\"\r\nimport {type IFigureAppearanceConfig, type IGraphConfig, isXY, type XY } from \"../pidraw.common\"\r\nimport { } from \"@svgdotjs/svg.js\"\r\nimport { Label } from \"../labels/Label\"\r\nimport { createMarker, toPixels } from \"../Calculus\"\r\n\r\nexport abstract class AbstractFigure {\r\n    #rootSVG: Svg\r\n    #name: string\r\n    #element: G\r\n    #shape: Shape\r\n    #appearance: IFigureAppearanceConfig\r\n    #static: boolean\r\n    #isDraggable: boolean\r\n    #label: Label | null\r\n\r\n    // abstract #makeShape(): Shape\r\n    abstract computed(): this\r\n\r\n    constructor(rootSVG: Svg, name: string) {\r\n        this.#rootSVG = rootSVG\r\n        this.#name = name\r\n        this.#static = false\r\n        this.#isDraggable = false\r\n\r\n        this.#label = null\r\n        this.#element = this.#rootSVG.group().attr('id', this.#name)\r\n        this.#appearance = {\r\n            stroke: {\r\n                color: 'black',\r\n                width: 1,\r\n                opacity: 1.0\r\n            },\r\n            fill: {\r\n                color: 'transparent',\r\n                opacity: 1.0\r\n            },\r\n        }\r\n\r\n        this.#shape = this.#element.path()\r\n    }\r\n\r\n    get element() { return this.#element }\r\n    get name() { return this.#name }\r\n    get rootSVG() { return this.#rootSVG }\r\n    get shape() { return this.#shape }\r\n    set shape(value: Shape) { this.#shape = value }\r\n    get appearance() { return this.#appearance }\r\n    set appearance(value) { this.#appearance = value }\r\n    get graphConfig() { return this.#rootSVG.data('config') as IGraphConfig }\r\n    get static() { return this.#static }\r\n    set static(value: boolean) { this.#static = value }\r\n    get isDraggable() { return this.#isDraggable }\r\n    set isDraggable(value: boolean) { this.#isDraggable = value }\r\n\r\n    hide() {\r\n        this.#element.hide()\r\n        return this\r\n    }\r\n    show() {\r\n        this.#element.show()\r\n        return this\r\n    }\r\n\r\n    // Defines the shape as strokeable and fillable.\r\n    strokeable(): Shape[] {\r\n        return [this.#shape]\r\n    }\r\n    fillable(): Shape[] {\r\n        return [this.#shape]\r\n    }\r\n\r\n    fill(color?: string): this {\r\n        if (color !== undefined) {\r\n            const [colorName, opacity] = color.split('/')\r\n            this.#appearance.fill.color = colorName\r\n            this.#appearance.fill.opacity = opacity === undefined ? 1 : +opacity\r\n        }\r\n\r\n        this.fillable().forEach((shape) => {\r\n            shape.fill(this.#appearance.fill)\r\n            shape.opacity(this.#appearance.fill.opacity)\r\n        })\r\n\r\n        return this\r\n    }\r\n\r\n    stroke(): this\r\n    stroke(color: string): this\r\n    stroke(strokeWidth: number): this\r\n    stroke(color: string, strokeWidth: number): this\r\n    stroke(color?: string | number, strokeWidth?: number): this {\r\n        if (typeof color === 'string') {\r\n            const [colorName, opacity] = color.split('/')\r\n            this.#appearance.stroke.color = colorName\r\n            this.#appearance.stroke.opacity = opacity === undefined ? 1 : +opacity\r\n            this.#appearance.stroke.width = strokeWidth ?? this.#appearance.stroke.width\r\n        }\r\n\r\n        if (typeof color === 'number' && strokeWidth === undefined) {\r\n            this.#appearance.stroke.width = color\r\n        }\r\n\r\n        this.strokeable().forEach((shape) => {\r\n            shape.stroke(this.#appearance.stroke)\r\n            shape.opacity(this.#appearance.stroke.opacity)\r\n        });\r\n\r\n        // Apply the color and width to the markers.\r\n        [this.#shape.reference('marker-start'), this.#shape.reference('marker-end')]\r\n            .filter(x => x !== null)\r\n            .forEach((marker) => {\r\n                marker?.children().forEach((m) => {\r\n                    m.attr({\r\n                        fill: this.#appearance.stroke.color,\r\n                        stroke: this.#appearance.stroke.color,\r\n                        'stroke-width': this.#appearance.stroke.width\r\n                    })\r\n                })\r\n            })\r\n\r\n        return this\r\n    }\r\n\r\n    dash(dasharray?: string): this {\r\n        this.strokeable().forEach((shape) => {\r\n            shape.stroke({ dasharray: dasharray ?? (this.graphConfig.axis.x.x / 2).toString() })\r\n        })\r\n        return this\r\n    }\r\n    dot(): this {\r\n        return this.dash((3).toString())\r\n    }\r\n\r\n    clear(all?: boolean): this {\r\n        // Clear the figure\r\n        if (all) {\r\n            this.#element.clear()\r\n            return this\r\n        }\r\n\r\n        // Remove everything but the label.\r\n        this.#element.children().forEach((child) => {\r\n            if (child.attr('id') !== `${this.#name}-label`) { child.remove() }\r\n        })\r\n        return this\r\n    }\r\n\r\n    update(forceUpdate?: boolean): this {\r\n        if (\r\n            (this.static || this.#isDraggable)\r\n            && forceUpdate !== true) {\r\n            return this\r\n        }\r\n\r\n        this.computed()\r\n\r\n        // Update the label.\r\n        this.updateLabel()\r\n\r\n        return this\r\n    }\r\n\r\n\r\n    // The position depends on the figure.\r\n    addLabel(text?: string, asHtml?: boolean, texConverter?: (value: string) => string): Label {\r\n        this.#label = new Label(\r\n            this.#element,\r\n            this.#name,\r\n            {\r\n                text: text ?? this.#name,\r\n                asHtml: asHtml ?? false,\r\n                alignement: 'br',\r\n                offset: { x: 0, y: 0 },\r\n                texConverter: texConverter ?? ((value: string) => value)\r\n            })\r\n\r\n        this.updateLabel()\r\n        return this.#label\r\n    }\r\n    get label() { return this.#label }\r\n    abstract moveLabel(): this\r\n    // Update the label of the figure when the figure is updated.\r\n    updateLabel(): this {\r\n        if (!this.#label) { return this }\r\n\r\n        // if the label is dynamic, update it.\r\n        this.#label.setLabel(this.computeLabel())\r\n\r\n        // Move the label position\r\n        this.moveLabel()\r\n\r\n        return this\r\n    }\r\n    computeLabel(): string {\r\n        return this.#label?.config.text ?? this.#name\r\n    }\r\n\r\n    move(pos: number): this\r\n    move(pos: XY): this\r\n    move(pos: XY | number): this {\r\n        if (isXY(pos)) {\r\n            const dx = toPixels(pos.x, this.graphConfig)\r\n            const dy = toPixels(pos.y, this.graphConfig)\r\n            this.#shape.translate(dx, -dy)\r\n        } else if (typeof pos === 'number') {\r\n            const d = toPixels(pos, this.graphConfig)\r\n            this.#shape.translate(d, 0)\r\n        }\r\n        return this\r\n    }\r\n\r\n    mark(value?: string | boolean, options?: (string | number)[]): this {\r\n        const scale = options?.filter(x => typeof x === 'number')[0] ?? 10\r\n        const shape = options?.filter(x => typeof x === 'string')[0] ?? undefined\r\n        const marker = createMarker(\r\n            this.#rootSVG,\r\n            scale as number,\r\n            shape as string\r\n        )\r\n\r\n        const path = this.#shape as Path\r\n\r\n        if (value === 'start') {\r\n            path.marker('start', marker.start)\r\n            return this\r\n        }\r\n        if (value === 'end') {\r\n            path.marker('end', marker.end)\r\n            return this\r\n        }\r\n\r\n        path.marker('start', marker.start)\r\n        path.marker('end', marker.end)\r\n\r\n        return this\r\n    }\r\n\r\n    follow(x: number, y: number): XY {\r\n        return { x, y }\r\n    }\r\n}","import {AbstractFigure} from \"./AbstractFigure\"\r\nimport type {XY} from \"../pidraw.common\"\r\nimport {Line as svgLine, Shape, Svg} from \"@svgdotjs/svg.js\"\r\nimport {computeLine, createMarker, mathLine, mathVector} from \"../Calculus\"\r\n\r\nexport type ILineType = 'segment' | 'ray' | 'line' | 'vector'\r\n\r\nexport interface ILineConfig {\r\n    bisector?: { d1: Line, d2: Line } | { A: XY, B: XY, C: XY },\r\n    director?: { A: XY, d: XY },\r\n    mediator?: { A: XY, B: XY },\r\n    parallel?: { to: Line, through: XY },\r\n    perpendicular?: { to: Line, through: XY },\r\n    shape?: ILineType\r\n    through?: { A: XY, B: XY },\r\n}\r\n\r\n// A line is a figure defined by a point and a vector\r\nexport class Line extends AbstractFigure {\r\n    #config: ILineConfig\r\n    #end: XY\r\n    #start: XY\r\n\r\n    constructor(rootSVG: Svg, name: string, values: ILineConfig) {\r\n        super(rootSVG, name)\r\n\r\n        // Default config\r\n        this.#config = Object.assign(\r\n            {shape: 'line',},\r\n            values\r\n        )\r\n\r\n        // Default values\r\n        this.#start = {x: 0, y: 0}\r\n        this.#end = {x: this.graphConfig.width, y: this.graphConfig.height}\r\n\r\n        // Update the shape\r\n        this.shape = this.#makeShape()\r\n\r\n        // Calculate\r\n        this.computed()\r\n\r\n        return this\r\n    }\r\n\r\n    get angle(): number {\r\n        return Math.atan2(-this.direction.y, this.direction.x) * 180 / Math.PI\r\n    }\r\n\r\n    computed(): this {\r\n        let direction = {x: 0, y: 0}\r\n\r\n        if (this.#config.through && this.#config.through.A && this.#config.through.B) {\r\n            this.start = this.#config.through.A\r\n            this.end = this.#config.through.B\r\n\r\n            // Direction\r\n            direction = this.direction\r\n        } else if (this.#config.director && this.#config.director.A && this.#config.director.d) {\r\n            this.start = this.#config.director.A\r\n            this.end = {\r\n                x: this.#config.director.A.x + this.#config.director.d.x,\r\n                y: this.#config.director.A.y + this.#config.director.d.y\r\n            }\r\n            direction = this.#config.director.d\r\n        } else if (this.#config.parallel && this.#config.parallel.to && this.#config.parallel.through) {\r\n            this.start = this.#config.parallel.through\r\n            direction = this.#config.parallel.to.direction\r\n        } else if (this.#config.perpendicular && this.#config.perpendicular.to && this.#config.perpendicular.through) {\r\n            this.start = this.#config.perpendicular.through\r\n            direction = this.#config.perpendicular.to.normal\r\n        } else if (this.#config.mediator && this.#config.mediator.A && this.#config.mediator.B) {\r\n            // Start point is the middle of both figures\r\n            this.start = {\r\n                x: (this.#config.mediator.A.x + this.#config.mediator.B.x) / 2,\r\n                y: (this.#config.mediator.A.y + this.#config.mediator.B.y) / 2\r\n            }\r\n\r\n            // We are in drawing mode. The y axis must be reversed\r\n            direction = {\r\n                x: this.#config.mediator.B.y - this.#config.mediator.A.y,\r\n                y: -(this.#config.mediator.B.x - this.#config.mediator.A.x)\r\n            }\r\n        } else if (this.#config.bisector) {\r\n            // Either we have two lines or three points\r\n            if ('d1' in this.#config.bisector && 'd2' in this.#config.bisector) {\r\n                // TODO: Implement the bisector of two lines\r\n            }\r\n\r\n            if ('A' in this.#config.bisector && 'B' in this.#config.bisector && 'C' in this.#config.bisector) {\r\n                const {A, B, C} = this.#config.bisector\r\n\r\n                const AB = new mathVector(A, B),\r\n                    normAB = AB.norm,\r\n                    AC = new mathVector(A, C),\r\n                    normAC = AC.norm\r\n\r\n\r\n                // the bisector go through A\r\n                this.start = A\r\n\r\n                // The direction of the bisector is the sum of the two normalise vectors\r\n                direction = {\r\n                    x: AB.x / normAB + AC.x / normAC,\r\n                    y: AB.y / normAB + AC.y / normAC\r\n                }\r\n\r\n            }\r\n        }\r\n\r\n        // If the line is not a segment and not a vector, we need to compute the line\r\n        // it is designed for the line and ray\r\n        if (this.#config.shape === undefined || this.#config.shape === 'line' || this.#config.shape === 'ray') {\r\n\r\n            // Get the start and end points of the line\r\n            const data = computeLine(\r\n                this.start,\r\n                direction,\r\n                this.graphConfig.width,\r\n                this.graphConfig.height,\r\n                0,\r\n                this.#config.shape === 'ray'\r\n            )\r\n\r\n\r\n            // (this.#config.shape === 'line' || this.#config.shape === 'ray') &&\r\n            // If the data is not null, update the start and end points of the line\r\n            if (data !== null) {\r\n                this.start = data[0]\r\n                this.end = data[1]\r\n            }\r\n            //\r\n        }\r\n\r\n        const shape = this.shape as svgLine\r\n        shape.plot(this.start.x, this.start.y, this.end.x, this.end.y)\r\n\r\n        return this\r\n    }\r\n\r\n    get config() {\r\n        return this.#config\r\n    }\r\n\r\n    set config(value: ILineConfig) {\r\n        this.#config = value\r\n        this.#makeShape()\r\n    }\r\n\r\n    get direction(): XY {\r\n        return {\r\n            x: this.end.x - this.start.x,\r\n            y: this.end.y - this.start.y\r\n        }\r\n    }\r\n\r\n    get end() {\r\n        return this.#end\r\n    }\r\n\r\n    set end(value: XY) {\r\n        this.#end = value\r\n    }\r\n\r\n    override follow(x: number, y: number): XY {\r\n        return this.math.projection({x, y})\r\n    }\r\n\r\n    get math(): mathLine {\r\n        return new mathLine(this.start, this.end)\r\n    }\r\n\r\n    override move(x: number | XY): this {\r\n        if (typeof x === 'number') {\r\n            // Get the normal vector\r\n            const d = new mathVector(this.normal).setLength(x)\r\n\r\n            return this.move(d)\r\n        }\r\n\r\n        return super.move(x)\r\n    }\r\n\r\n    moveLabel(): this {\r\n        if (!this.label) {\r\n            return this\r\n        }\r\n\r\n        // If it's a segment, place it at the middle of the segment\r\n        if (this.#config.shape === 'segment') {\r\n            const x = (this.start.x + this.end.x) / 2\r\n            const y = (this.start.y + this.end.y) / 2\r\n\r\n            let angle = -this.angle\r\n            if (angle > 90) {\r\n                angle = angle - 180\r\n            }\r\n            if (angle < -90) {\r\n                angle = angle + 180\r\n            }\r\n\r\n            this.label.move(x, y)\r\n            this.label.rotate(angle)\r\n            this.label.position()\r\n        }\r\n\r\n        return this\r\n    }\r\n\r\n    get normal(): XY {\r\n        const d = this.direction\r\n\r\n        return {\r\n            x: d.y,\r\n            y: -d.x\r\n        }\r\n    }\r\n\r\n    get start() {\r\n        return this.#start\r\n    }\r\n\r\n    set start(value: XY) {\r\n        this.#start = value\r\n    }\r\n\r\n    #makeShape(): Shape {\r\n        this.element.clear()\r\n\r\n        // Define the coordinates of the point\r\n        this.shape = this.element.line(\r\n            this.start.x, this.start.y,\r\n            this.end.x, this.end.y\r\n        )\r\n\r\n        // Apply the style\r\n        if (this.#config.shape === 'vector') {\r\n            const marker = createMarker(this.rootSVG, 10).end\r\n            const line = this.shape as svgLine\r\n            line.marker('end', marker)\r\n        }\r\n\r\n        // Apply the stroke and fill.\r\n        this.fill().stroke()\r\n\r\n        return this.shape\r\n    }\r\n}","import { Svg, Shape } from \"@svgdotjs/svg.js\"\r\nimport type { XY } from \"../pidraw.common\"\r\nimport { AbstractFigure } from \"./AbstractFigure\"\r\nimport { Line } from \"./Line\"\r\nimport { mathVector, toCoordinates, toPixels } from \"../Calculus\"\r\n\r\nexport type ILine = Line | 'Ox' | 'Oy'\r\nexport interface IPointConfig {\r\n    shape?: 'circle' | 'square' | 'crosshair'\r\n    size?: number,\r\n    pixels?: XY,\r\n    coordinates?: XY,\r\n    direction?: {\r\n        point: XY,\r\n        direction: ILine | { A: XY, B: XY },\r\n        distance: number,\r\n        perpendicular?: boolean\r\n    }\r\n    middle?: { A: XY, B: XY },\r\n    intersection?: { A: ILine, B: ILine },\r\n    projection?: { axis: ILine, point: XY },\r\n    symmetry?: { A: XY, B: XY | ILine }\r\n}\r\n\r\nexport class Point extends AbstractFigure {\r\n    // Coordinates of the point in pixels\r\n    #pixels: XY\r\n\r\n    #config: IPointConfig\r\n\r\n    get config() { return this.#config }\r\n    set config(value: IPointConfig) {\r\n        this.#config = value\r\n        this.#makeShape()\r\n    }\r\n\r\n    get size() {\r\n        return this.#config.size as unknown as number\r\n    }\r\n    set size(value: number) {\r\n        this.#config.size = value\r\n        this.#makeShape()\r\n    }\r\n\r\n    constructor(rootSVG: Svg, name: string, values: IPointConfig) {\r\n        super(rootSVG, name)\r\n\r\n        // Default values\r\n        this.#pixels = { x: NaN, y: NaN }\r\n\r\n        // Default config\r\n        this.#config = Object.assign(\r\n            {\r\n                size: 2,\r\n                shape: 'circle',\r\n            },\r\n            values\r\n        )\r\n\r\n        this.computed()\r\n\r\n        // Update the shape\r\n        this.shape = this.#makeShape()\r\n\r\n        // update the label\r\n\r\n        return this\r\n    }\r\n\r\n    get pixels() { return this.#pixels }\r\n    set pixels(value: XY) {\r\n        this.#pixels = value\r\n        this.shape.center(this.#pixels.x, this.#pixels.y)\r\n    }\r\n\r\n    // Used to store the original coordinates of the point\r\n    get coordinates(): XY {\r\n        return toCoordinates(this.#pixels, this.graphConfig)\r\n    }\r\n\r\n    get x() { return this.#pixels.x }\r\n    set x(value: number) {\r\n        this.#pixels.x = value\r\n        this.shape.center(value, this.#pixels.y)\r\n    }\r\n    get y() { return this.#pixels.y }\r\n    set y(value: number) {\r\n        this.#pixels.y = value\r\n        this.shape.center(this.#pixels.x, value)\r\n    }\r\n\r\n    asCircle(size?: number): this {\r\n        this.config.shape = 'circle'\r\n        this.config.size = size ?? 2\r\n        this.#makeShape()\r\n        return this\r\n    }\r\n    asSquare(size?: number): this {\r\n        this.config.shape = 'square'\r\n        this.config.size = size ?? 10\r\n        this.#makeShape()\r\n        return this\r\n    }\r\n    asCrosshair(size?: number): this {\r\n        this.config.shape = 'crosshair'\r\n        this.config.size = size ?? 10\r\n        this.#makeShape()\r\n        return this\r\n    }\r\n\r\n    #makeShape(): Shape {\r\n        this.clear()\r\n\r\n        switch (this.config.shape) {\r\n            case 'circle':\r\n                this.shape = this.element.circle(this.size)\r\n                    .center(this.#pixels.x, this.#pixels.y)\r\n                break\r\n            case 'square':\r\n                this.shape = this.element.rect(this.size, this.size)\r\n                    .center(this.#pixels.x, this.#pixels.y)\r\n                break\r\n            case 'crosshair':\r\n                {\r\n                    const diagonal_size = this.size / Math.sqrt(2)\r\n                    this.shape = this.element.path(\r\n                        `M ${-diagonal_size} ${diagonal_size} L ${diagonal_size} ${-diagonal_size} M ${-diagonal_size} ${-diagonal_size} L ${diagonal_size} ${diagonal_size}`\r\n                    ).center(this.#pixels.x, this.#pixels.y)\r\n                    break\r\n                }\r\n        }\r\n\r\n        // Apply the stroke and fill.\r\n        this.fill().stroke()\r\n\r\n        return this.shape\r\n    }\r\n\r\n    computed(): this {\r\n        // Update the coordinates, depending on the constraints settings\r\n        if (this.#config.coordinates) {\r\n            this.pixels = toPixels(this.#config.coordinates, this.graphConfig)\r\n            return this\r\n        }\r\n\r\n        if (this.#config.middle) {\r\n            const A = this.#config.middle.A\r\n            const B = this.#config.middle.B\r\n\r\n            this.#pixels.x = (A.x + B.x) / 2\r\n            this.#pixels.y = (A.y + B.y) / 2\r\n\r\n            return this\r\n        }\r\n\r\n        if (this.#config.projection) {\r\n\r\n            const pt = this.#config.projection.point\r\n\r\n            if (this.#config.projection.axis === 'Ox') {\r\n                this.x = pt.x\r\n                this.y = this.graphConfig.origin.y\r\n                return this\r\n            }\r\n\r\n            if (this.#config.projection.axis === 'Oy') {\r\n                this.x = this.graphConfig.origin.x\r\n                this.y = pt.y\r\n                return this\r\n            }\r\n\r\n            if (this.#config.projection.axis instanceof Line) {\r\n\r\n                const line = this.#config.projection.axis\r\n                const x0 = line.start.x\r\n                const y0 = line.start.y\r\n                const dx = pt.x - x0\r\n                const dy = pt.y - y0\r\n                const direction = line.direction\r\n                const dotProduct = dx * direction.x + dy * direction.y\r\n                const dotProductLength = direction.x * direction.x + direction.y * direction.y\r\n\r\n                this.x = x0 + dotProduct * direction.x / dotProductLength\r\n                this.y = y0 + dotProduct * direction.y / dotProductLength\r\n            }\r\n        }\r\n\r\n        if (this.#config.intersection) {\r\n            const line1 = this.#config.intersection.A as Line\r\n            const line2 = this.#config.intersection.B as Line\r\n            // Get the intersection of two lines.\r\n            const coord = line1.math\r\n                .intersection(line2.math)\r\n\r\n            if (coord === null) { return this }\r\n\r\n            this.pixels = coord\r\n        }\r\n\r\n        if (this.#config.symmetry) {\r\n            // Two cases: symmetry with a point or symmetry with a line\r\n            const A = this.#config.symmetry.A\r\n            const B = this.#config.symmetry.B\r\n\r\n            if (B instanceof Line) {\r\n                // Symmetry with a line\r\n                const d = new mathVector(B.direction)      // direction vector of the line \r\n                const n = d.normal   // normal vector to the line\r\n                const BA = new mathVector(A, B.start) // vector BA\r\n\r\n                const proj = BA.projection(n)\r\n\r\n                this.x = A.x + 2 * proj.x\r\n                this.y = A.y + 2 * proj.y\r\n            } else if (B === 'Ox') {\r\n                // Symmetry with the Ox axis\r\n                this.x = A.x\r\n                this.y = 2 * this.graphConfig.origin.y - A.y\r\n            } else if (B === 'Oy') {\r\n                // Symmetry with the Oy axis\r\n                this.x = 2 * this.graphConfig.origin.x - A.x\r\n                this.y = A.y\r\n            } else {\r\n                // Symmetry with a point B = (x0, y0)\r\n                const x0 = B.x\r\n                const y0 = B.y\r\n                // Compute the vector AB\r\n                const dx = A.x - x0\r\n                const dy = A.y - y0\r\n                // Compute the symmetry (symmetry center + vector AB)\r\n                this.x = x0 - dx\r\n                this.y = y0 - dy\r\n            }\r\n\r\n        }\r\n\r\n        if (this.#config.direction) {\r\n            const { point, direction, distance } = this.#config.direction\r\n\r\n            if (direction === 'Ox') {\r\n                this.x = point.x + toPixels(distance, this.graphConfig)\r\n                this.y = point.y\r\n                return this\r\n            }\r\n\r\n            if (direction === 'Oy') {\r\n                this.x = point.x\r\n                this.y = point.y - toPixels(distance, this.graphConfig)\r\n                return this\r\n            }\r\n\r\n            if (direction instanceof Line) {\r\n                const d = new mathVector(this.#config.direction.perpendicular ? direction.normal : direction.direction).unit\r\n                const pixels = toPixels(distance, this.graphConfig)\r\n\r\n                this.x = point.x + pixels * d.x\r\n                this.y = point.y + pixels * d.y\r\n\r\n                return this\r\n            }\r\n\r\n            if (direction.A && direction.B) {\r\n                const d = new mathVector(direction.A, direction.B)\r\n\r\n                this.x = point.x + distance * d.x\r\n                this.y = point.y + distance * d.y\r\n                return this\r\n            }\r\n        }\r\n\r\n        return this\r\n    }\r\n\r\n    moveLabel(): this {\r\n        if (this.label) {\r\n            this.label.move(this.x, this.y)\r\n        }\r\n\r\n        return this\r\n    }\r\n\r\n    override computeLabel(): string {\r\n        if (this.label?.config.text.includes('@')) {\r\n            const coords = toCoordinates(this.#pixels, this.graphConfig)\r\n\r\n            return this.label.config.text.replace('@', `(${coords.x};${coords.y})`)\r\n        }\r\n\r\n        return this.label?.config.text ?? this.name\r\n    }\r\n}","import { Svg } from \"@svgdotjs/svg.js\"\r\nimport { AbstractFigure } from \"./AbstractFigure\"\r\nimport type { DOMAIN, XY } from \"../pidraw.common\"\r\nimport { NumExp, toPixels, toCoordinates } from \"../Calculus\"\r\nimport { Path } from \"@svgdotjs/svg.js\"\r\n\r\nexport interface IPlotConfig {\r\n    expression: string,\r\n    domain?: DOMAIN,\r\n    image?: DOMAIN,\r\n    samples?: number\r\n}\r\n\r\nexport class Plot extends AbstractFigure {\r\n    #config: IPlotConfig\r\n    #numExp: NumExp\r\n    get config() { return this.#config }\r\n    set config(value: IPlotConfig) {\r\n        this.#config = value\r\n\r\n        this.#numExp = new NumExp(this.#config.expression)\r\n\r\n        this.computed()\r\n    }\r\n\r\n    constructor(rootSVG: Svg, name: string, values: IPlotConfig) {\r\n        super(rootSVG, name)\r\n\r\n        // Store the constraints\r\n        this.#config = Object.assign({\r\n            expression: '',\r\n            samples: this.graphConfig.axis.x.x,\r\n        }, values)\r\n\r\n        // Generate the base shape\r\n        this.shape = this.#makeShape()\r\n\r\n        this.#numExp = new NumExp(this.#config.expression)\r\n\r\n        // Compute the shape\r\n        this.computed()\r\n        return this\r\n    }\r\n\r\n    #makeShape() {\r\n        this.element.clear()\r\n\r\n        // Create the path\r\n        this.shape = this.element.path('M0 0')\r\n\r\n        // Apply the stroke and fill.\r\n        this.fill().stroke()\r\n\r\n        // Add the shape to the group.\r\n        this.element.add(this.shape)\r\n\r\n        return this.shape\r\n    }\r\n\r\n    computed(): this {\r\n        // Get the mathematical function from the config\r\n        const fn: string = this.#config.expression\r\n\r\n        if (!fn || fn === '') { return this }\r\n\r\n        // Get the domain from the config\r\n        const minX = -this.graphConfig.origin.x / this.graphConfig.axis.x.x - 1\r\n        const maxX = (this.graphConfig.width - this.graphConfig.origin.x) / this.graphConfig.axis.x.x + 1\r\n        const domain = (this.#config.domain ?? { min: minX, max: maxX })\r\n        const image = (this.#config.image ?? { min: -Infinity, max: Infinity })\r\n\r\n        // Get the samples from the config\r\n        const samples = (this.#config.samples ?? this.graphConfig.axis.x.x)\r\n\r\n        // Make the numeric expression.\r\n        const expr = this.#numExp\r\n\r\n\r\n        // Get the (x;y) points from the function\r\n        // 0 < x < width\r\n        // y = fn(x)\r\n        const points: XY[] = []\r\n\r\n        for (let x = domain.min; x < domain.max; x += 1 / samples) {\r\n            const y = expr.evaluate({ x })\r\n\r\n            if (isNaN(y) || y === Infinity || y === -Infinity || y < image.min || y > image.max) {\r\n                const coords = toPixels({ x, y: 0 }, this.graphConfig)\r\n                points.push({ x: coords.x, y: NaN })\r\n            } else {\r\n                points.push(toPixels({ x, y }, this.graphConfig))\r\n            }\r\n        }\r\n\r\n        // Create the path string from the points.\r\n        let previous: XY = points[0]\r\n        const path = points.map(({ x, y }, index) => {\r\n            // Determine the path command\r\n            let cmd = index === 0 ? 'M' : 'L'\r\n\r\n            if (isNaN(y)) {\r\n                // If the y value is not defined, move the cursor to the next point.\r\n                cmd = 'M'\r\n                y = -123456789\r\n            } else if (previous.y === -123456789) {\r\n                // If the previous value was not defined, move the cursor to the next point.\r\n                cmd = 'M'\r\n            }\r\n            // Set the current point as the previous point\r\n            previous = { x, y }\r\n\r\n            return `${cmd} ${x} ${y}`\r\n        }).join(' ')\r\n\r\n        // Update the path\r\n        const shape = this.shape as Path\r\n        shape.plot(path)\r\n\r\n        return this\r\n    }\r\n\r\n    moveLabel(): this {\r\n        return this\r\n    }\r\n\r\n    evaluate(x: number, asCoordinates?: boolean): XY {\r\n        if (asCoordinates === true) {\r\n            return { x, y: this.#numExp.evaluate({ x }) }\r\n        }\r\n\r\n        return toPixels(\r\n            { x, y: this.#numExp.evaluate({ x }) }\r\n            , this.graphConfig)\r\n    }\r\n\r\n    override follow(x: number, y: number): XY {\r\n\r\n        /**\r\n         * TODO: implement the nearestPointToPath function\r\n         * return nearestPointToPath( { x, y }, fig.shape as svgPath, 1 )\r\n         */\r\n        const pt = toCoordinates({ x, y }, this.graphConfig)\r\n        return this.evaluate(pt.x)\r\n    }\r\n}","import { Svg, Circle as svgCircle } from \"@svgdotjs/svg.js\"\r\nimport { AbstractFigure } from \"./AbstractFigure\"\r\nimport type { XY } from \"../pidraw.common\"\r\nimport { Shape } from \"@svgdotjs/svg.js\"\r\nimport { distanceAB, toPixels } from \"../Calculus\"\r\n\r\nexport interface ICircleConfig {\r\n    center: XY,\r\n    radius: number | XY\r\n}\r\n\r\nexport class Circle extends AbstractFigure {\r\n    #config: ICircleConfig\r\n\r\n    get config() { return this.#config }\r\n    set config(value: ICircleConfig) {\r\n        this.#config = value\r\n        this.#makeShape()\r\n    }\r\n\r\n    get center() { return this.#config.center }\r\n    get radius(): number {\r\n        if (typeof this.#config.radius === 'number') {\r\n            return toPixels(this.#config.radius, this.graphConfig)\r\n        }\r\n\r\n        return distanceAB(this.center, this.#config.radius)\r\n    }\r\n\r\n    constructor(rootSVG: Svg, name: string, values: ICircleConfig) {\r\n        super(rootSVG, name)\r\n\r\n        // Default values\r\n        this.#config = Object.assign({\r\n            figures: [],\r\n            property: 'fixed',\r\n            center: { x: 0, y: 0 },\r\n            radius: 1,\r\n        }, values)\r\n\r\n        this.#makeShape()\r\n        this.computed()\r\n\r\n    }\r\n\r\n    #makeShape(): Shape {\r\n        this.element.clear()\r\n\r\n        this.shape = this.element.circle(this.radius)\r\n            .center(this.center.x, this.center.y)\r\n\r\n        this.shape.stroke(this.appearance.stroke.color)\r\n        this.shape.fill(this.appearance.fill)\r\n        return this.shape\r\n    }\r\n\r\n    computed(): this {\r\n        const shape = this.shape as svgCircle\r\n        shape.radius(this.radius)\r\n        shape.center(this.center.x, this.center.y)\r\n\r\n        return this\r\n    }\r\n\r\n    moveLabel(): this {\r\n        if (this.label) {\r\n            this.label.move(\r\n                this.center.x + this.radius / 2,\r\n                this.center.y - this.radius / 2\r\n            )\r\n        }\r\n\r\n        return this\r\n    }\r\n\r\n    override follow(x: number, y: number): XY {\r\n        const r = this.radius\r\n        const dx = x - this.center.x\r\n        const dy = y - this.center.y\r\n        const d = Math.sqrt(dx ** 2 + dy ** 2)\r\n        x = dx / d * r + this.center.x\r\n        y = dy / d * r + this.center.y\r\n\r\n        return { x, y }\r\n    }\r\n}","import { Svg, Polygon as svgPolygon } from \"@svgdotjs/svg.js\"\r\nimport { AbstractFigure } from \"./AbstractFigure\"\r\nimport { type XY, isXY } from \"../pidraw.common\"\r\nimport { distanceAB, mathVector, toPixels } from \"../Calculus\"\r\n\r\nexport interface IPolygonConfig {\r\n    vertices?: XY[]\r\n    regular?: {\r\n        center: XY\r\n        radius: number | XY,\r\n        sides: number\r\n    }\r\n    mark?: {\r\n        center?: {\r\n            length?: number\r\n        }\r\n    }\r\n}\r\nexport class Polygon extends AbstractFigure {\r\n    #config: IPolygonConfig\r\n\r\n    get config() { return this.#config }\r\n    set config(value: IPolygonConfig) {\r\n        this.#config = value\r\n        this.#makeShape()\r\n    }\r\n\r\n    get vertices() {\r\n        return this.#config.vertices\r\n    }\r\n\r\n    get radius(): number {\r\n        if (!this.#config.regular) { return this.graphConfig.axis.x.x }\r\n\r\n        if (typeof this.#config.regular.radius === 'number') {\r\n            return toPixels(this.#config.regular.radius, this.graphConfig)\r\n        }\r\n\r\n        if (this.#config.vertices && isXY(this.#config.vertices[0]) && isXY(this.#config.regular.radius)) {\r\n            return distanceAB(this.#config.vertices[0], this.#config.regular.radius)\r\n        }\r\n\r\n        return 0\r\n    }\r\n\r\n    constructor(rootSVG: Svg, name: string, values: IPolygonConfig) {\r\n        super(rootSVG, name)\r\n\r\n        // Default values\r\n        this.#config = Object.assign({\r\n            shape: 'polygon',\r\n        }, values)\r\n\r\n        this.#makeShape()\r\n        this.computed()\r\n    }\r\n\r\n    #figuresXYtoArray(): [number, number][] {\r\n        const arr: [number, number][] = []\r\n        this.#config.vertices?.forEach(pt => {\r\n            if (isXY(pt)) {\r\n                arr.push([pt.x, pt.y])\r\n            }\r\n        })\r\n\r\n        return arr\r\n    }\r\n    #makeShape() {\r\n        this.element.clear()\r\n\r\n        const pointsCoordinates = this.#figuresXYtoArray()\r\n        this.shape = this.element.polygon(pointsCoordinates)\r\n\r\n        this.fill().stroke()\r\n\r\n        this.element.add(this.shape)\r\n\r\n        // Add marks if they exists.\r\n        if (this.#config.mark) {\r\n\r\n            // Set the length of the mark\r\n            const length = this.#config.mark.center?.length ?? 0\r\n\r\n            // Get the center of the figure. It's the average of all vertices.\r\n            const center = pointsCoordinates.reduce((acc, pt) => {\r\n                acc.x += pt[0]\r\n                acc.y += pt[1]\r\n                return acc\r\n            }\r\n                , { x: 0, y: 0 })\r\n\r\n            center.x /= pointsCoordinates.length\r\n            center.y /= pointsCoordinates.length\r\n\r\n            // Draw a thin gray line from the center to each vertex\r\n            pointsCoordinates.forEach(pt => {\r\n                // Get the vector from the center to the vertex\r\n                const OP = new mathVector(center, { x: pt[0], y: pt[1] })\r\n                if (length) {\r\n                    OP.setLength(length * 20)\r\n                }\r\n\r\n                this.element.line(center.x, center.y, center.x + OP.x, center.y + OP.y).stroke({ color: 'gray', width: 0.5 })\r\n            })\r\n\r\n        }\r\n        return this.shape\r\n    }\r\n\r\n\r\n    computed(): this {\r\n        const polygon = this.shape as svgPolygon\r\n\r\n        if (this.#config.vertices && this.#config.vertices.length > 2) {\r\n            polygon.plot(this.#figuresXYtoArray())\r\n        } else if (\r\n            this.#config.regular\r\n        ) {\r\n\r\n            const plotPoints: [number, number][] = []\r\n            const r = this.radius\r\n\r\n            const OP = new mathVector(\r\n                this.#config.regular.center,\r\n                isXY(this.#config.regular.radius) ?\r\n                    this.#config.regular.radius :\r\n                    { x: this.#config.regular.center.x, y: this.#config.regular.center.y - r }\r\n            )\r\n\r\n            for (let i = 0; i < this.#config.regular.sides; i++) {\r\n                plotPoints.push([\r\n                    this.#config.regular.center.x + OP.x,\r\n                    this.#config.regular.center.y + OP.y\r\n                ])\r\n\r\n                // Rotate the vector\r\n                OP.rotate(360 / this.#config.regular.sides)\r\n            }\r\n\r\n            polygon.plot(plotPoints)\r\n\r\n        }\r\n        return this\r\n    }\r\n    override update(): this {\r\n        this.computed()\r\n        return this\r\n    }\r\n\r\n    moveLabel(): this {\r\n        return this\r\n    }\r\n}","import { Svg, Path as svgPath } from \"@svgdotjs/svg.js\"\r\nimport { AbstractFigure } from \"./AbstractFigure\"\r\nimport type { XY } from \"../pidraw.common\"\r\nimport { computeLine } from \"../Calculus\"\r\n\r\ninterface IGridConfig {\r\n    axis: { x: XY, y: XY },\r\n    scale?: { x: number, y: number },\r\n    origin: XY,\r\n    width: number,\r\n    height: number,\r\n    subdivisions: number\r\n\r\n}\r\nexport class Grid extends AbstractFigure {\r\n    #config: IGridConfig\r\n\r\n    get config() { return this.#config }\r\n    set config(value: IGridConfig) {\r\n        this.#config = value\r\n        this.computed()\r\n    }\r\n\r\n    constructor(rootSVG: Svg, name: string, values: IGridConfig) {\r\n        super(rootSVG, name)\r\n\r\n        this.static = true\r\n\r\n        this.#config = Object.assign(\r\n            {\r\n                ...this.graphConfig,\r\n                subdivisions: 0\r\n            },\r\n            values\r\n        )\r\n\r\n        // TODO: implement a \"scaling factor\" for the axis\r\n        // this.#config.axis.x.x = Math.PI * this.#config.axis.x.x / 4\r\n\r\n        // Generate the base shape\r\n        this.shape = this.#makeShape()\r\n\r\n        // Compute the shape\r\n        this.computed()\r\n        return this\r\n    }\r\n\r\n    #makeShape() {\r\n        this.element.clear()\r\n\r\n        // Create the path\r\n        this.shape = this.element.path()\r\n\r\n        // Apply the stroke.\r\n        this.stroke()\r\n\r\n        // Add the shape to the group.\r\n        this.element.add(this.shape)\r\n\r\n        return this.shape as svgPath\r\n    }\r\n\r\n    computed(): this {\r\n        const gridPath = [\r\n            ...this.#computeLines(this.#config.axis.x, this.#config.axis.y),\r\n            ...this.#computeLines(this.#config.axis.y, this.#config.axis.x)\r\n        ]\r\n\r\n        // BUild the path\r\n        const path = gridPath.reduce((acc, cur) => {\r\n            const [start, end] = cur\r\n            return acc + `M${start.x},${start.y} L${end.x},${end.y}`\r\n        }, '')\r\n\r\n        const shape = this.shape as svgPath\r\n        shape.plot(path)\r\n\r\n        return this\r\n\r\n\r\n    }\r\n\r\n    #computeLines(xDirection: XY, yDirection: XY): [XY, XY][] {\r\n        // X axis lines (aka horizontal lines)\r\n        let x = +this.#config.origin.x,\r\n            y = +this.#config.origin.y\r\n\r\n        const gridPath: [XY, XY][] = []\r\n\r\n        // Determine the first line (through the origin)\r\n        let data = computeLine(\r\n            { x, y },\r\n            xDirection,\r\n            this.#config.width,\r\n            this.#config.height,\r\n        )\r\n\r\n        // 'Horizontal lines' :\r\n        // direction is the axis.x\r\n        // moving the lines in the direction of the axis.y\r\n        while (data) {\r\n            gridPath.push(data)\r\n\r\n            // Move to the next line\r\n            x += yDirection.x\r\n            y -= yDirection.y\r\n\r\n            data = computeLine(\r\n                { x, y },\r\n                xDirection,\r\n                this.#config.width,\r\n                this.#config.height,\r\n            )\r\n\r\n            if (gridPath.length > 1000) { throw new Error('Too many lines') }\r\n        }\r\n\r\n        x = this.#config.origin.x - yDirection.x\r\n        y = this.#config.origin.y + yDirection.y\r\n\r\n        data = computeLine(\r\n            { x, y },\r\n            xDirection,\r\n            this.#config.width,\r\n            this.#config.height)\r\n\r\n        while (data) {\r\n            gridPath.push(data)\r\n\r\n            // Move to the next line\r\n            x -= yDirection.x\r\n            y += yDirection.y\r\n\r\n            // Make the next line\r\n            data = computeLine(\r\n                { x, y },\r\n                xDirection,\r\n                this.#config.width,\r\n                this.#config.height)\r\n\r\n            if (gridPath.length > 1000) { throw new Error('Too many lines') }\r\n        }\r\n\r\n        return gridPath\r\n    }\r\n\r\n    moveLabel(): this {\r\n        return this\r\n    }\r\n}","import { Path as svgPath, Svg, Marker } from \"@svgdotjs/svg.js\"\r\nimport { AbstractFigure } from \"./AbstractFigure\"\r\nimport type { XY } from \"../pidraw.common\"\r\nimport { cartesianToAngle, createMarker, distanceAB, mathVector, numberCorrection, polarToCartesian, toPixels } from \"../Calculus\"\r\n\r\nexport interface IArcConfig {\r\n    start: XY,\r\n    center: XY\r\n    end: XY,\r\n    radius?: number | XY,\r\n    morphToSquare?: boolean,\r\n    sector?: boolean,\r\n    mark?: boolean\r\n}\r\n\r\nexport class Arc extends AbstractFigure {\r\n    #config: IArcConfig\r\n    #markers: { start: Marker, end: Marker }\r\n\r\n    get config() { return this.#config }\r\n    set config(value: IArcConfig) {\r\n        this.#config = value\r\n        this.#makeShape()\r\n        this.computed()\r\n    }\r\n\r\n    get center() { return this.#config.center }\r\n    get start() { return this.#config.start }\r\n    get end() { return this.#config.end }\r\n    get radius() {\r\n        if (typeof this.#config.radius === 'number') {\r\n            return toPixels(this.#config.radius, this.graphConfig)\r\n        }\r\n\r\n        return distanceAB(this.center, this.#config.radius ?? this.#config.start)\r\n    }\r\n\r\n\r\n    constructor(rootSVG: Svg, name: string, values: IArcConfig) {\r\n        super(rootSVG, name)\r\n\r\n        this.#config = Object.assign({\r\n            start: { x: 0, y: 0 },\r\n            center: { x: 10, y: 10 },\r\n            end: { x: 0, y: 10 },\r\n            radius: this.graphConfig.axis.x.x,\r\n            morphToSquare: true,\r\n            sector: false,\r\n            mark: false\r\n        }, values)\r\n\r\n        this.#markers = createMarker(this.rootSVG, 8)\r\n\r\n        // Store the config -> it triggers makeShape and computed.\r\n        this.config = values\r\n    }\r\n    #makeShape() {\r\n        this.element.clear()\r\n\r\n        // Create the path\r\n        this.shape = this.element.path('M0 0')\r\n\r\n        // Apply the stroke and fill.\r\n        this.fill().stroke()\r\n\r\n        // Add the shape to the group.\r\n        this.element.add(this.shape)\r\n\r\n        return this.shape\r\n    }\r\n\r\n    computed(): this {\r\n        const path = this.shape as svgPath\r\n        path.plot(this.getPath())\r\n        return this\r\n    }\r\n    moveLabel(): this {\r\n        // No label - no need to continue\r\n        if (!this.label) { return this }\r\n\r\n        // Radius of the arc.\r\n        const r = this.radius\r\n        // Determiner the position of the arc (greater or smaller than 180)\r\n        const d = this.angle < 180 ? 1 : -1\r\n\r\n        // Make the OA and OB unit vectors\r\n        const OA = new mathVector(this.center, this.start).unit\r\n        const OB = new mathVector(this.center, this.end).unit\r\n        // Make the unit direction vector\r\n        const v = OA.add(OB).unit\r\n\r\n        const x = this.center.x + d * v.x * (r + 20)\r\n        const y = this.center.y + d * v.y * (r + 20)\r\n\r\n        // Auto label placement.\r\n        if (d * v.x > 0 && d * v.y > 0) {\r\n            // Label is bottom right\r\n            this.label.config.alignement = 'mr'\r\n        } else if (d * v.x < 0 && d * v.y > 0) {\r\n            // Label is bottom left\r\n            this.label.config.alignement = 'ml'\r\n        } else if (d * v.x > 0 && d * v.y < 0) {\r\n            // label is top right\r\n            this.label.config.alignement = 'mr'\r\n        } else if (d * v.x < 0 && d * v.y < 0) {\r\n            // Label is top left\r\n            this.label.config.alignement = 'ml'\r\n        }\r\n\r\n        this.label.move(x, y)\r\n\r\n        return this\r\n    }\r\n\r\n    get angle(): number {\r\n        const { start, end } = this.getAngles()\r\n        if (end - start < 0) {\r\n            return 360 + end - start\r\n        }\r\n\r\n        return end - start\r\n    }\r\n\r\n    get isSquare(): boolean {\r\n        return numberCorrection((this.start.x - this.center.x) * (this.end.x - this.center.x) + (this.start.y - this.center.y) * (this.end.y - this.center.y)) === 0\r\n    }\r\n\r\n    /**\r\n     * Calculate the start and end angle of an arc\r\n     * @returns {{startAngle: number, endAngle: number}}\r\n     */\r\n    getAngles(): { start: number, end: number } {\r\n        // Get the angles defined be the three points\r\n        return {\r\n            start: +cartesianToAngle(this.center, this.start).toFixed(10),\r\n            end: +cartesianToAngle(this.center, this.end).toFixed(10)\r\n        }\r\n    }\r\n\r\n    getPath(): string {\r\n        // Get the angles\r\n        const { start, end } = this.getAngles(),\r\n            radius = (this.#config.morphToSquare && this.isSquare) ? this.radius / 2 : this.radius,\r\n            startXY = polarToCartesian(this.center.x, this.center.y, radius, start),\r\n            endXY = polarToCartesian(this.center.x, this.center.y, radius, end)\r\n\r\n        if (this.#config.morphToSquare && this.isSquare) {\r\n            return this._describeSquare(this.center, startXY, endXY)\r\n        } else {\r\n            return this._describeArc(this.center, startXY, endXY, radius, end - start)\r\n        }\r\n    }\r\n\r\n    private _describeSquare(center: XY, start: XY, end: XY): string {\r\n        return [\r\n            \"M\", start.x, start.y,\r\n            \"l\", (end.x - center.x), (end.y - center.y),\r\n            \"L\", end.x, end.y\r\n        ].join(\" \")\r\n    }\r\n\r\n    private _describeArc(center: XY, start: XY, end: XY, radius: number, angle: number): string {\r\n        const largeArcFlag = (angle + 360) % 360 <= 180 ? 0 : 1,\r\n            swipeFlag = 0\r\n\r\n        // TODO: Mark an angle: use always the smallest arc ?\r\n        // this._mark &&\r\n        // if (angle < 0 && angle > -180) {\r\n        //     largeArcFlag = (largeArcFlag + 1) % 2\r\n        //     swipeFlag = 1\r\n        // }\r\n\r\n        let p = [\r\n            \"M\", start.x, start.y,\r\n            \"A\", radius, radius, 0, largeArcFlag, swipeFlag, end.x, end.y\r\n        ]\r\n\r\n        if (this.#config.sector) {\r\n            p = p.concat(['L', center.x, center.y, 'L', start.x, start.y])\r\n        }\r\n\r\n        return p.join(\" \")\r\n    }\r\n}\r\n\r\n\r\n\r\n","import { Marker, Svg, Line as svgLine } from \"@svgdotjs/svg.js\"\r\nimport { COORDINATE_SYSTEM, type IAxisConfig, type XY } from \"../pidraw.common\"\r\nimport { AbstractFigure } from \"./AbstractFigure\"\r\nimport { computeLine, createMarker } from \"../Calculus\"\r\n\r\nexport interface ICoordinateSystem {\r\n    x: { direction: XY } & IAxisConfig,\r\n    y: { direction: XY } & IAxisConfig\r\n}\r\n\r\nexport class CoordinateSystem extends AbstractFigure {\r\n    #config: ICoordinateSystem\r\n    #axis: { x: svgLine, y: svgLine }\r\n\r\n    get config() { return this.#config }\r\n    set config(value: ICoordinateSystem) {\r\n        this.#config = value\r\n        this.computed()\r\n    }\r\n\r\n    get xAxis() { return this.#axis.x }\r\n    get yAxis() { return this.#axis.y }\r\n\r\n    constructor(rootSVG: Svg, name: string, values: COORDINATE_SYSTEM | ICoordinateSystem) {\r\n        super(rootSVG, name)\r\n\r\n        this.static = true\r\n\r\n        if (Object.values(COORDINATE_SYSTEM).includes(values as COORDINATE_SYSTEM)) {\r\n            this.#config = this.#defaultConfig(values as COORDINATE_SYSTEM)\r\n        } else {\r\n            this.#config = values as ICoordinateSystem\r\n        }\r\n\r\n        // Generate the base shape\r\n        this.#axis = this.#makeShape()\r\n\r\n        // Compute the shape\r\n        this.computed()\r\n\r\n        return this\r\n    }\r\n\r\n    #defaultConfig(coordinateSystem: COORDINATE_SYSTEM): ICoordinateSystem {\r\n        if (coordinateSystem === COORDINATE_SYSTEM.POLAR) {\r\n            // TODO: Implement the polar coordinate system\r\n        }\r\n\r\n        // Default return 2D Cartesian coordinate system\r\n        return {\r\n            x: {\r\n                direction: this.graphConfig.axis.x,\r\n                color: 'black',\r\n                padding: 20,\r\n                half: false,\r\n                length: 0\r\n            },\r\n            y: {\r\n                direction: this.graphConfig.axis.y,\r\n                color: 'black',\r\n                padding: 20,\r\n                half: false,\r\n                length: 0\r\n            }\r\n        }\r\n    }\r\n\r\n    #makeShape(): { x: svgLine, y: svgLine } {\r\n        this.element.clear()\r\n\r\n        // Create the path\r\n        this.shape = this.element.group()\r\n            .attr('id', 'coordinate-system')\r\n\r\n        // Create the axis\r\n        const axis: { x: svgLine, y: svgLine } = {\r\n            x: this.element.line(0, 0, 0, 0)\r\n                .attr('id', 'Ox'),\r\n            y: this.element.line(0, 0, 0, 0)\r\n                .attr('id', 'Oy')\r\n        }\r\n        this.shape.add(axis.x)\r\n            .add(axis.y)\r\n\r\n\r\n        // Add the shape to the group.\r\n        this.element.add(this.shape)\r\n\r\n        return axis\r\n    }\r\n    computed(): this {\r\n        // Loop through each axis and update the position, length, ...\r\n        this.#updateAxis(this.#axis.x, this.#config.x.direction, this.#config.x)\r\n        this.#updateAxis(this.#axis.y, this.#config.y.direction, this.#config.y)\r\n\r\n        return this\r\n    }\r\n    moveLabel(): this {\r\n        throw new Error(\"Method not implemented.\")\r\n    }\r\n\r\n    #updateAxis(axis: svgLine, direction: XY, config?: IAxisConfig): svgLine {\r\n        const color = config?.color ?? 'black'\r\n        const padding = config?.padding ?? 0\r\n        const half_axis = config?.half ?? false\r\n        const length = config?.length ?? 0\r\n\r\n        const arrow: Marker = createMarker(this.rootSVG, 10).end\r\n            .fill(color)\r\n\r\n        // origin: XY, direction: XY, graph: { width: number, height: number }, padding = 0, half_axis = false, length?: number\r\n        const data = computeLine(\r\n            this.graphConfig.origin,\r\n            direction,\r\n            this.graphConfig.width,\r\n            this.graphConfig.height,\r\n            padding,\r\n            half_axis,\r\n            length\r\n        ) as unknown as [XY, XY]\r\n\r\n        if (data !== null) {\r\n            axis.plot(data[0].x, data[0].y, data[1].x, data[1].y)\r\n        }\r\n\r\n        axis.stroke({ color: color, width: 1 })\r\n            .marker('end', arrow)\r\n        this.shape.add(axis)\r\n\r\n        return axis\r\n    }\r\n\r\n\r\n}","import { Svg } from \"@svgdotjs/svg.js\"\r\nimport { AbstractFigure } from \"./AbstractFigure\"\r\nimport type { DOMAIN, XY } from \"../pidraw.common\"\r\nimport { NumExp, toPixels } from \"../Calculus\"\r\nimport { Path } from \"@svgdotjs/svg.js\"\r\n\r\nexport interface IParametricConfig {\r\n    expressions: {\r\n        x: string,\r\n        y: string\r\n    },\r\n    domain?: DOMAIN,\r\n    samples?: number\r\n}\r\n\r\nexport class Parametric extends AbstractFigure {\r\n    #config: IParametricConfig\r\n    #numExp: {\r\n        x: NumExp,\r\n        y: NumExp\r\n    }\r\n    get config() { return this.#config }\r\n    set config(value: IParametricConfig) {\r\n        this.#config = value\r\n        this.computed()\r\n    }\r\n\r\n    constructor(rootSVG: Svg, name: string, values: IParametricConfig) {\r\n        super(rootSVG, name)\r\n\r\n        // Store the constraints\r\n        this.#config = Object.assign({\r\n            expressions: { x: '', y: '' },\r\n        }, values)\r\n\r\n        this.#numExp = {\r\n            x: new NumExp(this.#config.expressions.x),\r\n            y: new NumExp(this.#config.expressions.y),\r\n        }\r\n\r\n        // Generate the base shape\r\n        this.shape = this.#makeShape()\r\n\r\n        // Compute the shape\r\n        this.computed()\r\n        return this\r\n    }\r\n\r\n    #makeShape() {\r\n        this.element.clear()\r\n\r\n        // Create the path\r\n        this.shape = this.element.path('M0 0')\r\n\r\n        // Apply the stroke and fill.\r\n        this.fill().stroke()\r\n\r\n        // Add the shape to the group.\r\n        this.element.add(this.shape)\r\n\r\n        return this.shape\r\n    }\r\n\r\n    computed(): this {\r\n        // Get the samples from the config\r\n        const samples = (this.#config.samples ?? this.graphConfig.axis.x.x)\r\n        const domain = (this.#config.domain ?? { min: -2 * Math.PI, max: 2 * Math.PI })\r\n\r\n        // Make the numeric expression.\r\n\r\n        // Get the (x;y) points from the function\r\n        // 0 < x < width\r\n        // y = fn(x)\r\n        const points: XY[] = []\r\n\r\n        for (let t = domain.min; t < domain.max; t += 1 / samples) {\r\n            const { x, y } = this.evaluate(t)\r\n            // const x = exprX.evaluate({ t }) * this.graphConfig.axis.x.x + this.graphConfig.origin.x,\r\n            //     y = exprY.evaluate({ t }) * this.graphConfig.axis.y.y + this.graphConfig.origin.y\r\n            points.push({ x, y })\r\n        }\r\n\r\n        // Create the path string from the points.\r\n        const path = points.map(({ x, y }, index) => {\r\n            // Determine the path command\r\n            const cmd = index === 0 ? 'M' : 'L'\r\n\r\n            return `${cmd} ${x} ${y}`\r\n        }).join(' ')\r\n\r\n        // Update the path\r\n        const shape = this.shape as Path\r\n        shape.plot(path)\r\n\r\n        return this\r\n    }\r\n\r\n    moveLabel(): this {\r\n        return this\r\n    }\r\n\r\n    evaluate(t: number): XY {\r\n        return toPixels(\r\n            {\r\n                x: this.#numExp.x.evaluate({ t }),\r\n                y: this.#numExp.y.evaluate({ t })\r\n            }\r\n            , this.graphConfig)\r\n    }\r\n}","import { Svg, Circle as svgCircle, Line as svgLine, G, Shape } from \"@svgdotjs/svg.js\"\r\nimport { AbstractFigure } from \"./AbstractFigure\"\r\nimport type { XY } from \"../pidraw.common\"\r\nimport { computeLine, toCoordinates } from \"../Calculus\"\r\nimport { Plot } from \"./Plot\"\r\n\r\nexport interface IFollowConfig {\r\n    follow: Plot,\r\n    tangent?: boolean,\r\n    size?: number\r\n}\r\n\r\nexport class Follow extends AbstractFigure {\r\n    #config: IFollowConfig\r\n\r\n    #reference: XY\r\n    #delta: XY\r\n    #point: svgCircle\r\n    #tangent: svgLine\r\n\r\n    get config() { return this.#config }\r\n    set config(value: IFollowConfig) {\r\n        this.#config = value\r\n        this.computed()\r\n    }\r\n\r\n    constructor(rootSVG: Svg, name: string, values: IFollowConfig) {\r\n        super(rootSVG, name)\r\n\r\n        // Store the constraints\r\n        this.#config = Object.assign({\r\n            size: 10,\r\n        }, values)\r\n\r\n        // Default fill color\r\n        this.appearance.fill.color = 'black'\r\n\r\n        this.#reference = this.#config.follow.follow(0, 0)\r\n        this.#delta = { x: 0, y: 0 }\r\n        this.#tangent = this.element.line()\r\n\r\n        // Draw the point at x=0\r\n        this.#point = this.element.circle(this.#config.size)\r\n            .center(this.#reference.x, this.#reference.y)\r\n\r\n        // Generate the base shape\r\n        this.shape = this.#makeShape()\r\n\r\n        // Compute the shape\r\n        this.computed()\r\n\r\n        // Load the event listeners\r\n        // @ts-expect-error - Event handler\r\n        this.rootSVG.on('mousemove', (handler: Event & { clientX: number, clientY: number }) => {\r\n            let clientXY = this.rootSVG.node.createSVGPoint()\r\n\r\n            clientXY.x = handler.clientX\r\n            clientXY.y = handler.clientY\r\n\r\n            // #reference is in pixels : it's the point where the mouse is\r\n            clientXY = clientXY.matrixTransform(this.rootSVG.node.getScreenCTM()?.inverse())\r\n\r\n            // calculate the follow point : it's the point on the Path\r\n            // - it is automatically converted to pixels\r\n            const follow = this.#config.follow.follow(clientXY.x, clientXY.y)\r\n\r\n\r\n            // Update the point\r\n            if (isNaN(follow.y)) {\r\n                this.#point.hide()\r\n            } else {\r\n                // Make sure the point is visible\r\n                this.#point.show()\r\n\r\n                // Move the point\r\n                this.#point.center(follow.x, follow.y)\r\n\r\n                // Build the delta point and the corresponding line.\r\n                this.#reference = follow\r\n                this.#delta = this.#config.follow.follow(clientXY.x + 0.01, clientXY.y + 0.01)\r\n                this.computed()\r\n            }\r\n        })\r\n        return this\r\n    }\r\n\r\n    #makeShape(): G {\r\n        // Create the path\r\n        this.shape = this.element.group().attr({ id: this.name })\r\n\r\n        // Apply the stroke and fill.\r\n        this.fill().stroke()\r\n\r\n        // Add the shape to the group.\r\n        this.element.add(this.shape)\r\n\r\n        return this.shape as G\r\n    }\r\n\r\n    computed(): this {\r\n        const data = computeLine(\r\n            this.#reference,\r\n            {\r\n                x: this.#delta.x - this.#reference.x,\r\n                y: this.#delta.y - this.#reference.y\r\n            },\r\n            this.graphConfig.width, this.graphConfig.height\r\n        )\r\n\r\n        if (data === null) { return this }\r\n\r\n        this.#tangent.plot(\r\n            data[0].x, data[0].y,\r\n            data[1].x, data[1].y\r\n        )\r\n\r\n        return this\r\n    }\r\n\r\n    moveLabel(): this {\r\n        return this\r\n    }\r\n\r\n    override strokeable(): Shape[] {\r\n        return [this.#tangent]\r\n    }\r\n\r\n    override fillable(): Shape[] {\r\n        return [this.#point]\r\n    }\r\n}","import { Path, type PathCommand, Svg } from \"@svgdotjs/svg.js\"\r\nimport { AbstractFigure } from \"./AbstractFigure\"\r\nimport {type DOMAIN } from \"../pidraw.common\"\r\nimport { Plot } from \"./Plot\"\r\nimport { toPixels } from \"../Calculus\"\r\n\r\nexport interface IFillBetweenConfig {\r\n    expressions: [Plot, Plot],\r\n    domain?: DOMAIN,\r\n    image?: DOMAIN,\r\n}\r\n\r\nexport class FillBetween extends AbstractFigure {\r\n    #config: IFillBetweenConfig\r\n    get config() { return this.#config }\r\n    set config(value: IFillBetweenConfig) {\r\n        this.#config = value\r\n\r\n        this.computed()\r\n    }\r\n    get domain() {\r\n\r\n        if (this.#config.domain) {\r\n            // return {\r\n            //     min: isNaN(this.#config.domain.min) ? 0 :\r\n            //         toPixels({ x: this.#config.domain.min, y: 0 }, this.graphConfig).x,\r\n            //     max: isNaN(this.#config.domain.max) ? this.graphConfig.width :\r\n            //         toPixels({ x: this.#config.domain.max, y: 0 }, this.graphConfig).x\r\n            // }\r\n            return toPixels(this.#config.domain, this.graphConfig)\r\n\r\n        }\r\n\r\n        return {\r\n            min: 0,\r\n            max: this.graphConfig.width\r\n        }\r\n    }\r\n    get image() {\r\n        if (this.#config.image) {\r\n            // return {\r\n            //     min: isNaN(this.#config.image.min) ? 0 : toPixels(this.#config.image.min, this.graphConfig).y,\r\n            //     max: isNaN(this.#config.image.max) ? this.graphConfig.height : toPixels(this.#config.image.max, this.graphConfig).y\r\n            // }\r\n            return toPixels(this.#config.image, this.graphConfig, 'y')\r\n\r\n        }\r\n\r\n        return {\r\n            min: 0, max: this.graphConfig.height\r\n        }\r\n    }\r\n\r\n    constructor(rootSVG: Svg, name: string, values: IFillBetweenConfig) {\r\n        super(rootSVG, name)\r\n\r\n        console.log('FILL BETWR');\r\n        // Store the constraints\r\n        this.#config = Object.assign({\r\n            samples: 100\r\n        }, values)\r\n\r\n        // Generate the base shape\r\n        this.shape = this.#makeShape()\r\n\r\n        // Compute the shape\r\n        this.computed()\r\n        return this\r\n    }\r\n\r\n    #makeShape() {\r\n        this.element.clear()\r\n\r\n        // Create the path\r\n        this.shape = this.element.path('M0 0')\r\n\r\n        // Apply the stroke and fill.\r\n        this.fill().stroke()\r\n\r\n\r\n        // Add the shape to the group.\r\n        this.element.add(this.shape)\r\n\r\n        return this.shape\r\n    }\r\n\r\n    computed(): this {\r\n        // Build the shape:\r\n        // - build the path using the first expresion.\r\n        // -build the path using the second expression in reverse order.\r\n        // - close the path.\r\n        // - fill the path.\r\n\r\n        const [f, g] = this.#config.expressions\r\n        const domain = this.domain\r\n        const image = this.image\r\n\r\n        function flatten(array: PathCommand, index: number): string {\r\n            const [command, x, y] = array\r\n            return `${index === 0 ? 'M' : command} ${x ?? 0} ${y ?? 0}`\r\n        }\r\n\r\n        const path1 = (f.shape as Path).array()\r\n            .filter((pt) => {\r\n                const x = pt[1]\r\n                return x !== undefined && x >= domain.min && x <= domain.max\r\n            })\r\n            .map(flatten)\r\n        const path2 = [...(g.shape as Path).array()]\r\n            .filter((pt) => {\r\n                const x = pt[1]\r\n                return x !== undefined && x >= domain.min && x <= domain.max\r\n            })\r\n            .map(flatten)\r\n            .reverse()\r\n\r\n        const shape = this.shape as Path\r\n\r\n        shape.plot(`${path1.join(' ')} ${path2.join(' ')} Z`)\r\n\r\n        return this\r\n    }\r\n\r\n    moveLabel(): this {\r\n        return this\r\n    }\r\n\r\n}","import { Svg, Circle as G } from \"@svgdotjs/svg.js\"\r\nimport { AbstractFigure } from \"./AbstractFigure\"\r\nimport { toPixels } from \"../Calculus\"\r\nimport { Plot } from \"./Plot\"\r\nimport type { DOMAIN } from \"../pidraw.common\"\r\n\r\nexport interface IRiemannConfig {\r\n    follow: Plot,\r\n    domain: DOMAIN,\r\n    rectangles: number,\r\n    position: number,\r\n}\r\n\r\nexport class Riemann extends AbstractFigure {\r\n    #config: IRiemannConfig\r\n\r\n    get config() { return this.#config }\r\n    set config(value: IRiemannConfig) {\r\n        this.#config = value\r\n        this.computed()\r\n    }\r\n\r\n    get rectangles(): number {\r\n        return this.#config.rectangles\r\n    }\r\n    set rectangles(value: number) {\r\n        this.#config.rectangles = value > 0 ? value : 10\r\n    }\r\n    get position(): number {\r\n        // Value is between 0 and 1\r\n        if (this.#config.position < 0) { this.#config.position = 0 }\r\n        if (this.#config.position > 1) { this.#config.position = 1 }\r\n\r\n        return this.#config.position\r\n    }\r\n    set position(value: number) {\r\n        // Value is between 0 and 1\r\n        if (value < 0) { value = 0 }\r\n        if (value > 1) { value = 1 }\r\n\r\n        this.#config.position = value\r\n    }\r\n\r\n    constructor(rootSVG: Svg, name: string, values: IRiemannConfig) {\r\n        super(rootSVG, name)\r\n\r\n        // Store the constraints\r\n        this.#config = Object.assign({\r\n        }, values)\r\n\r\n        // Generate the base shape\r\n        this.shape = this.#makeShape()\r\n\r\n        // Compute the shape\r\n        this.computed()\r\n    }\r\n\r\n    #makeShape(): G {\r\n        // Create the rectangles\r\n        this.shape = this.element.group().attr({ id: this.name })\r\n\r\n        // Apply the stroke and fill.\r\n        this.fill().stroke()\r\n\r\n        // Add the shape to the group.\r\n        this.element.add(this.shape)\r\n\r\n        return this.shape as G\r\n    }\r\n\r\n    computed(): this {\r\n        // Clear the shape.\r\n        this.shape.clear()\r\n\r\n        // Determine the width of the rectangles.\r\n        const domain = toPixels(this.#config.domain, this.graphConfig)\r\n        const width = domain.max - domain.min\r\n        const dxPixels = width / this.#config.rectangles\r\n        const dx = (this.#config.domain.max - this.#config.domain.min) / this.#config.rectangles\r\n        const yPixel = this.graphConfig.origin.y\r\n\r\n        for (let index = 0; index < this.#config.rectangles; index += 1) {\r\n            const xPixel = domain.min + index * dxPixels\r\n            const x = this.#config.domain.min + (index + this.position) * dx\r\n\r\n            // Create rectangle from the x axis to the function\r\n            const y = this.#config.follow.evaluate(x).y\r\n            this.shape.add(\r\n                this.element\r\n                    .rect(dxPixels, Math.abs(yPixel - y))\r\n                    .move(xPixel, y)\r\n            )\r\n        }\r\n\r\n\r\n\r\n        return this\r\n    }\r\n\r\n    moveLabel(): this {\r\n        return this\r\n    }\r\n\r\n}","import {type Shape, Svg, Path as svgPath} from \"@svgdotjs/svg.js\"\r\nimport {AbstractFigure} from \"./AbstractFigure\"\r\n\r\n\r\nexport class Path extends AbstractFigure {\r\n    #d = ''\r\n\r\n    constructor(rootSVG: Svg, name: string, path?: string) {\r\n        super(rootSVG, name)\r\n\r\n        if (path) {\r\n            this.#d = path\r\n            this.computed()\r\n            this.#makeShape()\r\n        }\r\n    }\r\n\r\n    computed(): this {\r\n        return this\r\n    }\r\n\r\n    get d(): string {\r\n        return this.#d\r\n    }\r\n\r\n    set d(path: string) {\r\n        this.#d = path;\r\n\r\n        (this.shape as svgPath).plot(this.#d)\r\n    }\r\n\r\n    moveLabel(): this {\r\n        throw new Error(\"Method not implemented.\")\r\n    }\r\n\r\n    #makeShape(): Shape {\r\n        this.clear()\r\n\r\n        this.shape = this.element.path(this.#d).fill('none').stroke({color: 'black', width: 1})\r\n\r\n        return this.shape\r\n    }\r\n\r\n}\r\n\r\n","import {Box, Marker, SVG, Svg} from \"@svgdotjs/svg.js\"\r\nimport '@svgdotjs/svg.draggable.js'\r\n\r\nimport {\r\n    COORDINATE_SYSTEM,\r\n    type DOMAIN,\r\n    type IGraphConfig,\r\n    type IGraphConstructorConfig,\r\n    type IGraphDisplay,\r\n    type ILayers,\r\n    isXY,\r\n    LAYER_NAME,\r\n    type XY\r\n} from \"./pidraw.common\"\r\nimport {type IPointConfig, Point} from \"./figures/Point\"\r\nimport {type ILineConfig, Line} from \"./figures/Line\"\r\nimport {type IPlotConfig, Plot} from \"./figures/Plot\"\r\nimport {createMarker, toPixels} from \"./Calculus\"\r\nimport {AbstractFigure} from \"./figures/AbstractFigure\"\r\nimport {Circle, type ICircleConfig} from \"./figures/Circle\"\r\nimport {type IPolygonConfig, Polygon} from \"./figures/Polygon\"\r\nimport {Grid} from \"./figures/Grid\"\r\nimport {Arc, type IArcConfig} from \"./figures/Arc\"\r\nimport {CoordinateSystem} from \"./figures/CoordinateSystem\"\r\nimport {type IParametricConfig, Parametric} from \"./figures/Parametric\"\r\nimport {Follow, type IFollowConfig} from \"./figures/Follow\"\r\nimport {FillBetween, type IFillBetweenConfig} from \"./figures/FillBetween\"\r\nimport {type IRiemannConfig, Riemann} from \"./figures/Riemann\"\r\nimport {Path} from \"./figures/Path\"\r\n\r\nexport type IDraggableFollow = ((x: number, y: number) => XY) | AbstractFigure | string\r\n\r\nexport interface IDraggableConfig {\r\n    bounds?: {\r\n        x?: DOMAIN\r\n        y?: DOMAIN\r\n    }\r\n    callback?: (figure: AbstractFigure) => void\r\n    follow?: (IDraggableFollow)[],\r\n    grid?: boolean\r\n}\r\n\r\nexport class Graph {\r\n    #config: IGraphConfig\r\n    #display: IGraphDisplay\r\n    #figures: Record<string, AbstractFigure>\r\n    #layers: ILayers\r\n    #rootSVG: Svg\r\n    #toTex: (value: string) => string\r\n\r\n    constructor(id: string | HTMLElement, config?: IGraphConstructorConfig) {\r\n        const wrapper = document.createElement('DIV')\r\n        wrapper.style.position = 'relative'\r\n        wrapper.style.width = '100%'\r\n        wrapper.style.height = 'auto'\r\n        wrapper.style.border = 'thin solid black'\r\n        wrapper.style.userSelect = 'none'\r\n\r\n        if (typeof id === 'string') {\r\n            document.getElementById(id)?.appendChild(wrapper)\r\n        } else {\r\n            id.appendChild(wrapper)\r\n        }\r\n\r\n        const defaultUnit = config?.ppu ?? 50\r\n\r\n        this.#config = Object.assign({\r\n            width: 800,\r\n            height: 600,\r\n            origin: {x: 400, y: 300},\r\n            system: COORDINATE_SYSTEM.CARTESIAN_2D,\r\n            axis: {\r\n                x: {x: defaultUnit, y: 0},\r\n                y: {x: 0, y: -defaultUnit}\r\n            }\r\n        }, config)\r\n\r\n        // TexConverter \r\n        this.#toTex = config?.tex ?? ((value: string) => value)\r\n\r\n        this.#display = Object.assign({\r\n            grid: true,\r\n            subgrid: 0,\r\n            axis: true\r\n        }, config?.display)\r\n\r\n        this.#rootSVG = SVG()\r\n            .addTo(wrapper)\r\n            .viewbox(0, 0, this.#config.width, this.#config.height)\r\n\r\n        this.#rootSVG.data('config', {\r\n            width: this.#config.width,\r\n            height: this.#config.height,\r\n            origin: this.#config.origin,\r\n            // grids: this.#grids,\r\n            axis: this.#config.axis\r\n        })\r\n\r\n        // Define the layers\r\n        this.#layers = {} as ILayers\r\n\r\n        Object.values(LAYER_NAME).forEach((key) => {\r\n            this.#layers[key as LAYER_NAME] = this.#rootSVG\r\n                .group()\r\n                .attr('id', `LAYER_${key}`)\r\n        })\r\n\r\n        this.#figures = {}\r\n\r\n        this.#makeLayout()\r\n        return this\r\n    }\r\n\r\n    public clear() {\r\n        Object.keys(this.figures).forEach((name) => {\r\n            this.figures[name].element.remove()\r\n        })\r\n\r\n        this.#figures = {}\r\n    }\r\n\r\n    get config() {\r\n        return this.#config\r\n    }\r\n\r\n    set config(value: IGraphConfig) {\r\n        this.#config = value\r\n    }\r\n\r\n    public coordinate_system(system: COORDINATE_SYSTEM): AbstractFigure {\r\n        const axis = new CoordinateSystem(\r\n            this.#rootSVG,\r\n            'COORDINATE_SYSTEM',\r\n            system)\r\n\r\n        this.#layers.axis.add(axis.element)\r\n\r\n        return axis\r\n    }\r\n\r\n    get create() {\r\n        return {\r\n            point: (coordinates: XY | IPointConfig, name: string, label?: { html: boolean }): Point => {\r\n                let value: IPointConfig = {}\r\n\r\n                if (isXY(coordinates)) {\r\n                    value = {\r\n                        coordinates,\r\n                    }\r\n                } else {\r\n                    value = coordinates\r\n                }\r\n\r\n                const pt = new Point(\r\n                    this.#rootSVG,\r\n                    name,\r\n                    value\r\n                )\r\n\r\n                this.#layers.points.add(pt.element)\r\n                this.#figures[name] = pt\r\n\r\n                if (label) {\r\n                    // Define the label name.\r\n                    pt.addLabel(\r\n                        name,\r\n                        label.html,\r\n                        this.#toTex\r\n                    )\r\n                }\r\n                return pt\r\n            },\r\n            line: (constraints: ILineConfig, name: string): Line => {\r\n                const line = new Line(this.#rootSVG, name, constraints)\r\n\r\n                this.#layers.main.add(line.element)\r\n                this.#figures[name] = line\r\n\r\n                return line\r\n            },\r\n            path: (constraints: string, name: string): Path => {\r\n                const path = new Path(this.#rootSVG, name, constraints)\r\n                this.#layers.main.add(path.element)\r\n                return path\r\n            },\r\n            plot: (constraints: IPlotConfig, name: string): Plot => {\r\n                const plot = new Plot(this.#rootSVG, name, constraints)\r\n\r\n                this.#layers.plots.add(plot.element)\r\n                this.#figures[name] = plot\r\n\r\n                return plot\r\n            },\r\n            parametric: (constraints: IParametricConfig, name: string): Parametric => {\r\n                const plot = new Parametric(this.#rootSVG, name, constraints)\r\n\r\n                this.#layers.plots.add(plot.element)\r\n                this.#figures[name] = plot\r\n\r\n                return plot\r\n            },\r\n            circle: (constraints: ICircleConfig, name: string): Circle => {\r\n                const circle = new Circle(this.#rootSVG, name, constraints)\r\n\r\n                this.#layers.main.add(circle.element)\r\n                this.#figures[name] = circle\r\n\r\n                return circle\r\n            },\r\n            polygon: (values: IPolygonConfig, name: string): Polygon => {\r\n                const polygon = new Polygon(this.#rootSVG, name, values)\r\n\r\n                this.#layers.main.add(polygon.element)\r\n                this.#figures[name] = polygon\r\n\r\n                return polygon\r\n            },\r\n            arc: (values: IArcConfig, name: string): Arc => {\r\n                const arc = new Arc(this.#rootSVG, name, values)\r\n\r\n                this.#layers.main.add(arc.element)\r\n                this.#figures[name] = arc\r\n\r\n                return arc\r\n            },\r\n            follow: (values: IFollowConfig, name: string): AbstractFigure => {\r\n                const follow = new Follow(this.#rootSVG, name, values)\r\n\r\n                this.#layers.plots_FG.add(follow.element)\r\n                this.#figures[name] = follow\r\n\r\n                return follow\r\n            },\r\n            fillbetween: (values: IFillBetweenConfig, name: string): AbstractFigure => {\r\n                const fillbetween = new FillBetween(this.#rootSVG, name, values)\r\n\r\n                this.#layers.plots_BG.add(fillbetween.element)\r\n                this.#figures[name] = fillbetween\r\n\r\n                return fillbetween\r\n            },\r\n            riemann: (values: IRiemannConfig, name: string): AbstractFigure => {\r\n                const riemann = new Riemann(this.#rootSVG, name, values)\r\n\r\n                this.#layers.plots_BG.add(riemann.element)\r\n                this.#figures[name] = riemann\r\n\r\n                return riemann\r\n            }\r\n        }\r\n    }\r\n\r\n    get display() {\r\n        return this.#display\r\n    }\r\n\r\n    set display(value: IGraphDisplay) {\r\n        this.#display = value\r\n    }\r\n\r\n    draggable(figure: AbstractFigure, target: AbstractFigure, options?: IDraggableConfig) {\r\n        const dragmove = (e: Event & { detail: { box: Box, handler: unknown } }): void => {\r\n            // Figure as point\r\n            const ptFigure = figure as Point\r\n\r\n            // Get the event details\r\n            const {box} = e.detail\r\n\r\n            // Get the bounding box\r\n            let {x, y} = box\r\n\r\n            // Prevent default behavior\r\n            e.preventDefault()\r\n\r\n            // Do not allow to go outside the graph.\r\n            if (x < 0 || x > this.#config.width - box.width / 2) {\r\n                return\r\n            }\r\n            if (y < 0 || y > this.#config.height - box.height / 2) {\r\n                return\r\n            }\r\n\r\n            if (options?.follow?.length) {\r\n                let xy = {x, y}\r\n                options.follow.forEach((follow) => {\r\n                    if (follow instanceof AbstractFigure) {\r\n                        xy = follow.follow(x, y)\r\n                    } else if (typeof follow === 'string') {\r\n                        xy = this.follow(follow, ptFigure)(x, y)\r\n                    } else {\r\n                        xy = follow(x, y)\r\n                    }\r\n                    x = xy.x\r\n                    y = xy.y\r\n                })\r\n            }\r\n\r\n            // If the current pixels is the same as the dragged pixels, do nothing.\r\n            if (ptFigure.pixels.x === x && ptFigure.pixels.y === y) {\r\n                return\r\n            }\r\n\r\n            // Set the point coordinate according.\r\n            ptFigure.pixels = {x, y}\r\n            // For instance, if the target is a point, update the pixels.\r\n            if (target instanceof Point) {\r\n                target.pixels = {x, y}\r\n            }\r\n\r\n            // Callback at the end, with the point\r\n            if (options?.callback) {\r\n                options.callback(figure)\r\n            }\r\n\r\n            this.update([figure.name, target.name])\r\n        }\r\n\r\n        // Move the figure to the top layer.\r\n        this.#layers.interactive.add(figure.element)\r\n\r\n        // Make the figure draggable\r\n        figure.isDraggable = true\r\n        /* eslint-disable */\r\n        figure.shape\r\n            // @ts-expect-error: draggable does not exist on Shape\r\n            .draggable()\r\n            .on('dragmove', dragmove as EventListener)\r\n        /* eslint-enable */\r\n        return figure\r\n    }\r\n\r\n    get figures() {\r\n        return this.#figures\r\n    }\r\n\r\n    // Default follow function\r\n    follow(value: string, obj: AbstractFigure): (x: number, y: number) => XY {\r\n        if (value === 'Ox') {\r\n            return (x: number, y: number) => ({x, y: (obj as unknown as XY).y})\r\n        } else if (value === 'Oy') {\r\n            return (x: number, y: number) => ({x: (obj as unknown as XY).x, y})\r\n        } else if (value === 'grid') {\r\n            return (x: number, y: number) => {\r\n                const xGrid = this.#config.axis.x.x,\r\n                    yGrid = this.#config.axis.y.y\r\n\r\n                x = Math.round(x / xGrid) * xGrid\r\n                y = Math.round(y / yGrid) * yGrid\r\n\r\n                return {x, y}\r\n            }\r\n        }\r\n\r\n        return (x: number, y: number) => ({x, y})\r\n    }\r\n\r\n    public grid(name: string, gridConfig: { x: XY, y: XY }): AbstractFigure {\r\n        // const group = this.#rootSVG.group().attr('id', name)\r\n\r\n        const aGrid = new Grid(this.#rootSVG, name, {\r\n            axis: gridConfig,\r\n            origin: this.#config.origin,\r\n            width: this.#config.width,\r\n            height: this.#config.height,\r\n            subdivisions: 0\r\n        })\r\n\r\n        this.#layers.grids.add(aGrid.element)\r\n\r\n        return aGrid\r\n    }\r\n\r\n    get layers() {\r\n        return this.#layers\r\n    }\r\n\r\n    public marker(scale: number): { start: Marker, end: Marker } {\r\n        return createMarker(this.#rootSVG, scale)\r\n    }\r\n\r\n    get rootSVG() {\r\n        return this.#rootSVG\r\n    }\r\n\r\n    public subgrid(name: string, subdivision: number): AbstractFigure {\r\n        const subAxis = {\r\n            x: {x: this.#config.axis.x.x / subdivision, y: this.#config.axis.x.y / subdivision},\r\n            y: {x: this.#config.axis.y.x / subdivision, y: this.#config.axis.y.y / subdivision}\r\n        }\r\n        return this.grid(name, subAxis)\r\n    }\r\n\r\n    public toPixels<T>(pixels: T, axis?: 'x' | 'y' ): T {\r\n        return toPixels(pixels, this.config, axis)\r\n    }\r\n\r\n    get toTex() {\r\n        return this.#toTex\r\n    }\r\n\r\n    // Update each figures in the graph\r\n    public update(except?: string[], forceUpdate?: boolean) {\r\n\r\n        if (except === undefined) {\r\n            except = []\r\n        }\r\n\r\n        // Go through each objects and update them if they are computed.\r\n        Object.keys(this.figures)\r\n            .forEach((name) => {\r\n                if (except.includes(name)) {\r\n                    this.figures[name].updateLabel()\r\n                } else {\r\n                    // Update figure and label\r\n                    this.figures[name].update(forceUpdate)\r\n                }\r\n            })\r\n    }\r\n\r\n    // Update the layout of the graph\r\n    public updateLayout() {\r\n        // Update the viewbox\r\n        this.#rootSVG.viewbox(0, 0, this.#config.width, this.#config.height)\r\n\r\n        // Update the transfer data\r\n        this.#rootSVG.data('config', {\r\n            width: this.#config.width,\r\n            height: this.#config.height,\r\n            origin: this.#config.origin,\r\n            axis: this.#config.axis\r\n        })\r\n\r\n        // Redo the layout\r\n        this.#makeLayout()\r\n\r\n        // Force a global update.\r\n        this.update([], true)\r\n    }\r\n\r\n    #makeLayout(): void {\r\n        // Remove the grid\r\n        this.#layers.grids.clear()\r\n\r\n        // Remove the axis\r\n        this.#layers.axis.clear()\r\n\r\n        if (this.#display.subgrid) {\r\n            this.subgrid('SUBGRID', this.#display.subgrid)\r\n                .stroke('purple/0.5', 0.1)\r\n        }\r\n        if (this.#display.grid) {\r\n            this.grid('MAINGRID', this.#config.axis)\r\n                .stroke('lightgray', 1)\r\n        }\r\n\r\n        if (this.#display.axis) {\r\n            this.coordinate_system(this.#config.system)\r\n        }\r\n\r\n    }\r\n}\r\n","import type { PARSER_VALUES } from \"piparser/lib/PiParserTypes\"\r\nimport { AbstractFigure } from \"../figures/AbstractFigure\"\r\nimport type { TeXConverterType } from \"../pidraw.common\"\r\n\r\nexport enum PARSER_TYPE {\r\n    UNKNOWN = 'unknown',        // OK\r\n    // POINTS\r\n    POINT = 'pt',               // OK: (x,y)\r\n    MIDDLE = 'mid',             // OK: mid <point>,<point>\r\n    PROJECTION = 'proj',        // OK: proj <point>,<line>\r\n    INTERSECTION = 'inter',     // OK: inter <line>,<line> // TODO: inter <line>,<circle>\r\n    SYMMETRY = 'sym',           // OK: sym <point>,<point|line>\r\n    DIRECTION_POINT = 'dpt',    // OK: dpt <point>,<line>,<distance>,<perpendicular?>\r\n    VECTOR_POINT = 'vpt',       // OK: vpt <point>,<point>,<scale?>,<starting point?>\r\n    // LINES\r\n    LINE = 'line',              // OK : <point><point> or line <point>,<point>\r\n    VECTOR = 'vec',\r\n    SEGMENT = 'seg',\r\n    RAY = 'ray',\r\n    PERPENDICULAR = 'perp',     // OK : perp <line>,<point>\r\n    PARALLEL = 'para',          // OK : para <line>,<point>\r\n    MEDIATOR = 'med',           // OK : med <point>,<point>\r\n    TANGENT = 'tan',\r\n    BISECTOR = 'bis',\r\n    // CIRCLES\r\n    CIRCLE = 'circ',            // OK : <center>,<radius>\r\n    ARC = 'arc',                // OK : arc <point>,<point>,<point>\r\n    // PLOTS\r\n    PLOT = 'plot',              // OK : plot <function>[,@<number>,<domain>,<domain>]\r\n    PARAMETRIC = 'parametric',  // OK : parametric <function>,<function>[,@<number>,<domain>]\r\n    // POLYGONS\r\n    POLYGON = 'poly',           // OK : poly <point>,<point>,<point>,...\r\n    REGULAR = 'reg',            // OK: reg <center>,<radius>,<sides>\r\n    // SPECIAL FIGURES\r\n    FOLLOW = 'follow',          // OK : follow <function>,<tangent?>\r\n    FILL_BETWEEN = 'fill',      // OK : fillbetween <function>,<function?>,<domain?>\r\n    RIEMANN = 'riemann',        // riemann <function>,<domain>,<number>,<position>\r\n    PATH = \"path\",              // TODO: allow path given by a string ? Path given by a string\r\n}\r\n\r\nexport type IParserValues = PARSER_VALUES | AbstractFigure\r\n\r\nexport interface IParserConfig {\r\n    parameters?: string,\r\n    code?: string\r\n    tex?: TeXConverterType,\r\n}\r\nexport interface IParserSettings {\r\n    label?: boolean,\r\n    tex?: boolean,\r\n    points?: boolean | 'o' | '*' | 's',\r\n}\r\nexport interface IParserParameters {\r\n    value: IParserValues,\r\n    options: IParserValues[]\r\n}\r\nexport interface IParser {\r\n    id: string;\r\n    key: PARSER_TYPE;\r\n    code: string[];\r\n    parameters: Record<string, IParserParameters>;\r\n}\r\n\r\nexport const PARSER_BOOLEAN_VALUES = [\r\n    '#',    // Figure is static (no update)\r\n    '!',    // Hide the figure, not the label\r\n    '?',    // Hide the label, not the figure\r\n    'hide', // Hide the figure and the label\r\n    'ultrathin', 'thin', 'thick', 'ultrathick',\r\n    'dash', 'dot',\r\n    'tex', 'label', // TeX or Text label\r\n    'axis', 'grid' // Parameter for the layout\r\n]\r\n\r\n\r\nexport function convertIdToFigure(options: PARSER_VALUES[], figures: Record<string, AbstractFigure>): IParserValues[] {\r\n    return options.map((option): IParserValues => {\r\n        if (typeof option === 'string' && option in figures) {\r\n            return figures[option]\r\n        }\r\n        return option\r\n    })\r\n}\r\n\r\n\r\n// List of color values\r\nexport const PARSER_COLOR_VALUES = [\r\n    'black', 'white', 'red', 'green', 'blue', 'cyan', 'magenta', 'yellow',\r\n    'gray', 'grey', 'darkgray', 'darkgrey', 'lightgray', 'lightgrey',\r\n    'brown', 'lime', 'olive', 'orange', 'pink', 'purple', 'teal', 'gold'\r\n]","import { type PARSER } from \"piparser/lib/PiParserTypes\"\r\nimport { AbstractFigure } from \"../figures/AbstractFigure\"\r\nimport { type IArcConfig } from \"../figures/Arc\"\r\nimport { type ICircleConfig } from \"../figures/Circle\"\r\nimport { Point } from \"../figures/Point\"\r\nimport { type IGraphConfig } from \"../pidraw.common\"\r\nimport { convertIdToFigure, PARSER_TYPE } from \"./parser.common\"\r\n\r\nexport function buildCircle(item: PARSER, figures: Record<string, AbstractFigure>, graphConfig: IGraphConfig): ICircleConfig | IArcConfig | null {\r\n    const code = convertIdToFigure(item.values, figures)\r\n\r\n    if (item.key === PARSER_TYPE.CIRCLE.toString() && code.length >= 2) {\r\n        // item.code = [<point>,<point>]\r\n        const [center, radius] = code\r\n        if (center instanceof Point && (radius instanceof Point || typeof radius === 'number')) {\r\n            return { center, radius }\r\n        }\r\n    }\r\n\r\n    return null\r\n\r\n}\r\n\r\nexport function buildArc(item: PARSER, figures: Record<string, AbstractFigure>, graphConfig: IGraphConfig): ICircleConfig | IArcConfig | null {\r\n    const code = convertIdToFigure(item.values, figures)\r\n\r\n    if (item.key === PARSER_TYPE.ARC.toString() && code.length >= 3) {\r\n        // item.code = [<point>,<point>,<point>,[<radius>]]\r\n        const [start, center, end, radius] = code\r\n\r\n        if (start instanceof Point && center instanceof Point && end instanceof Point) {\r\n            return { start, center, end, radius: radius as number | Point }\r\n        }\r\n    }\r\n\r\n    return null\r\n}","import { type PARSER } from \"piparser/lib/PiParserTypes\"\r\nimport { toPixels } from \"../Calculus\"\r\nimport { AbstractFigure } from \"../figures/AbstractFigure\"\r\nimport { type ILineConfig, type ILineType, Line } from \"../figures/Line\"\r\nimport { Point } from \"../figures/Point\"\r\nimport { type IGraphConfig } from \"../pidraw.common\"\r\nimport { convertIdToFigure, PARSER_TYPE } from \"./parser.common\"\r\n\r\nexport function buildLine(item: PARSER, figures: Record<string, AbstractFigure>, graphConfig: IGraphConfig): ILineConfig | null {\r\n    const code = convertIdToFigure(item.values, figures)\r\n\r\n    if (item.key === PARSER_TYPE.LINE.toString() ||\r\n        item.key === PARSER_TYPE.SEGMENT.toString() ||\r\n        item.key === PARSER_TYPE.VECTOR.toString() ||\r\n        item.key === PARSER_TYPE.RAY.toString()\r\n        && code.length === 2) {\r\n        // item.code = [<point>,<point>] --> A,B\r\n        // item.code = [<point>,<number|string>] --> A,slope\r\n        const [A, B] = code\r\n        if (A instanceof Point && B instanceof Point) {\r\n            let lineType: ILineType = 'line'\r\n            switch (item.key) {\r\n                case PARSER_TYPE.SEGMENT.toString():\r\n                    lineType = 'segment'\r\n                    break\r\n                case PARSER_TYPE.VECTOR.toString():\r\n                    lineType = 'vector'\r\n                    break\r\n                case PARSER_TYPE.RAY.toString():\r\n                    lineType = 'ray'\r\n                    break\r\n\r\n            }\r\n\r\n            return {\r\n                through: { A, B },\r\n                shape: lineType\r\n            }\r\n        }\r\n    }\r\n\r\n    if (item.key === PARSER_TYPE.LINE.toString() && code.length === 1) {\r\n        // item.code = [<equation>] --> 2x-3y=4 or y=2/3x-1 or y=5 or x=3\r\n        const equ = code[0] as string\r\n\r\n        // It's an horizontal line\r\n        if (equ.startsWith('y=') && !equ.includes('x')) {\r\n            const value = convertIdToFigure([equ.split('=')[1]], figures)[0]\r\n\r\n            const A = toPixels({ x: 0, y: value as number }, graphConfig)\r\n            return {\r\n                director: { A, d: { x: 1, y: 0 } },\r\n                shape: 'line'\r\n            }\r\n        }\r\n\r\n        // It's an vertical line\r\n        if (equ.startsWith('x=')) {\r\n            const value = convertIdToFigure([equ.split('=')[1]], figures)[0]\r\n\r\n            const A = toPixels({ x: value as number, y: 0 }, graphConfig)\r\n            return {\r\n                director: { A, d: { x: 0, y: 1 } },\r\n                shape: 'line'\r\n            }\r\n        }\r\n\r\n        // It's a general line\r\n        const [left, right] = equ.split('=')\r\n\r\n        const coefficientLeft = parsePolynom(left),\r\n            coefficientRight = parsePolynom(right)\r\n\r\n        const coefficient = {\r\n            a: coefficientLeft.a - coefficientRight.a,\r\n            b: coefficientLeft.b - coefficientRight.b,\r\n            c: coefficientLeft.c - coefficientRight.c\r\n        }\r\n\r\n        const A = toPixels({ x: 0, y: -coefficient.c / coefficient.b }, graphConfig)\r\n        const d = {\r\n            x: -coefficient.b,\r\n            y: coefficient.a\r\n        }\r\n\r\n        return {\r\n            director: { A, d },\r\n            shape: 'line'\r\n        }\r\n    }\r\n\r\n    if (item.key === PARSER_TYPE.MEDIATOR.toString() && code.length === 2) {\r\n        // item.code = [<point>,<point>]\r\n        const [A, B] = code\r\n        if (A instanceof Point && B instanceof Point) {\r\n            return { mediator: { A, B } }\r\n        }\r\n    }\r\n\r\n    if (item.key === PARSER_TYPE.PERPENDICULAR.toString() && code.length === 2) {\r\n        // item.code = [<line>,<point>]\r\n        const [to, through] = code\r\n        if (to instanceof Line && through instanceof Point) {\r\n            return { perpendicular: { to, through } }\r\n        }\r\n    }\r\n\r\n    if (item.key === PARSER_TYPE.PARALLEL.toString() && code.length === 2) {\r\n        // item.code = [<line>,<point>]\r\n        const [to, through] = code\r\n        if (to instanceof Line && through instanceof Point) {\r\n            return { parallel: { to, through } }\r\n        }\r\n    }\r\n\r\n    if (item.key === PARSER_TYPE.BISECTOR.toString() && code.length === 2) {\r\n        const [d1, d2] = code\r\n        if (d1 instanceof Line && d2 instanceof Line) {\r\n            return { bisector: { d1, d2 } }\r\n        }\r\n    }\r\n\r\n    if (item.key === PARSER_TYPE.BISECTOR.toString() && code.length === 3) {\r\n        const [B, A, C] = code\r\n        if (A instanceof Point && B instanceof Point && C instanceof Point) {\r\n            return { bisector: { A, B, C } }\r\n        }\r\n    }\r\n    return null\r\n\r\n}\r\n\r\nfunction parsePolynom(polynom: string): { a: number, b: number, c: number } {\r\n    const data = polynom.split(/([+-][0-9./]*[xy]?)/).filter((d) => d.trim() !== '')\r\n\r\n    const a = data\r\n        .filter((d) => d.includes('x'))\r\n        .map((d) => {\r\n            return d === 'x' ? '1' : d.replace('x', '')\r\n        })[0] ?? '0',\r\n        b = data\r\n            .filter((d) => d.includes('y'))\r\n            .map((d) => {\r\n                return d === 'y' ? '1' : d.replace('y', '')\r\n            })[0] ?? '0',\r\n        c = data\r\n            .filter((d) => (!d.includes('x') && !d.includes('y')))[0] ?? '0'\r\n\r\n    return {\r\n        a: convertIdToFigure([a], {})[0] as number,\r\n        b: convertIdToFigure([b], {})[0] as number,\r\n        c: convertIdToFigure([c], {})[0] as number,\r\n    }\r\n}","import { type PARSER } from \"piparser/lib/PiParserTypes\"\r\nimport { AbstractFigure } from \"../figures/AbstractFigure\"\r\nimport { type IFillBetweenConfig } from \"../figures/FillBetween\"\r\nimport { type IFollowConfig } from \"../figures/Follow\"\r\nimport { type IParametricConfig } from \"../figures/Parametric\"\r\nimport { type IPlotConfig, Plot } from \"../figures/Plot\"\r\nimport { type IRiemannConfig } from \"../figures/Riemann\"\r\nimport { type DOMAIN, type IGraphConfig, isDOMAIN } from \"../pidraw.common\"\r\nimport { convertIdToFigure, PARSER_TYPE } from \"./parser.common\"\r\n\r\nexport function buildPlot(item: PARSER, figures: Record<string, AbstractFigure>, graphConfig: IGraphConfig): IPlotConfig | null {\r\n    const code = convertIdToFigure(item.values, figures)\r\n\r\n    // console.log(item)\r\n    // console.log(code)\r\n\r\n    if (item.key === PARSER_TYPE.PLOT.toString()) {\r\n        // item.code = [<function>,<domain>,<image>,<@samples>]\r\n        const [f, ...data] = code\r\n\r\n        const cfg: IPlotConfig = { expression: typeof f === 'number' ? f.toString() : f as string }\r\n\r\n        // data *can* contains: domain, image, samples\r\n        // domain is the first DOMAIN object\r\n        // image is the second DOMAIN object\r\n        // samples is number\r\n        const domains = data.filter((x) => isDOMAIN(x)) as DOMAIN[]\r\n        if (domains.length > 0) {\r\n            cfg.domain = domains[0]\r\n        }\r\n        if (domains.length > 1) {\r\n            cfg.image = domains[1]\r\n        }\r\n\r\n        const samples = data.filter(d => typeof d === 'number') as number[]\r\n        if (samples.length > 0) {\r\n            cfg.samples = samples[0] > 0 ? samples[0] : 10\r\n        }\r\n\r\n        return cfg\r\n    }\r\n\r\n    return null\r\n\r\n}\r\n\r\nexport function buildParametric(item: PARSER, figures: Record<string, AbstractFigure>, graphConfig: IGraphConfig): IParametricConfig | null {\r\n    const code = convertIdToFigure(item.values, figures)\r\n\r\n    if (item.key === PARSER_TYPE.PARAMETRIC.toString() && code.length === 2) {\r\n        // item.code = [<function>,<function>]\r\n        const [x, y] = code\r\n        if (typeof x === 'string' && typeof y === 'string') {\r\n            return { expressions: { x, y } }\r\n        }\r\n    }\r\n\r\n    return null\r\n}\r\n\r\nexport function buildFollow(item: PARSER, figures: Record<string, AbstractFigure>, graphConfig: IGraphConfig): IFollowConfig | null {\r\n    const code = convertIdToFigure(item.values, figures)\r\n\r\n    if (item.key === PARSER_TYPE.FOLLOW.toString() && code.length >= 1) {\r\n        // item.code = [<function>,<show tangent ?>]\r\n\r\n        const [f, showTangent] = code\r\n        // TODO: Folow with a parametric curve\r\n        if (f instanceof Plot) {\r\n            return {\r\n                follow: f,\r\n                tangent: showTangent === 'show'\r\n            }\r\n        }\r\n    }\r\n\r\n    return null\r\n\r\n}\r\n\r\nexport function buildFillBetween(item: PARSER, figures: Record<string, AbstractFigure>, graphConfig: IGraphConfig): IFillBetweenConfig | null {\r\n    const code = convertIdToFigure(item.values, figures)\r\n\r\n    if (item.key === PARSER_TYPE.FILL_BETWEEN.toString() && code.length >= 2) {\r\n        // item.code = [<function>,<function>,<domain>,<image>]\r\n\r\n        const [f1, f2, domain, image] = code\r\n        if (f1 instanceof Plot && f2 instanceof Plot) {\r\n\r\n            return {\r\n                expressions: [f1, f2],\r\n                domain: isDOMAIN(domain) ? domain : { min: NaN, max: NaN },\r\n                image: isDOMAIN(image) ? image : { min: NaN, max: NaN }\r\n            }\r\n        }\r\n    }\r\n\r\n    return null\r\n}\r\n\r\nexport function buildRiemann(item: PARSER, figures: Record<string, AbstractFigure>, graphConfig: IGraphConfig): IRiemannConfig | null {\r\n    const code = convertIdToFigure(item.values, figures)\r\n\r\n    if (item.key === PARSER_TYPE.RIEMANN.toString() && code.length >= 2) {\r\n        // item.code = [<function>,<domain>,<number>,<number>]\r\n\r\n        const [f, domain, rectangles, position] = code\r\n        return {\r\n            follow: f as Plot,\r\n            domain: isDOMAIN(domain) ? domain : { min: NaN, max: NaN },\r\n            rectangles: typeof rectangles === \"number\" ? rectangles : 5,\r\n            position: typeof position === \"number\" ? position : 0\r\n        }\r\n    }\r\n\r\n    return null\r\n}","import {type PARSER} from \"piparser/lib/PiParserTypes\"\r\nimport {AbstractFigure} from \"../figures/AbstractFigure\"\r\nimport {Line} from \"../figures/Line\"\r\nimport {type IPointConfig, Point} from \"../figures/Point\"\r\nimport {type IGraphConfig} from \"../pidraw.common\"\r\nimport {convertIdToFigure, type IParserValues, PARSER_TYPE} from \"./parser.common\"\r\n\r\nexport function buildPoint(item: PARSER, figures: Record<string, AbstractFigure>, graphConfig: IGraphConfig): IPointConfig | {\r\n    x: number,\r\n    y: number\r\n} | null {\r\n    // Default values\r\n    let shape = 'circle', size = 5\r\n\r\n    const shapeCode: string | undefined = Object.keys(item.parameters)\r\n        .find((key) =>\r\n            key.includes('*') ||\r\n            key.includes('s') ||\r\n            key.includes('o') )\r\n\r\n    switch (shapeCode) {\r\n        case 'o':\r\n            shape = 'circle'\r\n            size = item.parameters[shapeCode].value === true ? 5 : item.parameters[shapeCode].value as number\r\n            break\r\n        case 's':\r\n            shape = 'square'\r\n            size = item.parameters[shapeCode].value === true ? 10 : item.parameters[shapeCode].value as number\r\n            break\r\n        case '*':\r\n            shape = 'crosshair'\r\n            size = item.parameters[shapeCode].value === true ? 10 : item.parameters[shapeCode].value as number\r\n            break\r\n    }\r\n\r\n    const config = buildPoint_config(item, figures, graphConfig)\r\n\r\n    if (config) {\r\n        return Object.assign(config, {shape, size})\r\n    }\r\n\r\n    return null\r\n}\r\n\r\nfunction buildPoint_config(item: PARSER, figures: Record<string, AbstractFigure>, graphConfig: IGraphConfig): IPointConfig | {\r\n    x: number,\r\n    y: number\r\n} | null {\r\n    const code: IParserValues[] = convertIdToFigure(item.values, figures)\r\n\r\n    if (item.key === PARSER_TYPE.POINT.toString()) {\r\n        // item.code = [<number>,<number>] -> 2d\r\n        // item.code = [<number>,<number>,<number>] -> 3d\r\n        const [x, y] = code as number[]\r\n        if (typeof x === 'number' && typeof y === 'number') {\r\n            return {coordinates: {x, y}}\r\n        }\r\n    }\r\n\r\n    if (item.key === PARSER_TYPE.MIDDLE.toString() && code.length === 2) {\r\n        // item.code = [<Point>,<Point>]\r\n        const A = code[0]\r\n        const B = code[1]\r\n\r\n        if (A instanceof Point && B instanceof Point) {\r\n            return {middle: {A, B}}\r\n        }\r\n    }\r\n\r\n    if (item.key === PARSER_TYPE.PROJECTION.toString() && code.length === 2) {\r\n        // item.code = [<Point>,<Point>,<Point>]\r\n        const A = code[0]\r\n        const B = code[1]\r\n\r\n        if (A instanceof Point && (B instanceof Line || B === 'Ox' || B === 'Oy')) {\r\n            return {projection: {point: A, axis: B}}\r\n        }\r\n    }\r\n\r\n    if (item.key === PARSER_TYPE.INTERSECTION.toString() && code.length === 2) {\r\n        // item.code = [<Line>,<Line>]\r\n        const A = code[0]\r\n        const B = code[1]\r\n\r\n        if ((A instanceof Line || A === 'Ox' || A === 'Oy') && (B instanceof Line || B === 'Ox' || B === 'Oy')) {\r\n            return {intersection: {A, B}}\r\n        }\r\n    }\r\n\r\n    if (item.key === PARSER_TYPE.SYMMETRY.toString() && code.length === 2) {\r\n        // item.code = [<Point>,<Point|Line>]\r\n        const A = code[0]\r\n        const B = code[1]\r\n\r\n        if (A instanceof Point &&\r\n            (B instanceof Point || B instanceof Line || B === 'Ox' || B === 'Oy')\r\n        ) {\r\n            return {symmetry: {A, B}}\r\n        }\r\n    }\r\n\r\n    if (item.key === PARSER_TYPE.DIRECTION_POINT.toString() && code.length >= 3) {\r\n        const [A, line, distance, perpendicular] = code\r\n\r\n        if (A instanceof Point &&\r\n            (line instanceof Line || line === 'Ox' || line === 'Oy') &&\r\n            typeof distance === 'number') {\r\n\r\n            return {\r\n                direction: {\r\n                    direction: line,\r\n                    distance: distance,\r\n                    point: A,\r\n                    perpendicular: perpendicular !== undefined\r\n                },\r\n            }\r\n        }\r\n    }\r\n\r\n    if (item.key === PARSER_TYPE.VECTOR_POINT.toString() && code.length >= 2) {\r\n        const [A, B, scale, startingPoint] = code\r\n\r\n        if (A instanceof Point && B instanceof Point) {\r\n            const point = startingPoint instanceof Point ? startingPoint : A\r\n            const distance = typeof scale === \"number\" ? scale : 1\r\n\r\n            return {\r\n                direction: {\r\n                    point,\r\n                    direction: {A, B},\r\n                    distance\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return null\r\n}\r\n","import type { PARSER } from \"piparser/lib/PiParserTypes\"\r\nimport { AbstractFigure } from \"../figures/AbstractFigure\"\r\nimport { Point } from \"../figures/Point\"\r\nimport type { IPolygonConfig } from \"../figures/Polygon\"\r\nimport type { IGraphConfig, XY } from \"../pidraw.common\"\r\nimport { convertIdToFigure, PARSER_TYPE } from \"./parser.common\"\r\n\r\nexport function buildPolygon(item: PARSER, figures: Record<string, AbstractFigure>, graphConfig: IGraphConfig): IPolygonConfig | null {\r\n    const code = convertIdToFigure(item.values, figures)\r\n\r\n    if (item.key === PARSER_TYPE.POLYGON.toString() && code.length >= 2) {\r\n        // item.code = [<point>,<point>,...]\r\n        const points = code\r\n        if (points.every(p => p instanceof Point)) {\r\n            return { vertices: points as XY[] }\r\n        }\r\n    }\r\n\r\n    if (item.key === PARSER_TYPE.REGULAR.toString() && code.length >= 3) {\r\n        // item.code = [<point>,<number|point>,<number>]\r\n        const [center, radius, sides] = code\r\n        if (center instanceof Point && (typeof radius === 'number' || radius instanceof Point) && typeof sides === 'number') {\r\n            return {\r\n                regular: {\r\n                    center,\r\n                    radius,\r\n                    sides\r\n                }\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n\r\n    return null\r\n\r\n}","import { type PARSER } from \"piparser/lib/PiParserTypes\"\r\nimport { AbstractFigure } from \"../figures/AbstractFigure\"\r\nimport { type IGraphConfig } from \"../pidraw.common\"\r\nimport { buildArc, buildCircle } from \"./buildCircle\"\r\nimport { buildLine } from \"./buildLine\"\r\nimport { buildFillBetween, buildFollow, buildParametric, buildPlot, buildRiemann } from \"./buildPlot\"\r\nimport { buildPoint } from \"./buildPoint\"\r\nimport { buildPolygon } from \"./buildPolygon\"\r\n\r\n// TODO: add the build and create parameters to make it easily accessible and extensible.\r\nexport interface parser_item {\r\n    name: string,\r\n    description: string,\r\n    code: string,\r\n    parameters: string[],\r\n    build: (values: PARSER, figures: Record<string, AbstractFigure>, config: IGraphConfig) => unknown,\r\n    create: string,\r\n    option?: string\r\n}\r\nexport const parser_config: Record<string, parser_item> = {\r\n    pt: {\r\n        name: 'point',\r\n        description: 'Create a point',\r\n        code: 'A(3,4)',\r\n        parameters: ['drag', 'drag:grid', 'drag:axis', 'drag:x', 'drag:y', 'drag:<figure>'],\r\n        build: buildPoint,\r\n        create: 'point'\r\n    },\r\n    vpt: {\r\n        name: 'point from vector',\r\n        description: 'Create a point from a vector and a starting point',\r\n        code: 'A=vpt <point>,<point>,<scale?>,<starting point?>',\r\n        parameters: [],\r\n        build: buildPoint,\r\n        create: 'point'\r\n    },\r\n    dpt: {\r\n        name: 'point from direction line',\r\n        description: 'Create a point from a line and a starting point',\r\n        code: 'A=vpt <point>,<line>,<distance>,<perpendicular?>',\r\n        parameters: [],\r\n        build: buildPoint,\r\n        create: 'point'\r\n    },\r\n    mid: {\r\n        name: 'mid',\r\n        description: 'Create the middle of two points',\r\n        code: 'A=mid <point>,<point>',\r\n        parameters: [],\r\n        build: buildPoint,\r\n        create: 'point'\r\n    },\r\n    proj: {\r\n        name: 'projection',\r\n        description: 'Create the projection of a point on a line',\r\n        code: 'A=proj <point>,<line>',\r\n        parameters: [],\r\n        build: buildPoint,\r\n        create: 'point'\r\n    },\r\n    inter: {\r\n        name: 'intersection',\r\n        description: 'Create the intersection of two lines',\r\n        code: 'A=inter <line>,<line>',\r\n        parameters: [],\r\n        build: buildPoint,\r\n        create: 'point'\r\n    },\r\n    sym: {\r\n        name: 'symmetry',\r\n        description: 'Create the symmetry of a point',\r\n        code: 'A=sym <point>,<point|line>',\r\n        parameters: [],\r\n        build: buildPoint,\r\n        create: 'point'\r\n    },\r\n    line: {\r\n        name: 'line',\r\n        description: 'Create a line, a half line or a segment',\r\n        code: 'd=<line> | <line>[ | <line>.',\r\n        parameters: ['dash', 'dot'],\r\n        build: buildLine,\r\n        create: 'line'\r\n    },\r\n    vec: {\r\n        name: 'vector',\r\n        description: 'Create a vector',\r\n        code: 'd=v<line>',\r\n        parameters: [],\r\n        build: buildLine,\r\n        create: 'line'\r\n    },\r\n    seg: {\r\n        name: 'segment',\r\n        description: 'Create a segment through two points',\r\n        code: 's=<A><B>.',\r\n        parameters: [],\r\n        build: buildLine,\r\n        create: 'line'\r\n    },\r\n    ray: {\r\n        name: 'ray (half line)',\r\n        description: 'Create a line, a half line or a segment',\r\n        code: 'd=<line> | <line>[ | <line>.',\r\n        parameters: ['dash', 'dot'],\r\n        build: buildLine,\r\n        create: 'line'\r\n    },\r\n    perp: {\r\n        name: 'perpendicular',\r\n        description: 'Create the perpendicular of a line from a point',\r\n        code: 'd=perp <line>,<point>',\r\n        parameters: [],\r\n        build: buildLine,\r\n        create: 'line'\r\n    },\r\n    para: {\r\n        name: 'parallel',\r\n        description: 'Create a parallel line from a point',\r\n        code: 'd=para <line>,<point>',\r\n        parameters: [],\r\n        build: buildLine,\r\n        create: 'line'\r\n    },\r\n    med: {\r\n        name: 'mediator',\r\n        description: 'Create the mediator of two points',\r\n        code: 'd=med <point>,<point>',\r\n        parameters: [],\r\n        build: buildLine,\r\n        create: 'line'\r\n    },\r\n    // tangent: {\r\n    // name: 'tangent',\r\n    //     description: 'Create a tangent line from a point to a circle',\r\n    //     code: 'd=tan <point>,<point>',\r\n    //     parameters: []\r\n    // },\r\n    bis: {\r\n        name: 'bisector',\r\n        description: 'Create the bisector of an angle',\r\n        code: 'd=bis <point>,<point>,<point>',\r\n        parameters: [],\r\n        build: buildLine,\r\n        create: 'line'\r\n    },\r\n    circ: {\r\n        name: 'circle',\r\n        description: 'Create a circle',\r\n        code: 'c=circ <point>,<radius>',\r\n        parameters: [],\r\n        build: buildCircle,\r\n        create: 'circle'\r\n    },\r\n    arc: {\r\n        name: 'arc',\r\n        description: 'Create an arc',\r\n        code: 'c=arc <point>,<point>,<point>[,<number>]',\r\n        parameters: [],\r\n        build: buildArc,\r\n        create: 'arc'\r\n    },\r\n    plot: {\r\n        name: 'plot',\r\n        description: 'Plot a function',\r\n        code: 'f(x)=[f=plot ]<function>[@<number>,<domain>,<image>]',\r\n        parameters: [],\r\n        build: buildPlot,\r\n        create: 'plot'\r\n    },\r\n    parametric: {\r\n        name: 'parametric',\r\n        description: 'Plot a parametric function',\r\n        code: 'f(t)=[f=parametric ]<function_x>,<function_y>[,<domain>]',\r\n        parameters: [],\r\n        build: buildParametric,\r\n        create: 'parametric'\r\n    },\r\n    poly: {\r\n        name: 'polygon',\r\n        description: 'Create a polygon',\r\n        code: 'p=poly <point>,<point>,<point>,...',\r\n        parameters: [],\r\n        build: buildPolygon,\r\n        create: 'polygon'\r\n    },\r\n    reg: {\r\n        name: 'regular',\r\n        description: 'Create a regular polygon',\r\n        code: 'p=reg <center>,<radius>,<sides>',\r\n        parameters: [],\r\n        build: buildPolygon,\r\n        create: 'polygon'\r\n    },\r\n    follow: {\r\n        name: 'follow',\r\n        description: 'Create a tangent that follows a function',\r\n        code: 'f=follow <function>,<tangent?>',\r\n        parameters: [],\r\n        build: buildFollow,\r\n        create: 'follow'\r\n    },\r\n    fill: {\r\n        name: 'fillbetween',\r\n        description: 'Fill the area between two functions',\r\n        code: 'f=fill <function>,<function?>,<domain?>',\r\n        parameters: [],\r\n        build: buildFillBetween,\r\n        create: 'fillbetween'\r\n    },\r\n    riemann: {\r\n        name: 'riemann',\r\n        description: 'Create a Riemann sum',\r\n        code: 'f=riemann <function>,<domain>,<number>,<position>',\r\n        parameters: [],\r\n        build: buildRiemann,\r\n        create: 'riemann'\r\n    }\r\n}\r\n","import type { PARSER_VALUE } from \"./PiParserTypes\";\r\n\r\n/**\r\n * Converts a value to a PARSER_VALUE.\r\n * @param value The value to convert.\r\n * @returns The number.\r\n */\r\nexport function convertValue(value: string): PARSER_VALUE | PARSER_VALUE[] {\r\n    // It's a simple toggle key: set it to true.\r\n    if (value === '') return true;\r\n\r\n    // The string is a number: convert it to a number.\r\n    if (!isNaN(Number(value))) return parseFloat(value)\r\n\r\n    // The string is a fraction : a/b\r\n    // Detect with a regexp\r\n    if (value.match(/^[-.\\d]+\\/[-.\\d]+$/)) {\r\n        const [a, b] = value.split('/').map(Number);\r\n        return a / b\r\n    }\r\n\r\n    // The string is a XY pair: x;y\r\n    // Detect with a regexp\r\n    if (value.match(/^[-.\\d]+;[-.\\d]+$/)) {\r\n        const [x, y] = value.split(';').map(Number);\r\n        return { x, y }\r\n    }\r\n\r\n    // The string is a domain: \r\n    // min:max => min: number, max: number, axis: x\r\n    // min:max:axis => min: number, max: number, axis: <x|y|z>\r\n    // Detect with a regexp\r\n    if (value.match(/^[-.\\d]+:[-.\\d]+(:[xy])?$/)) {\r\n        const [v1, v2, axis] = value.split(':');\r\n\r\n        const v1n = Number(v1);\r\n        const v2n = Number(v2);\r\n\r\n        return {\r\n            min: Math.min(v1n, v2n),\r\n            max: Math.max(v1n, v2n),\r\n            axis: axis ?? 'x'\r\n        };\r\n    }\r\n\r\n    // The string is a range:\r\n    // min:max:step => min: number, max: number, step: number\r\n    // Detect with a regexp\r\n    if (value.match(/^[-.\\d]+:[-.\\d]+:[.\\d]+$/)) {\r\n        const [v1, v2, step] = value.split(':').map(Number);\r\n        const v1n = Number(v1);\r\n        const v2n = Number(v2);\r\n        const stepN = Number(step);\r\n\r\n        const dx = v2n - v1n;\r\n        const minStep = dx / 100;\r\n\r\n        return {\r\n            min: Math.min(v1, v2),\r\n            max: Math.max(v1, v2),\r\n            step: Math.max(stepN, minStep)\r\n        };\r\n    }\r\n\r\n    // If it starts and ends with \"[...]\", it's an array\r\n    if (value.startsWith('[') && value.endsWith(']')) {\r\n        return value\r\n            .slice(1, -1)\r\n            .split(',')\r\n            .map(convertValue) as PARSER_VALUE[]\r\n    }\r\n\r\n    // It's a string\r\n    return value\r\n}","/**\r\n * Extracts the value from a string.\r\n * @param value string to extract the value from.\r\n * @returns \r\n */\r\nexport function splitValues(value: string, splitter: string): string[] {\r\n    // Split the value by the splitter.\r\n    // Handle the case where the splitter is escaped => do not split.\r\n    // Replace all escaped splitters with \"ESCAPESPLITTER\".\r\n    const escapedValue = value\r\n        .replace(new RegExp(`\\\\\\\\${splitter}`, 'g'), 'ESCAPESPLITTER')\r\n\r\n    // Split the value by the splitter.\r\n    // Replace all \"ESCAPESPLITTER\" with the splitter.\r\n    return escapedValue\r\n        .split(splitter)\r\n        .map(v => v.replace('ESCAPESPLITTER', splitter))\r\n}","/**\r\n * Parses a key-value pair from a string.\r\n * @param entry The string to parse.\r\n * @returns A tuple containing the key and value.\r\n */\r\nexport function splitKeyValuePair(entry: string): { key: string, value: string } {\r\n    if (!entry.includes('=')) return { key: entry, value: '' };\r\n    const [key, ...values] = entry.split('=');\r\n\r\n    return {\r\n        key,\r\n        value: values.join('=')\r\n    }\r\n}","import { convertValue } from \"./convertValue\"\r\nimport { splitValues } from \"./splitValues\";\r\nimport { splitKeyValuePair } from \"./splitKeyValuePair\";\r\nimport type { PARSER, PARSER_PARAMETERS } from \"./PiParserTypes\";\r\n\r\n// Main function\r\ntype STRING_CB = (line: string) => string\r\n\r\nexport class PiParse {\r\n    #formatter: STRING_CB | undefined;\r\n    #MAIN_SPLITTER: string = '->';\r\n    #ENTRY_SPLITTER: string = ',';\r\n    #PARAMETER_SPLITTER: string = '/';\r\n    #keys: string[] = [];\r\n\r\n    constructor(config?: {\r\n        formatter?: STRING_CB,\r\n        splitter?: {\r\n            main: string,\r\n            entry: string,\r\n            parameter: string\r\n        },\r\n        keys?: string[]\r\n    }) {\r\n\r\n        // Base config is given !\r\n        if (config) {\r\n            // Default key-code formatter\r\n            this.#formatter = config.formatter ?? undefined;\r\n\r\n            // Splitter configuration\r\n            if (config.splitter?.main) {\r\n                this.#MAIN_SPLITTER = config.splitter.main;\r\n            }\r\n            if (config.splitter?.entry) {\r\n                this.#ENTRY_SPLITTER = config.splitter.entry;\r\n            }\r\n            if (config.splitter?.parameter) {\r\n                this.#PARAMETER_SPLITTER = config.splitter.parameter;\r\n            }\r\n\r\n            // Keys\r\n            if (config.keys) {\r\n                this.#keys = config.keys;\r\n            }\r\n        }\r\n    }\r\n\r\n    get splitter() {\r\n        return {\r\n            main: this.#MAIN_SPLITTER,\r\n            entry: this.#ENTRY_SPLITTER,\r\n            parameter: this.#PARAMETER_SPLITTER\r\n        }\r\n    }\r\n\r\n    set splitter_main(value: string) {\r\n        this.#MAIN_SPLITTER = value;\r\n    }\r\n    set splitter_entry(value: string) {\r\n        this.#ENTRY_SPLITTER = value;\r\n    }\r\n    set splitter_parameter(value: string) {\r\n        this.#PARAMETER_SPLITTER = value;\r\n    }\r\n\r\n    get formatter(): STRING_CB | undefined {\r\n        return this.#formatter;\r\n    }\r\n    set formatter(value: STRING_CB | undefined) {\r\n        this.#formatter = value;\r\n    }\r\n\r\n    get keys() {\r\n        return this.#keys;\r\n    }\r\n    set keys(value: string[]) {\r\n        this.#keys = value;\r\n    }\r\n\r\n    parse(value: string): PARSER {\r\n\r\n        // Split to the MAIN_SPLITTER\r\n        // name=key <value>[,...<values>]-><key1>=<value>[\\,...<values>],<key2>=<value>[\\,...<values>]\r\n        const [name_key_values_raw, parameters_values] = value.split(this.#MAIN_SPLITTER);\r\n\r\n        const name_key_values = this.#formatter ? this.#formatter(name_key_values_raw) : name_key_values_raw.trim();\r\n\r\n        const { name, key, values } = this.#handleNameKeyValues(name_key_values);\r\n\r\n        const parameters: PARSER_PARAMETERS = this.#handleParametersAndOptions(parameters_values);\r\n\r\n        return { name, key, values, parameters }\r\n    }\r\n\r\n    parameters(value: string, keys?: string[]): PARSER_PARAMETERS {\r\n        return this.#handleParametersAndOptions(value, keys ?? this.#keys);\r\n    }\r\n\r\n    #handleNameKeyValues(name_key_values: string) {\r\n        const [name_key, ...valuesSplitted] = name_key_values.split(' ');\r\n        const [name, key] = name_key.split('=');\r\n        const values = splitValues(\r\n            valuesSplitted\r\n                .join(' '),\r\n            this.#ENTRY_SPLITTER\r\n        ).map(value => convertValue(value));\r\n        return { name, key, values }\r\n    }\r\n\r\n    #handleParametersAndOptions(parameters_values: string | undefined, keys?: string[]) {\r\n        if (parameters_values === undefined) { return {} }\r\n\r\n        // The second part of the string are the parameters\r\n        // <key1>=<value>[\\,...<values>],<key2>=<value>[\\,...<values>]\r\n        let data: string[]\r\n        if (keys === undefined || keys.length === 0) {\r\n            data = splitValues(parameters_values, this.#ENTRY_SPLITTER);\r\n        } else {\r\n            // split at every keys.\r\n            // This way we can parse the parameters of a specific key\r\n            data = parameters_values\r\n                .split(new RegExp(`(?=${this.#ENTRY_SPLITTER}${keys.join(`|${this.#ENTRY_SPLITTER}`)})`))\r\n                .map((value: string) => {\r\n                    let result = value.trim()\r\n                    if (result.startsWith(',')) {\r\n                        result = result.slice(1).trim()\r\n                    }\r\n                    if (result.endsWith(',')) {\r\n                        result = result.slice(0, -1);\r\n                    }\r\n\r\n                    return splitValues(result, this.#ENTRY_SPLITTER).join(this.#ENTRY_SPLITTER);\r\n                });\r\n        }\r\n\r\n        const parameters: PARSER_PARAMETERS = {};\r\n\r\n        data.forEach(entry => {\r\n            // an entry is a key-value pair or a simple trigger\r\n            const { key, value } = splitKeyValuePair(entry);\r\n\r\n            // There is a special case where the value is a fraction a/b.\r\n            // It must not be split by the PARAMETER_SPLITTER\r\n            if (value.match(/^[-.\\d]+\\/[-.\\d]+$/)) {\r\n                parameters[key] = {\r\n                    value: convertValue(value),\r\n                    options: []\r\n                };\r\n                return;\r\n            }\r\n\r\n            const [v, ...options] = value.split(this.#PARAMETER_SPLITTER);\r\n            parameters[key] = {\r\n                value: convertValue(v),\r\n                options: options.map(value => convertValue(value))\r\n            };\r\n        });\r\n        return parameters;\r\n    }\r\n}\r\n\r\n","import { Graph, type IDraggableFollow } from \"./Graph\"\r\nimport {type IParserParameters, PARSER_TYPE, type IParserConfig, type IParserSettings, PARSER_COLOR_VALUES } from \"./parser/parser.common\"\r\nimport { COORDINATE_SYSTEM, type DOMAIN, type IGraphConfig, type IGraphDisplay, isDOMAIN, type XY } from \"./pidraw.common\"\r\nimport { parser_config } from \"./parser/parser.config\"\r\nimport { AbstractFigure } from \"./figures/AbstractFigure\"\r\nimport {type LABEL_POSITION } from \"./labels/Label\"\r\nimport { Point } from \"./figures/Point\"\r\nimport { PiParse } from \"piparser/lib/PiParse\"\r\nimport type { PARSER } from \"piparser/lib/PiParserTypes\"\r\n\r\nexport const PARSER_PARAMETERS_KEYS = [\r\n    'ppu', 'x', 'y', 'grid', 'axis', 'label', 'tex', 'points', 'no-points', 'subgrid'\r\n]\r\n\r\n// TODO: intersection of a line and a circle\r\n// TODO: prevent creation of too many markers...\r\nexport class Draw extends Graph {\r\n    #code: PARSER[]\r\n    #settings: IParserSettings\r\n    #parser: PiParse\r\n\r\n    constructor(id: string | HTMLElement, config?: IParserConfig) {\r\n        super(id, {\r\n            tex: config?.tex ?? ((value) => value)\r\n        })\r\n\r\n        // Set the parser\r\n        this.#parser = new PiParse({\r\n            formatter: (line: string) => this.#parseKeyCode(line),\r\n            keys: PARSER_PARAMETERS_KEYS,\r\n            splitter: {\r\n                main: '->',\r\n                entry: ',',\r\n                parameter: '/'\r\n            }\r\n        })\r\n\r\n        this.#settings = {}\r\n\r\n        // Build the layout using the default values or the parameters\r\n        if (config?.parameters) {\r\n            this.refreshLayout(config.parameters)\r\n        }\r\n\r\n        // Define the code to display\r\n        this.#code = []\r\n        if (config?.code) {\r\n            this.#build(config.code)\r\n        }\r\n\r\n        return this\r\n    }\r\n\r\n    static documentation() {\r\n        return parser_config\r\n    }\r\n\r\n    get code() {\r\n        return this.#code\r\n    }\r\n\r\n    /**\r\n     * Refresh the code to display\r\n     * @param code Code to parse and display\r\n     */\r\n    public refresh(code: string) {\r\n        // Remove every figures\r\n        this.clear()\r\n\r\n        // Reload the figures\r\n        this.#build(code)\r\n    }\r\n\r\n    /**\r\n     * Refresh the layout\r\n     * @param code Layout code to parse\r\n     */\r\n    public refreshLayout(code?: string) {\r\n        // Update the configuration\r\n        const layout = this.#parseLayout(code)\r\n\r\n        this.config = layout.config\r\n        this.display = layout.display\r\n        this.#settings = layout.settings\r\n\r\n        // Update the layout (from the extended Graph class)\r\n        this.updateLayout()\r\n    }\r\n\r\n    /**\r\n     * Prepare the code to load\r\n     * @param input Input code to parse and prepare\r\n     * @returns \r\n     */\r\n    #prepare(input: string): PARSER[] {\r\n        // Reset the code.\r\n        // TODO: check if resetting the code with events are correctly removed.\r\n        const data: PARSER[] = []\r\n\r\n        // Split at \\n => lines: string[]\r\n        // Filter the inputs\r\n        // - remove empty lines\r\n        // - trim each lines.\r\n        // - skip line starting with '$'\r\n        const lines: string[] = input\r\n            .split('\\n')\r\n            .map((line) => line.trim())\r\n            .filter((line) => line.trim() !== '' && !line.startsWith('$'))\r\n\r\n        // Define the block variables\r\n        // A block variable is a command that will be applied to the next lines, until the command is cleared.\r\n        const block: Record<string, IParserParameters> = {}\r\n\r\n        // Loop through each lines\r\n        for (const line of lines) {\r\n\r\n            // If lines starts with '@', it's a command\r\n            // Assign the command to the block\r\n            // Until the command is cleared, the block will be applied to the next lines.\r\n            if (line.startsWith('@')) {\r\n                const { key, value } = this.#defineCommand(line)\r\n                block[key] = { value, options: [] }\r\n                continue\r\n            }\r\n\r\n            // Parse the line\r\n            // Refactor a line for special cases:\r\n            // - A(3,4) => A=pt 3,4\r\n            // - d=AB => d=line A,B\r\n            // - d=AB. or d=[AB] => d=segment A,B\r\n            // - d=AB[ or d=[AB[ => d=halfline A,B\r\n            // - d=vAB => d=vec A,B\r\n            // - p(x)=x^2 => p=plot x^2\r\n            const parsedLine = this.#parser.parse(line)\r\n\r\n            // Add the block data to the parameters.\r\n            parsedLine.parameters = Object.assign(\r\n                parsedLine.parameters,\r\n                block\r\n            )\r\n\r\n            data.push(parsedLine)\r\n        }\r\n\r\n        return data\r\n    }\r\n\r\n    #uniqueName(name: string): string {\r\n        let newName = name\r\n        let i = 1\r\n        while (this.figures[newName]) {\r\n            newName = `${name}_${i}`\r\n            i++\r\n        }\r\n        return newName\r\n    }\r\n    /**\r\n     * Build the figures from the code\r\n     */\r\n    #build(input: string) {\r\n        this.#code = this.#prepare(input)\r\n        const pConfig = parser_config\r\n        const graphCreate = this.create\r\n\r\n        // Loop through each code\r\n        this.#code.forEach((item) => {\r\n            // Determine the id of the figure.\r\n            item.name = this.#uniqueName(item.name)\r\n\r\n            let obj: AbstractFigure | undefined\r\n            if (pConfig[item.key]) {\r\n                const { build, create, parameters } = pConfig[item.key]\r\n\r\n                // if <parameters> is not empty, it means the figure has specific parameters\r\n                // Check if they are defined in the item.parameters\r\n                if (parameters && parameters.length > 0 && Object.keys(item.parameters).length === 0) {\r\n                    const keys = Object.keys(item.parameters).filter(key => parameters.includes(key))\r\n                    keys.forEach((parameter) => {\r\n                        item.parameters[parameter] = { value: true, options: [] }\r\n                    })\r\n                }\r\n\r\n\r\n                // Create the object\r\n                // TODO: make it eslint friendly and ts friendly\r\n                if (Object.hasOwn(graphCreate, create)) {\r\n                    try {\r\n                        const config = build(item, this.figures, this.config)\r\n\r\n                        if (config) {\r\n                            /* eslint-disable */\r\n                            // @ts-expect-error: create is string and is not \r\n                            obj = this.create[create](config, item.name)\r\n                            /* eslint-enable */\r\n                        }\r\n                    } catch (e) {\r\n                        // TODO: the build*** function should return an error message\r\n                        console.log(e)\r\n\r\n                    }\r\n                }\r\n            }\r\n\r\n            if (obj) {\r\n                // Apply defaults settings to the object\r\n                if (this.#settings.label &&\r\n                    obj instanceof Point &&\r\n                    item.parameters.label === undefined && item.parameters.tex === undefined\r\n                ) {\r\n                    item.parameters.label = { value: true, options: [] }\r\n                }\r\n                if (this.#settings.tex &&\r\n                    obj instanceof Point &&\r\n                    item.parameters.label === undefined && item.parameters.tex === undefined\r\n                ) {\r\n                    item.parameters.tex = { value: true, options: [] }\r\n                }\r\n\r\n                if (obj instanceof Point && this.#settings.points === false) {\r\n                    item.parameters['!'] = { value: true, options: [] }\r\n                }\r\n\r\n                this.#applyOptions(item.parameters, obj)\r\n            }\r\n        })\r\n\r\n\r\n    }\r\n\r\n    #applyOptions(options: Record<string, IParserParameters>, obj: AbstractFigure) {\r\n        Object.keys(options).forEach((key) => {\r\n            switch (key) {\r\n                // Appearance\r\n                case 'w':\r\n                    obj.stroke(options[key].value as number)\r\n                    break\r\n                case 'ultrathin':\r\n                    obj.stroke(0.5)\r\n                    break\r\n                case 'thin':\r\n                    obj.stroke(0.75)\r\n                    break\r\n                case 'thick':\r\n                    obj.stroke(2.5)\r\n                    break\r\n                case 'ultrathick':\r\n                    obj.stroke(4)\r\n                    break\r\n                case 'color':\r\n                    obj.stroke(options[key].value as string)\r\n                    break\r\n                case 'fill':\r\n                    obj.fill(options[key].value as string)\r\n                    break\r\n                case 'dash':\r\n                    options[key].value === true ?\r\n                        obj.dash() :\r\n                        obj.dash(options[key].value as string)\r\n                    break\r\n                case 'dot':\r\n                    obj.dot()\r\n                    break\r\n                case 'mark':\r\n                    obj.mark(\r\n                        options[key].value as string,\r\n                        options[key].options as (number | string)[]\r\n                    )\r\n                    break\r\n\r\n                // Visibility\r\n                case 'hide':\r\n                case '!':\r\n                    obj.hide()\r\n                    break\r\n                case '#':\r\n                case 'static':\r\n                    obj.static = options[key].value as boolean\r\n                    break\r\n                case '?':\r\n                    obj.label?.hide()\r\n                    break\r\n\r\n                // Placement\r\n                case 'move':\r\n                    obj.move(options[key].value as XY)\r\n                    break\r\n\r\n                // Label and text\r\n                case 'label':\r\n                case 'tex':\r\n                    obj.addLabel(\r\n                        options[key].value === true ? obj.name : options[key].value as string,\r\n                        key === 'tex',\r\n                        this.toTex\r\n                    )\r\n\r\n                    if (obj.label) {\r\n                        const alignement = options[key].options[0] === false ? 'br' : options[key].options[0] as LABEL_POSITION\r\n                        const offsetAsUnits = options[key].options[1] as XY | undefined ?? { x: 0, y: 0 }\r\n                        const offset = {\r\n                            x: offsetAsUnits.x * this.config.axis.x.x,\r\n                            y: -offsetAsUnits.y * this.config.axis.y.y\r\n                        }\r\n\r\n                        obj.label.position(\r\n                            alignement,\r\n                            offset\r\n                        )\r\n                    }\r\n\r\n                    break\r\n\r\n                // Draggable\r\n                case 'drag':\r\n                    this.#applyDrag(obj, key, options)\r\n                    break\r\n\r\n                default: {\r\n                    // Maybe it's a color\r\n                    if (PARSER_COLOR_VALUES.includes(key)) {\r\n                        obj.stroke(key)\r\n                    }\r\n                }\r\n            }\r\n\r\n        })\r\n    }\r\n\r\n    #defineCommand(command: string): { key: string, value: boolean } {\r\n        // A command is: @<begin|end>:<key>\r\n\r\n        // Remove the '@' and split the command into key and value\r\n        const [value, key] = command.slice(1).split(':')\r\n\r\n        // Return the key and value\r\n        return { key, value: value === 'begin' }\r\n\r\n    }\r\n\r\n    #parseLayout(code?: string): { config: IGraphConfig, display: IGraphDisplay, settings: IParserSettings } {\r\n\r\n        // const parameters = PiParseParameters(code)\r\n        const parameters = this.#parser.parameters(code ?? '', PARSER_PARAMETERS_KEYS)\r\n\r\n        // Define the configuration\r\n        const ppu = parameters.ppu ? parseFloat(parameters.ppu.value as string) : 50\r\n        const xDomain = parameters.x && isDOMAIN(parameters.x.value) ? parameters.x.value : { min: -8, max: 8 }\r\n        const yDomain = parameters.y && isDOMAIN(parameters.y.value) ? parameters.y.value : { min: -8, max: 8 }\r\n        const dx = Math.abs(xDomain.max - xDomain.min)\r\n        const dy = Math.abs(yDomain.max - yDomain.min)\r\n\r\n\r\n        const width = dx * ppu\r\n        const height = dy * ppu\r\n        const origin = {\r\n            x: -xDomain.min * ppu,\r\n            y: yDomain.max * ppu\r\n        }\r\n\r\n        const system = COORDINATE_SYSTEM.CARTESIAN_2D\r\n        const axisConfig = {\r\n            x: { x: ppu, y: 0 },\r\n            y: { x: 0, y: -ppu }\r\n        }\r\n\r\n        // Display options\r\n        const grid = parameters.grid ? true : false\r\n        const axis = parameters.axis ? true : false\r\n        const subgrid = parameters.subgrid ? parseFloat(parameters.subgrid.value as string) : 0\r\n\r\n        // Parser specific settings\r\n        const settings: IParserSettings = {\r\n            label: parameters.label ? true : false,\r\n            tex: parameters.tex ? true : false,\r\n            points: parameters['no-points'] ? false : parameters.points ? parameters.points.value as 'o' | '*' | 's' : 'o'\r\n        }\r\n\r\n        return {\r\n            config: {\r\n                width,\r\n                height,\r\n                origin,\r\n                system,\r\n                axis: axisConfig,\r\n            },\r\n            display: {\r\n                grid,\r\n                subgrid,\r\n                axis\r\n            },\r\n            settings\r\n        }\r\n    }\r\n\r\n    #parseKeyCode(key_code: string): string {\r\n\r\n        // There are 3 possibilities for the key_code:\r\n        // 1. A(3,4) => id='A', key=POINT, code= ['3','4']\r\n        // 2. d=AB => id='AB', key=LINE, code=['A', 'B']\r\n        // 3. d=<key> <code> => id='d', key='<key>' code\r\n\r\n        // Extract the point (no = sign). The id is before the '(' and the code is between '(' and ')'\r\n        if (key_code.match(/^[A-Z][0-9]*\\(.*\\)$/)) {\r\n            return this.#parseKeyCodePoint(key_code)\r\n        }\r\n\r\n        // Extract the plot or parametric function\r\n        if (key_code.match(/^[a-z][0-9]*\\([x|t]\\)/)) {\r\n            return this.#parseKeyCodePlot(key_code)\r\n        }\r\n\r\n        // Extract the line (with = sign). The id is before the '=' and the code is after '='\r\n        // This is a special version (no spaces) and should be checked first\r\n        if (key_code.includes('=') && !key_code.includes(' ')) {\r\n            return this.#parseKeyCodeLine(key_code)\r\n        }\r\n\r\n        return key_code\r\n    }\r\n\r\n    // TO BE MOVED TO BUILD_POINT\r\n    #parseKeyCodePoint(key_code: string): string {\r\n        // Extract the point (no = sign). The id is before the '(' and the code is between '(' and ')'\r\n        const id = key_code.split('(')[0]\r\n        const code = key_code.split('(')[1].split(')')[0].split(',')\r\n        // const parameters = this.#parseParameters(key_code.split(')')[1])\r\n\r\n        return `${id}=pt ${code[0]},${code[1]}`\r\n    }\r\n\r\n    // TO BE MOVED TO BUILD_LINE\r\n    #parseKeyCodeLine(key_code: string): string {\r\n        // Extract the line (with = sign). The id is before the '=' and the code is after '='\r\n        const [id, ...datas] = key_code.split('=')\r\n        let data = datas.join('=')\r\n\r\n        // Determine the shape of the line\r\n        // vAB => vector AB\r\n        // AB. => segment AB\r\n        // [AB] => segment AB\r\n        // [AB[ => half line AB\r\n        // AB[ => half line AB\r\n        // [AB => half line AB\r\n        // AB => line AB\r\n\r\n        // prefix can be v or [ or null\r\n        let prefix: string | null = data[0]\r\n        if (prefix !== 'v' && prefix !== '[') { prefix = null }\r\n\r\n        // suffix can be ., ], [ or null\r\n        let suffix: string | null = data[data.length - 1]\r\n        if (suffix !== '.' && suffix !== ']' && suffix !== '[') { suffix = null }\r\n\r\n        let shape = 'line'\r\n        if (prefix === 'v' && suffix === null) {\r\n            data = data.slice(1)\r\n            shape = 'vec'\r\n        } else if (\r\n            (prefix === null && suffix === '.') ||\r\n            (prefix === '[' && suffix === ']')\r\n        ) {\r\n            if (prefix === '[') { data = data.slice(1) }\r\n            data = data.slice(0, -1)\r\n            shape = 'seg'\r\n        } else if (\r\n            (prefix === '[' && suffix === '[') ||\r\n            (prefix === null && suffix === '[') ||\r\n            (prefix === '[' && suffix === null)\r\n        ) {\r\n            if (prefix === '[') { data = data.slice(1) }\r\n            if (suffix === '[') { data = data.slice(0, -1) }\r\n\r\n            shape = 'ray'\r\n        }\r\n\r\n        const code = data.split(/(?=[A-Z])/)\r\n\r\n        return `${id}=${shape} ${code[0]},${code[1]}`\r\n    }\r\n\r\n    // TO BE MOVED TO BUILD_PLOT\r\n    #parseKeyCodePlot(key_code: string): string {\r\n        // Extract the plot or parametric function\r\n        const [id_xt, data] = key_code.split('=')\r\n\r\n        // Remove the (x) or (t) from the id\r\n        const id = id_xt.split('(')[0]\r\n\r\n        // Determine the type of the parser (plot or parametric)\r\n        const key = key_code.includes('(x)=') ? PARSER_TYPE.PLOT : PARSER_TYPE.PARAMETRIC\r\n\r\n\r\n        return `${id}=${key} ${data}`\r\n    }\r\n\r\n    #applyDrag(obj: AbstractFigure, key: string, options: Record<string, IParserParameters>) {\r\n\r\n        // TODO: making a drag element: create the interactive object\r\n\r\n        // Actually, only points are draggable\r\n        if (obj instanceof Point) {\r\n            const dragConfigInit: IDraggableFollow[] = []\r\n            const dragConfig: IDraggableFollow[] = []\r\n\r\n            const interactive = new Point(this.rootSVG, obj.name + '_drag', {\r\n                coordinates: { x: 0, y: 0 }\r\n            })\r\n            interactive.pixels = obj.pixels\r\n            interactive.asCircle(30).fill('white/0.8')\r\n            this.layers.interactive.add(interactive.element)\r\n\r\n            // Check the options\r\n            // - grid\r\n            // - Ox\r\n            // - Oy\r\n            // - DOMAIN / IMAGE\r\n            const dragOptions = [options[key].value as string, ...options[key].options]\r\n            dragOptions.forEach((dragFollow) => {\r\n                if (['grid', 'Ox', 'Oy'].includes(dragFollow as string)) {\r\n                    dragConfigInit.push(this.follow(dragFollow as string, obj))\r\n                }\r\n\r\n                if (isDOMAIN(dragFollow)) {\r\n                    const axis = dragFollow.axis ?? 'x'\r\n                    const delta: DOMAIN = this.toPixels(dragFollow, axis)\r\n\r\n                    dragConfigInit.push(\r\n                        (x: number, y: number) => {\r\n                            return {\r\n                                x: axis === 'x' ? Math.max(delta.min, Math.min(x, delta.max)) : x,\r\n                                y: axis === 'y' ? Math.max(delta.min, Math.min(y, delta.max)) : y\r\n                            }\r\n                        }\r\n                    )\r\n                }\r\n\r\n                if (Object.hasOwn(this.figures, dragFollow as string)) {\r\n                    const figToFollow = this.figures[dragFollow as string]\r\n                    dragConfig.push((x: number, y: number) => figToFollow.follow(x, y))\r\n                }\r\n            })\r\n\r\n            // Move the point to the interactive layer\r\n            // this.layers.interactive.add(obj.element)\r\n            // Resize the draggable point\r\n            // obj.asCircle(20)\r\n            //     .fill('white/0.8')\r\n\r\n            this.draggable(interactive,\r\n                obj,\r\n                {\r\n                    follow: [\r\n                        ...dragConfigInit,\r\n                        ...dragConfig\r\n                    ]\r\n                }\r\n            )\r\n        }\r\n    }\r\n}\r\n"],"names":["methods","names","registerMethods","name","m","_name","addMethodNames","getMethodsFor","getMethodNames","_names","map","array","block","i","il","result","filter","radians","d","unCamelCase","s","g","capitalize","proportionalSize","element","width","height","box","getOrigin","o","origin","ox","oy","condX","condY","x","y","descriptiveElements","isDescriptive","writeDataToDom","data","defaults","cloned","key","svg","html","xmlns","xlink","globals","getWindow","Base","elements","root","create","ns","makeInstance","isHTML","adopter","wrapper","nodeOrNew","node","adopt","className","register","asRoot","getClass","did","eid","assignNewId","extend","modules","wrapWithAttrCheck","fn","args","siblings","position","next","prev","forward","backward","front","back","before","after","insertBefore","insertAfter","numberAndUnit","hex","rgb","reference","transforms","whitespace","isHex","isRgb","isBlank","isNumber","isImage","delimiter","isPathLetter","classes","attr","hasClass","addClass","removeClass","c","toggleClass","css","style","val","ret","el","t","cased","show","hide","visible","a","v","r","remember","k","forget","memory","sixDigitHex","componentHex","component","integer","is","object","space","getParameters","b","params","cieSpace","hueToRgb","p","q","Color","inputs","color","mode","random","round","sin","pi","l","h","grey","_a","_b","_c","max","min","isGrey","delta","values","noWhitespace","hexParse","_d","components","z","dToR","yL","xL","zL","ct","mx","nm","rU","gU","bU","pow","bd","rV","gV","bV","r255","g255","b255","rL","gL","bL","xU","yU","zU","format","Point$1","Point","base","source","Matrix","point","closeEnough","threshold","flipBoth","flipX","flipY","skewX","skewY","scaleX","scaleY","shear","theta","px","py","translate","tx","ty","relative","rx","ry","e","f","cx","cy","matrix","dx","dy","determinant","ccw","sx","thetaRad","st","lam","sy","other","comp","axis","around","Element","det","na","nb","nc","nd","ne","nf","cos","lx","ly","current","transformer","ctm","screenCTM","rect","parser","path","isNulledBox","domContains","Box","xMin","xMax","yMin","yMax","getBox","getBBoxFn","retry","bbox","clone","rbox","inside","level","zoomX","zoomY","zoom","zoomAmount","List","arr","fnOrMethodName","reserved","obj","attrs","baseFind","query","parent","find","findOne","listenerId","windowEvents","getEvents","instance","n","getEventTarget","clearEvents","on","events","listener","binding","options","bag","event","ev","off","namespace","dispatch","EventTarget","j","noop","timeline","SVGArray","SVGNumber","unit","number","value","colorAttributes","hooks","registerAttrHook","last","curr","_val","hook","Dom","deep","assignNewIds","nodeClone","children","nodeName","htmlOrFn","outerHTML","id","selector","matcher","type","precision","factor","svgOrFn","outerSVG","text","xmlOrFn","outerXML","_this","well","fragment","len","until","isSelector","parents","sugar","extension","mat","angle","direction","length","untransform","matrixify","str","kv","transform","toParent","pCtm","toRoot","decomposed","cleanRelative","Container","index","Defs","Shape","Ellipse","circled","Fragment","from","to","Gradient","gradiented","Pattern","Image","url","callback","img","pattern","PointArray","maxX","maxY","minX","minY","points","MorphArray","x1","y1","x2","y2","Line","pointed","Marker","orient","marker","makeSetterGetter","easing","pos","steps","stepPosition","jumps","beforeFlag","step","jumping","Stepper","Ease","Controller","target","dt","recalculate","duration","overshoot","eps","os","zeta","wn","Spring","velocity","acceleration","newPosition","PID","windup","segmentParameters","pathHandlers","p0","mlhvqtcsaz","jl","makeAbsolut","command","segmentComplete","startNewSegment","token","finalizeNumber","pathLetter","lastCommand","small","isSmall","inNumber","finalizeSegment","isArcFlag","isArc","isExponential","pathDelimiters","pathParser","toAbsolute","arrayToString","PathArray","getClassForType","NonMorphable","morphableTypes","ObjectBag","Morphable","stepper","TransformBag","sortByKey","defaultObject","toDelete","objOrArr","entries","Type","num","registerMorphableType","makeMorphable","context","mapper","Path","clear","move","plot","size","Polygon","poly","Polyline","Rect","Queue","item","remove","Animator","delay","time","now","nextTimeout","lastTimeout","nextFrame","lastFrame","nextImmediate","makeSchedule","runnerInfo","start","end","defaultSource","w","Timeline","timeSource","lastRunnerInfo","lastDuration","endTimes","dtOrForever","yes","currentSpeed","positive","runner","when","absoluteStartTime","endTime","persist","info","speed","immediateStep","dtSource","dtTime","runnersLeft","dtToStart","Runner","times","swing","wait","enabled","loopDuration","loopsDone","whole","partial","swinging","backwards","uncliped","swingForward","initFn","runFn","retargetFn","isTransform","reverse","running","justStarted","justFinished","declarative","converged","needsIt","method","morpher","positionOrDt","allfinished","extra","FakeRunner","done","lmultiply","getRunnerTransform","mergeTransforms","netTransform","RunnerArray","deleteCnt","newRunner","lastRunner","by","currentRunner","difference","nameOrAttrs","keys","newToAttrs","newKeys","differences","addedFromAttrs","oldFromAttrs","oldToAttrs","newLevel","newPoint","affine","isMatrix","currentAngle","startTransform","setup","run","rTarget","rCurrent","possibilities","distances","shortest","affineParameters","retarget","newTransforms","newTo","Svg","Symbol","plain","center","ax","ay","amove","build","Text","rebuild","self","blankLineOffset","leading","fontSize","firstLine","textable","Tspan","tspan","Circle","ClipPath","clipper","ForeignObject","dmove","child","G","containerGeometry","A","link","Mask","masker","Stop","offset","opacity","cssRule","rule","Style","src","TextPath","track","pathArray","importNodes","textPath","Use","file","SVG","getCoordsFromEvent","DragHandler","isMouse","eventMove","eventEnd","lastClick","currentClick","enable","isXY","isDOMAIN","LAYER_NAME","COORDINATE_SYSTEM","_element","_shape","_config","_displayName","_x","_y","_style","_Label_instances","makeLabel_fn","Label","rootG","config","__privateAdd","__privateSet","__privateMethod","__privateGet","alignement","svgHTML","numberCorrection","number_of_digits","isInfinity","distanceAB","B","mathVector","__publicField","u","rads","mathLine","slope","m1","h1","m2","h2","NumExp","uniformize","Shutingyard","stack","tokenConstant","decimal","expr","tokenType","variable","fnToken","kToken","normalizedExpr","crtToken","nextToken","tokenIdx","securityLoopLvl1","securityLoopLvl2","tokenPos","securityLoopLvl2_default","outQueue","opStack","opTop","toPixels","coordinates","toCoordinates","pixels","computeLine","padding","half_axis","k_start","k_end","polarToCartesian","centerX","centerY","radius","angleInDegrees","angleInRadians","cartesianToAngle","handle","createMarker","scale","shape","add","_rootSVG","_appearance","_static","_isDraggable","_label","AbstractFigure","rootSVG","colorName","strokeWidth","dasharray","all","forceUpdate","asHtml","texConverter","_end","_start","_Line_instances","makeShape_fn","C","AB","normAB","AC","normAC","_pixels","_Point_instances","pt","line","x0","y0","dotProduct","dotProductLength","line1","line2","coord","proj","distance","coords","diagonal_size","_numExp","_Plot_instances","Plot","domain","image","samples","previous","cmd","asCoordinates","_Circle_instances","_Polygon_instances","figuresXYtoArray_fn","polygon","plotPoints","OP","pointsCoordinates","acc","_Grid_instances","computeLines_fn","Grid","cur","xDirection","yDirection","gridPath","_markers","_Arc_instances","Arc","OA","OB","startXY","endXY","largeArcFlag","_axis","_CoordinateSystem_instances","defaultConfig_fn","updateAxis_fn","CoordinateSystem","coordinateSystem","arrow","_Parametric_instances","Parametric","_reference","_delta","_point","_tangent","_Follow_instances","Follow","handler","clientXY","follow","_FillBetween_instances","FillBetween","flatten","path1","path2","_Riemann_instances","Riemann","dxPixels","yPixel","xPixel","_Path_instances","_display","_figures","_layers","_toTex","_Graph_instances","makeLayout_fn","Graph","defaultUnit","system","label","constraints","circle","arc","fillbetween","riemann","figure","dragmove","ptFigure","xy","xGrid","yGrid","gridConfig","aGrid","subdivision","subAxis","except","PARSER_TYPE","convertIdToFigure","figures","option","PARSER_COLOR_VALUES","buildCircle","graphConfig","code","buildArc","buildLine","lineType","equ","left","right","coefficientLeft","parsePolynom","coefficientRight","coefficient","through","d1","d2","polynom","buildPlot","cfg","domains","buildParametric","buildFollow","showTangent","buildFillBetween","f1","f2","buildRiemann","rectangles","buildPoint","shapeCode","buildPoint_config","perpendicular","startingPoint","buildPolygon","sides","parser_config","convertValue","v1","v2","v1n","v2n","stepN","minStep","splitValues","splitter","splitKeyValuePair","entry","_formatter","_MAIN_SPLITTER","_ENTRY_SPLITTER","_PARAMETER_SPLITTER","_keys","_PiParse_instances","handleNameKeyValues_fn","handleParametersAndOptions_fn","PiParse","name_key_values_raw","parameters_values","name_key_values","parameters","name_key","valuesSplitted","PARSER_PARAMETERS_KEYS","_code","_settings","_parser","_Draw_instances","prepare_fn","uniqueName_fn","build_fn","applyOptions_fn","defineCommand_fn","parseLayout_fn","parseKeyCode_fn","parseKeyCodePoint_fn","parseKeyCodeLine_fn","parseKeyCodePlot_fn","applyDrag_fn","Draw","layout","input","lines","parsedLine","newName","pConfig","graphCreate","parameter","offsetAsUnits","ppu","xDomain","yDomain","axisConfig","grid","subgrid","settings","key_code","datas","prefix","suffix","id_xt","dragConfigInit","dragConfig","interactive","dragFollow","figToFollow"],"mappings":"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","x_google_ignoreList":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,99,100,101,102]}